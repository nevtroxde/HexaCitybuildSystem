<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/de/nicerecord/citybuildsystem/admin/VanishListener.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/de/nicerecord/citybuildsystem/admin/VanishListener.java" />
              <option name="updatedContent" value="package de.nicerecord.citybuildsystem.admin;&#10;&#10;import de.nicerecord.citybuildsystem.CitybuildSystem;&#10;import org.bukkit.event.EventHandler;&#10;import org.bukkit.event.Listener;&#10;import org.bukkit.event.player.PlayerJoinEvent;&#10;&#10;public class VanishListener implements Listener {&#10;    private final CitybuildSystem plugin;&#10;&#10;    public VanishListener(CitybuildSystem plugin) {&#10;        this.plugin = plugin;&#10;    }&#10;&#10;    @EventHandler&#10;    public void onPlayerJoin(PlayerJoinEvent event) {&#10;        VanishCommand.handlePlayerJoin(event.getPlayer(), plugin);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/de/nicerecord/citybuildsystem/bank/BankCommand.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/de/nicerecord/citybuildsystem/bank/BankCommand.java" />
              <option name="originalContent" value="package de.nicerecord.citybuildsystem.bank;&#10;&#10;import de.nicerecord.citybuildsystem.CitybuildSystem;&#10;import de.nicerecord.citybuildsystem.utils.MessageManager;&#10;import net.milkbowl.vault.economy.Economy;&#10;import org.bukkit.ChatColor;&#10;import org.bukkit.command.Command;&#10;import org.bukkit.command.CommandExecutor;&#10;import org.bukkit.command.CommandSender;&#10;import org.bukkit.entity.Player;&#10;&#10;public class BankCommand implements CommandExecutor {&#10;    private final CitybuildSystem plugin;&#10;    private final BankManager bankManager;&#10;    private final MessageManager messageManager;&#10;    private final Economy economy;&#10;    private final BankGUI bankGUI;&#10;&#10;    public BankCommand(CitybuildSystem plugin, BankManager bankManager, MessageManager messageManager, Economy economy) {&#10;        this.plugin = plugin;&#10;        this.bankManager = bankManager;&#10;        this.messageManager = messageManager;&#10;        this.economy = economy;&#10;        this.bankGUI = new BankGUI(plugin, bankManager, messageManager, economy);&#10;    }&#10;&#10;    @Override&#10;    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {&#10;        if (!(sender instanceof Player)) {&#10;            sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;general.only-players&quot;)));&#10;            return true;&#10;        }&#10;&#10;        Player player = (Player) sender;&#10;&#10;        if (!player.hasPermission(&quot;cbsystem.bank&quot;)) {&#10;            player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;general.no-permission&quot;)));&#10;            return true;&#10;        }&#10;&#10;        if (economy == null) {&#10;            player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;bank.economy-not-available&quot;)));&#10;            return true;&#10;        }&#10;&#10;        if (args.length == 0) {&#10;            // Open main GUI&#10;            // Open main GUI&#10;            bankGUI.openMainGUI(player);&#10;            return true;&#10;        }&#10;&#10;        String subCommand = args[0].toLowerCase();&#10;&#10;        switch (subCommand) {&#10;            case &quot;balance&quot;:&#10;            case &quot;bal&quot;:&#10;                handleBalance(player);&#10;                break;&#10;            case &quot;deposit&quot;:&#10;            case &quot;dep&quot;:&#10;                if (args.length &lt; 2) {&#10;                    player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;commands.bank.deposit-usage&quot;)));&#10;                    return true;&#10;                }&#10;                handleDeposit(player, args[1]);&#10;                break;&#10;            case &quot;withdraw&quot;:&#10;            case &quot;wd&quot;:&#10;                if (args.length &lt; 2) {&#10;                    player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;commands.bank.withdraw-usage&quot;)));&#10;                    return true;&#10;                }&#10;                handleWithdraw(player, args[1]);&#10;                break;&#10;            default:&#10;                player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;commands.bank.usage&quot;)));&#10;                break;&#10;        }&#10;&#10;        return true;&#10;    }&#10;&#10;    private void handleBalance(Player player) {&#10;        bankManager.getBalance(player.getUniqueId()).thenAccept(bankBalance -&gt; {&#10;            double vaultBalance = economy.getBalance(player);&#10;            &#10;            player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                messageManager.getMessage(&quot;bank.balance&quot;)&#10;                    .replace(&quot;%bank_balance%&quot;, formatMoney(bankBalance))&#10;                    .replace(&quot;%vault_balance%&quot;, formatMoney(vaultBalance))));&#10;        });&#10;    }&#10;&#10;    private void handleDeposit(Player player, String amountStr) {&#10;        double amount;&#10;        try {&#10;            if (amountStr.equalsIgnoreCase(&quot;all&quot;) || amountStr.equalsIgnoreCase(&quot;alles&quot;)) {&#10;                amount = economy.getBalance(player);&#10;            } else {&#10;                amount = Double.parseDouble(amountStr);&#10;            }&#10;        } catch (NumberFormatException e) {&#10;            player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;bank.invalid-amount&quot;)));&#10;            return;&#10;        }&#10;&#10;        if (amount &lt;= 0) {&#10;            player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;bank.invalid-amount&quot;)));&#10;            return;&#10;        }&#10;&#10;        if (amount &gt; 100000) {&#10;            player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;bank.deposit-limit&quot;)));&#10;            return;&#10;        }&#10;&#10;        if (economy.getBalance(player) &lt; amount) {&#10;            player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;bank.insufficient-funds&quot;)));&#10;            return;&#10;        }&#10;&#10;        bankManager.deposit(player, amount).thenAccept(success -&gt; {&#10;            if (success) {&#10;                economy.withdrawPlayer(player, amount);&#10;                player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                    messageManager.getMessage(&quot;bank.deposit-success&quot;).replace(&quot;%amount%&quot;, formatMoney(amount))));&#10;            } else {&#10;                player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;bank.deposit-failed&quot;)));&#10;            }&#10;        });&#10;    }&#10;&#10;    private void handleWithdraw(Player player, String amountStr) {&#10;        double amount;&#10;        try {&#10;            if (amountStr.equalsIgnoreCase(&quot;all&quot;) || amountStr.equalsIgnoreCase(&quot;alles&quot;)) {&#10;                amount = bankManager.getBalance(player.getUniqueId()).join();&#10;            } else {&#10;                amount = Double.parseDouble(amountStr);&#10;            }&#10;        } catch (NumberFormatException e) {&#10;            player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;bank.invalid-amount&quot;)));&#10;            return;&#10;        }&#10;&#10;        if (amount &lt;= 0) {&#10;            player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;bank.invalid-amount&quot;)));&#10;            return;&#10;        }&#10;&#10;        if (amount &gt; 1000000) {&#10;            player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;bank.withdraw-limit&quot;)));&#10;            return;&#10;        }&#10;&#10;        bankManager.getBalance(player.getUniqueId()).thenAccept(bankBalance -&gt; {&#10;            if (bankBalance &lt; amount) {&#10;                player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;bank.insufficient-bank-funds&quot;)));&#10;                return;&#10;            }&#10;&#10;            bankManager.withdraw(player, amount).thenAccept(success -&gt; {&#10;                if (success) {&#10;                    economy.depositPlayer(player, amount);&#10;                    player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                        messageManager.getMessage(&quot;bank.withdraw-success&quot;).replace(&quot;%amount%&quot;, formatMoney(amount))));&#10;                } else {&#10;                    player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;bank.withdraw-failed&quot;)));&#10;                }&#10;            });&#10;        });&#10;    }&#10;&#10;    private String formatMoney(double amount) {&#10;        if (amount &gt;= 1000000) {&#10;            return String.format(&quot;%.1fM&quot;, amount / 1000000);&#10;        } else if (amount &gt;= 1000) {&#10;            return String.format(&quot;%.1fK&quot;, amount / 1000);&#10;        } else {&#10;            return String.format(&quot;%.2f&quot;, amount);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package de.nicerecord.citybuildsystem.bank;&#10;&#10;import de.nicerecord.citybuildsystem.CitybuildSystem;&#10;import de.nicerecord.citybuildsystem.utils.MessageManager;&#10;import net.milkbowl.vault.economy.Economy;&#10;import org.bukkit.ChatColor;&#10;import org.bukkit.command.Command;&#10;import org.bukkit.command.CommandExecutor;&#10;import org.bukkit.command.CommandSender;&#10;import org.bukkit.entity.Player;&#10;&#10;public class BankCommand implements CommandExecutor {&#10;    private final CitybuildSystem plugin;&#10;    private final BankManager bankManager;&#10;    private final MessageManager messageManager;&#10;    private final Economy economy;&#10;    private final BankGUI bankGUI;&#10;&#10;    public BankCommand(CitybuildSystem plugin, BankManager bankManager, MessageManager messageManager, Economy economy) {&#10;        this.plugin = plugin;&#10;        this.bankManager = bankManager;&#10;        this.messageManager = messageManager;&#10;        this.economy = economy;&#10;        this.bankGUI = new BankGUI(plugin, bankManager, messageManager, economy);&#10;    }&#10;&#10;    @Override&#10;    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {&#10;        if (!(sender instanceof Player)) {&#10;            sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;general.only-players&quot;)));&#10;            return true;&#10;        }&#10;&#10;        Player player = (Player) sender;&#10;&#10;        if (!player.hasPermission(&quot;cbsystem.bank&quot;)) {&#10;            player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;general.no-permission&quot;)));&#10;            return true;&#10;        }&#10;&#10;        if (economy == null) {&#10;            player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;bank.economy-not-available&quot;)));&#10;            return true;&#10;        }&#10;&#10;        if (args.length == 0) {&#10;            bankGUI.openMainGUI(player);&#10;            return true;&#10;        }&#10;&#10;        String subCommand = args[0].toLowerCase();&#10;&#10;        switch (subCommand) {&#10;            case &quot;balance&quot;:&#10;            case &quot;bal&quot;:&#10;                handleBalance(player);&#10;                break;&#10;            case &quot;deposit&quot;:&#10;            case &quot;dep&quot;:&#10;                if (args.length &lt; 2) {&#10;                    player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;commands.bank.deposit-usage&quot;)));&#10;                    return true;&#10;                }&#10;                handleDeposit(player, args[1]);&#10;                break;&#10;            case &quot;withdraw&quot;:&#10;            case &quot;wd&quot;:&#10;                if (args.length &lt; 2) {&#10;                    player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;commands.bank.withdraw-usage&quot;)));&#10;                    return true;&#10;                }&#10;                handleWithdraw(player, args[1]);&#10;                break;&#10;            default:&#10;                player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;commands.bank.usage&quot;)));&#10;                break;&#10;        }&#10;&#10;        return true;&#10;    }&#10;&#10;    private void handleBalance(Player player) {&#10;        bankManager.getBalance(player.getUniqueId()).thenAccept(bankBalance -&gt; {&#10;            double vaultBalance = economy.getBalance(player);&#10;            &#10;            player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                messageManager.getMessage(&quot;bank.balance&quot;)&#10;                    .replace(&quot;%bank_balance%&quot;, formatMoney(bankBalance))&#10;                    .replace(&quot;%vault_balance%&quot;, formatMoney(vaultBalance))));&#10;        });&#10;    }&#10;&#10;    private void handleDeposit(Player player, String amountStr) {&#10;        double amount;&#10;        try {&#10;            if (amountStr.equalsIgnoreCase(&quot;all&quot;) || amountStr.equalsIgnoreCase(&quot;alles&quot;)) {&#10;                amount = economy.getBalance(player);&#10;            } else {&#10;                amount = Double.parseDouble(amountStr);&#10;            }&#10;        } catch (NumberFormatException e) {&#10;            player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;bank.invalid-amount&quot;)));&#10;            return;&#10;        }&#10;&#10;        if (amount &lt;= 0) {&#10;            player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;bank.invalid-amount&quot;)));&#10;            return;&#10;        }&#10;&#10;        if (amount &gt; 100000) {&#10;            player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;bank.deposit-limit&quot;)));&#10;            return;&#10;        }&#10;&#10;        if (economy.getBalance(player) &lt; amount) {&#10;            player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;bank.insufficient-funds&quot;)));&#10;            return;&#10;        }&#10;&#10;        bankManager.deposit(player, amount).thenAccept(success -&gt; {&#10;            if (success) {&#10;                economy.withdrawPlayer(player, amount);&#10;                player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                    messageManager.getMessage(&quot;bank.deposit-success&quot;).replace(&quot;%amount%&quot;, formatMoney(amount))));&#10;            } else {&#10;                player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;bank.deposit-failed&quot;)));&#10;            }&#10;        });&#10;    }&#10;&#10;    private void handleWithdraw(Player player, String amountStr) {&#10;        double amount;&#10;        try {&#10;            if (amountStr.equalsIgnoreCase(&quot;all&quot;) || amountStr.equalsIgnoreCase(&quot;alles&quot;)) {&#10;                amount = bankManager.getBalance(player.getUniqueId()).join();&#10;            } else {&#10;                amount = Double.parseDouble(amountStr);&#10;            }&#10;        } catch (NumberFormatException e) {&#10;            player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;bank.invalid-amount&quot;)));&#10;            return;&#10;        }&#10;&#10;        if (amount &lt;= 0) {&#10;            player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;bank.invalid-amount&quot;)));&#10;            return;&#10;        }&#10;&#10;        if (amount &gt; 1000000) {&#10;            player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;bank.withdraw-limit&quot;)));&#10;            return;&#10;        }&#10;&#10;        bankManager.getBalance(player.getUniqueId()).thenAccept(bankBalance -&gt; {&#10;            if (bankBalance &lt; amount) {&#10;                player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;bank.insufficient-bank-funds&quot;)));&#10;                return;&#10;            }&#10;&#10;            bankManager.withdraw(player, amount).thenAccept(success -&gt; {&#10;                if (success) {&#10;                    economy.depositPlayer(player, amount);&#10;                    player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                        messageManager.getMessage(&quot;bank.withdraw-success&quot;).replace(&quot;%amount%&quot;, formatMoney(amount))));&#10;                } else {&#10;                    player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;bank.withdraw-failed&quot;)));&#10;                }&#10;            });&#10;        });&#10;    }&#10;&#10;    private String formatMoney(double amount) {&#10;        if (amount &gt;= 1000000) {&#10;            return String.format(&quot;%.1fM&quot;, amount / 1000000);&#10;        } else if (amount &gt;= 1000) {&#10;            return String.format(&quot;%.1fK&quot;, amount / 1000);&#10;        } else {&#10;            return String.format(&quot;%.2f&quot;, amount);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/de/nicerecord/citybuildsystem/bank/BankGUI.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/de/nicerecord/citybuildsystem/bank/BankGUI.java" />
              <option name="originalContent" value="package de.nicerecord.citybuildsystem.bank;&#10;&#10;import de.nicerecord.citybuildsystem.CitybuildSystem;&#10;import de.nicerecord.citybuildsystem.utils.GUIManager;&#10;import de.nicerecord.citybuildsystem.utils.MessageManager;&#10;import net.milkbowl.vault.economy.Economy;&#10;import org.bukkit.Bukkit;&#10;import org.bukkit.ChatColor;&#10;import org.bukkit.Material;&#10;import org.bukkit.entity.Player;&#10;import org.bukkit.inventory.Inventory;&#10;import org.bukkit.inventory.ItemStack;&#10;import org.bukkit.inventory.meta.ItemMeta;&#10;import org.bukkit.inventory.meta.SkullMeta;&#10;&#10;import java.util.ArrayList;&#10;import java.util.Arrays;&#10;import java.util.List;&#10;&#10;public class BankGUI {&#10;    private final CitybuildSystem plugin;&#10;    private final BankManager bankManager;&#10;    private final MessageManager messageManager;&#10;    private final Economy economy;&#10;    private final GUIManager guiManager;&#10;&#10;    // Deposit amounts for different items - loaded from config&#10;    // Deposit amounts for different items - loaded from config&#10;    private double[] nuggetAmounts;&#10;    private double[] ingotAmounts;&#10;    private double[] blockAmounts;&#10;&#10;    public BankGUI(CitybuildSystem plugin, BankManager bankManager, MessageManager messageManager, Economy economy) {&#10;        this.plugin = plugin;&#10;        this.bankManager = bankManager;&#10;        this.messageManager = messageManager;&#10;        this.economy = economy;&#10;        this.guiManager = plugin.getGUIManager();&#10;        // Load amounts from config&#10;&#10;        // Load amounts from config&#10;        loadAmountsFromConfig();&#10;    }&#10;&#10;    private void loadAmountsFromConfig() {&#10;        List&lt;Integer&gt; nuggetList = guiManager.getBankNuggetAmounts();&#10;        // Fallback to default values if config is empty&#10;        List&lt;Integer&gt; ingotList = guiManager.getBankIngotAmounts();&#10;        List&lt;Integer&gt; blockList = guiManager.getBankBlockAmounts();&#10;&#10;        // Fallback to default values if config is empty&#10;        if (nuggetList.isEmpty()) {&#10;            nuggetAmounts = new double[]{10, 25, 50, 100, 250};&#10;        } else {&#10;            nuggetAmounts = nuggetList.stream().mapToDouble(Integer::doubleValue).toArray();&#10;        }&#10;&#10;        if (ingotList.isEmpty()) {&#10;            ingotAmounts = new double[]{500, 1000, 2500, 5000};&#10;        } else {&#10;            ingotAmounts = ingotList.stream().mapToDouble(Integer::doubleValue).toArray();&#10;        }&#10;&#10;        if (blockList.isEmpty()) {&#10;            blockAmounts = new double[]{10000, 25000, 50000, 100000};&#10;        } else {&#10;            blockAmounts = blockList.stream().mapToDouble(Integer::doubleValue).toArray();&#10;        }&#10;    }&#10;        // Fill border&#10;&#10;        // Add main items&#10;    public void openMainGUI(Player player) {&#10;        String title = ChatColor.translateAlternateColorCodes('&amp;', guiManager.getBankMainGUITitle());&#10;        Inventory inventory = Bukkit.createInventory(null, guiManager.getBankMainGUISize(), title);&#10;                // Player head (slot 36)&#10;&#10;                // Deposit button (slot 20)&#10;        // Fill border&#10;                // Withdraw button (slot 24)&#10;        fillBorder(inventory);&#10;                // Info item (slot 40)&#10;&#10;                // Close button (slot 44)&#10;        // Add main items&#10;        bankManager.getBalance(player.getUniqueId()).thenAccept(bankBalance -&gt; {&#10;            double vaultBalance = economy.getBalance(player);&#10;&#10;            Bukkit.getScheduler().runTask(plugin, () -&gt; {&#10;                // Player head (slot 36)&#10;                inventory.setItem(36, createPlayerHead(player, bankBalance, vaultBalance));&#10;&#10;                // Deposit button (slot 20)&#10;                inventory.setItem(20, createDepositItem());&#10;        // Fill border&#10;&#10;                // Withdraw button (slot 24)&#10;                inventory.setItem(24, createWithdrawItem());&#10;&#10;                // Info item (slot 40)&#10;                // Player head (slot 4)&#10;                inventory.setItem(40, createMainInfoItem());&#10;                // Deposit items&#10;&#10;                // Back button (slot 27)&#10;                // Close button (slot 44)&#10;                // Info item (slot 31)&#10;                inventory.setItem(44, createCloseItem());&#10;                // Close button (slot 35)&#10;&#10;                player.openInventory(inventory);&#10;            });&#10;        });&#10;    }&#10;&#10;    public void openDepositGUI(Player player) {&#10;        String title = ChatColor.translateAlternateColorCodes('&amp;', guiManager.getBankDepositGUITitle());&#10;        Inventory inventory = Bukkit.createInventory(null, guiManager.getBankDepositGUISize(), title);&#10;&#10;        // Fill border&#10;        // Fill border&#10;        fillBorderSmall(inventory);&#10;&#10;        bankManager.getBalance(player.getUniqueId()).thenAccept(bankBalance -&gt; {&#10;            double vaultBalance = economy.getBalance(player);&#10;                // Player head (slot 4)&#10;&#10;                // Withdraw items&#10;            Bukkit.getScheduler().runTask(plugin, () -&gt; {&#10;                // Back button (slot 27)&#10;                // Player head (slot 4)&#10;                // Info item (slot 31)&#10;                inventory.setItem(4, createPlayerHead(player, bankBalance, vaultBalance));&#10;                // Close button (slot 35)&#10;&#10;                // Deposit items&#10;                addDepositItems(inventory, player);&#10;&#10;                // Back button (slot 27)&#10;                inventory.setItem(27, createBackItem());&#10;&#10;                // Info item (slot 31)&#10;                inventory.setItem(31, createDepositInfoItem());&#10;        // Top and bottom row&#10;&#10;                // Close button (slot 35)&#10;                inventory.setItem(35, createCloseItem());&#10;&#10;        // Left and right columns&#10;                player.openInventory(inventory);&#10;            });&#10;        });&#10;    }&#10;&#10;    public void openWithdrawGUI(Player player) {&#10;        String title = ChatColor.translateAlternateColorCodes('&amp;', guiManager.getBankWithdrawGUITitle());&#10;        Inventory inventory = Bukkit.createInventory(null, guiManager.getBankWithdrawGUISize(), title);&#10;        // Top and bottom row&#10;&#10;        // Fill border&#10;        fillBorderSmall(inventory);&#10;&#10;        // Left and right columns&#10;        bankManager.getBalance(player.getUniqueId()).thenAccept(bankBalance -&gt; {&#10;            double vaultBalance = economy.getBalance(player);&#10;&#10;            Bukkit.getScheduler().runTask(plugin, () -&gt; {&#10;                // Player head (slot 4)&#10;                inventory.setItem(4, createPlayerHead(player, bankBalance, vaultBalance));&#10;&#10;                // Withdraw items&#10;                addWithdrawItems(inventory, player);&#10;&#10;                // Back button (slot 27)&#10;                inventory.setItem(27, createBackItem());&#10;&#10;                // Info item (slot 31)&#10;                inventory.setItem(31, createWithdrawInfoItem());&#10;&#10;                // Close button (slot 35)&#10;                inventory.setItem(35, createCloseItem());&#10;&#10;                player.openInventory(inventory);&#10;            });&#10;        });&#10;    }&#10;&#10;    private void fillBorder(Inventory inventory) {&#10;        ItemStack borderItem = createBorderItem();&#10;&#10;        // Top and bottom row&#10;        for (int i = 0; i &lt; 9; i++) {&#10;            inventory.setItem(i, borderItem);&#10;            inventory.setItem(36 + i, borderItem);&#10;        }&#10;&#10;        // Left and right columns&#10;        for (int i = 9; i &lt; 36; i += 9) {&#10;            inventory.setItem(i, borderItem);&#10;            inventory.setItem(i + 8, borderItem);&#10;        }&#10;    }&#10;&#10;    private void fillBorderSmall(Inventory inventory) {&#10;        ItemStack borderItem = createBorderItem();&#10;&#10;        // Top and bottom row&#10;        for (int i = 0; i &lt; 9; i++) {&#10;            inventory.setItem(i, borderItem);&#10;            inventory.setItem(27 + i, borderItem);&#10;        }&#10;&#10;        // Left and right columns&#10;        for (int i = 9; i &lt; 27; i += 9) {&#10;            inventory.setItem(i, borderItem);&#10;            inventory.setItem(i + 8, borderItem);&#10;        }&#10;    }&#10;&#10;    private ItemStack createBorderItem() {&#10;        Material borderMaterial = Material.valueOf(guiManager.getBorderMaterial());&#10;        ItemStack item = new ItemStack(borderMaterial);&#10;        ItemMeta meta = item.getItemMeta();&#10;        meta.setDisplayName(ChatColor.translateAlternateColorCodes('&amp;', guiManager.getBorderName()));&#10;&#10;        List&lt;String&gt; lore = new ArrayList&lt;&gt;();&#10;        for (String line : guiManager.getBorderLore()) {&#10;            lore.add(ChatColor.translateAlternateColorCodes('&amp;', line));&#10;        }&#10;        meta.setLore(lore);&#10;        item.setItemMeta(meta);&#10;        return item;&#10;    }&#10;&#10;    private ItemStack createPlayerHead(Player player, double bankBalance, double vaultBalance) {&#10;        Material headMaterial = Material.valueOf(guiManager.getBankPlayerHeadMaterial());&#10;        ItemStack item = new ItemStack(headMaterial);&#10;        SkullMeta meta = (SkullMeta) item.getItemMeta();&#10;        meta.setOwningPlayer(player);&#10;        meta.setDisplayName(ChatColor.translateAlternateColorCodes('&amp;', guiManager.getBankPlayerHeadName()));&#10;&#10;        List&lt;String&gt; configLore = guiManager.getBankPlayerHeadLore();&#10;        List&lt;String&gt; lore = new ArrayList&lt;&gt;();&#10;&#10;        for (String line : configLore) {&#10;            line = line.replace(&quot;%bank_balance%&quot;, formatMoney(bankBalance))&#10;                      .replace(&quot;%vault_balance%&quot;, formatMoney(vaultBalance));&#10;            lore.add(ChatColor.translateAlternateColorCodes('&amp;', line));&#10;        }&#10;&#10;        meta.setLore(lore);&#10;        item.setItemMeta(meta);&#10;        return item;&#10;    }&#10;&#10;    private ItemStack createDepositItem() {&#10;        Material depositMaterial = Material.valueOf(guiManager.getBankDepositMaterial());&#10;        ItemStack item = new ItemStack(depositMaterial);&#10;        ItemMeta meta = item.getItemMeta();&#10;        meta.setDisplayName(ChatColor.translateAlternateColorCodes('&amp;', guiManager.getBankDepositName()));&#10;&#10;        List&lt;String&gt; lore = new ArrayList&lt;&gt;();&#10;        for (String line : guiManager.getBankDepositLore()) {&#10;            lore.add(ChatColor.translateAlternateColorCodes('&amp;', line));&#10;        }&#10;        meta.setLore(lore);&#10;        item.setItemMeta(meta);&#10;        return item;&#10;    }&#10;&#10;    private ItemStack createWithdrawItem() {&#10;        Material withdrawMaterial = Material.valueOf(guiManager.getBankWithdrawMaterial());&#10;        ItemStack item = new ItemStack(withdrawMaterial);&#10;        ItemMeta meta = item.getItemMeta();&#10;        meta.setDisplayName(ChatColor.translateAlternateColorCodes('&amp;', guiManager.getBankWithdrawName()));&#10;&#10;        List&lt;String&gt; lore = new ArrayList&lt;&gt;();&#10;        for (String line : guiManager.getBankWithdrawLore()) {&#10;            lore.add(ChatColor.translateAlternateColorCodes('&amp;', line));&#10;        }&#10;        meta.setLore(lore);&#10;        item.setItemMeta(meta);&#10;        return item;&#10;    }&#10;&#10;    private ItemStack createMainInfoItem() {&#10;        Material infoMaterial = Material.valueOf(guiManager.getBankInfoMaterial());&#10;        ItemStack item = new ItemStack(infoMaterial);&#10;        ItemMeta meta = item.getItemMeta();&#10;        meta.setDisplayName(ChatColor.translateAlternateColorCodes('&amp;', guiManager.getBankInfoName()));&#10;&#10;        List&lt;String&gt; lore = new ArrayList&lt;&gt;();&#10;        for (String line : guiManager.getBankInfoLore()) {&#10;            lore.add(ChatColor.translateAlternateColorCodes('&amp;', line));&#10;        }&#10;        meta.setLore(lore);&#10;        item.setItemMeta(meta);&#10;        return item;&#10;    }&#10;&#10;    private ItemStack createDepositInfoItem() {&#10;        Material infoMaterial = Material.valueOf(guiManager.getBankInfoMaterial());&#10;        ItemStack item = new ItemStack(infoMaterial);&#10;        ItemMeta meta = item.getItemMeta();&#10;        meta.setDisplayName(ChatColor.translateAlternateColorCodes('&amp;', guiManager.getBankDepositInfoName()));&#10;&#10;        List&lt;String&gt; lore = new ArrayList&lt;&gt;();&#10;        for (String line : guiManager.getBankDepositInfoLore()) {&#10;            lore.add(ChatColor.translateAlternateColorCodes('&amp;', line));&#10;        }&#10;        // Golden nuggets (slots 10-14)&#10;        meta.setLore(lore);&#10;        item.setItemMeta(meta);&#10;        return item;&#10;        // Gold ingots (slots 15-16 and 19-20)&#10;    }&#10;&#10;    private ItemStack createWithdrawInfoItem() {&#10;        Material infoMaterial = Material.valueOf(guiManager.getBankInfoMaterial());&#10;        // Gold blocks (slots 21-24)&#10;        ItemStack item = new ItemStack(infoMaterial);&#10;        ItemMeta meta = item.getItemMeta();&#10;        meta.setDisplayName(ChatColor.translateAlternateColorCodes('&amp;', guiManager.getBankWithdrawInfoName()));&#10;&#10;        List&lt;String&gt; lore = new ArrayList&lt;&gt;();&#10;        // Golden nuggets (slots 10-14)&#10;        for (String line : guiManager.getBankWithdrawInfoLore()) {&#10;            lore.add(ChatColor.translateAlternateColorCodes('&amp;', line));&#10;        }&#10;        // Gold ingots (slots 15-16 and 19-20)&#10;        meta.setLore(lore);&#10;        item.setItemMeta(meta);&#10;        return item;&#10;    }&#10;        // Gold blocks (slots 21-24)&#10;&#10;    private ItemStack createCloseItem() {&#10;        Material closeMaterial = Material.valueOf(guiManager.getCloseMaterial());&#10;        ItemStack item = new ItemStack(closeMaterial);&#10;        ItemMeta meta = item.getItemMeta();&#10;        meta.setDisplayName(ChatColor.translateAlternateColorCodes('&amp;', guiManager.getCloseName()));&#10;&#10;        List&lt;String&gt; lore = new ArrayList&lt;&gt;();&#10;        for (String line : guiManager.getCloseLore()) {&#10;            lore.add(ChatColor.translateAlternateColorCodes('&amp;', line));&#10;        }&#10;        meta.setLore(lore);&#10;        item.setItemMeta(meta);&#10;        return item;&#10;    }&#10;&#10;    private ItemStack createBackItem() {&#10;        Material backMaterial = Material.valueOf(guiManager.getBankBackMaterial());&#10;        ItemStack item = new ItemStack(backMaterial);&#10;        ItemMeta meta = item.getItemMeta();&#10;        meta.setDisplayName(ChatColor.translateAlternateColorCodes('&amp;', guiManager.getBankBackName()));&#10;&#10;        List&lt;String&gt; lore = new ArrayList&lt;&gt;();&#10;        for (String line : guiManager.getBankBackLore()) {&#10;            lore.add(ChatColor.translateAlternateColorCodes('&amp;', line));&#10;        }&#10;        meta.setLore(lore);&#10;        item.setItemMeta(meta);&#10;        return item;&#10;    }&#10;&#10;    private void addDepositItems(Inventory inventory, Player player) {&#10;        // Golden nuggets (slots 10-14)&#10;        for (int i = 0; i &lt; nuggetAmounts.length; i++) {&#10;            inventory.setItem(10 + i, createDepositItem(Material.GOLD_NUGGET, nuggetAmounts[i]));&#10;        }&#10;&#10;        // Gold ingots (slots 15-16 and 19-20)&#10;        inventory.setItem(15, createDepositItem(Material.GOLD_INGOT, ingotAmounts[0]));&#10;        inventory.setItem(16, createDepositItem(Material.GOLD_INGOT, ingotAmounts[1]));&#10;        inventory.setItem(19, createDepositItem(Material.GOLD_INGOT, ingotAmounts[2]));&#10;        inventory.setItem(20, createDepositItem(Material.GOLD_INGOT, ingotAmounts[3]));&#10;&#10;        // Gold blocks (slots 21-24)&#10;        for (int i = 0; i &lt; blockAmounts.length; i++) {&#10;            inventory.setItem(21 + i, createDepositItem(Material.GOLD_BLOCK, blockAmounts[i]));&#10;        }&#10;    }&#10;&#10;    private void addWithdrawItems(Inventory inventory, Player player) {&#10;        // Golden nuggets (slots 10-14)&#10;        for (int i = 0; i &lt; nuggetAmounts.length; i++) {&#10;            inventory.setItem(10 + i, createWithdrawItem(Material.GOLD_NUGGET, nuggetAmounts[i]));&#10;        }&#10;&#10;        // Gold ingots (slots 15-16 and 19-20)&#10;        inventory.setItem(15, createWithdrawItem(Material.GOLD_INGOT, ingotAmounts[0]));&#10;        inventory.setItem(16, createWithdrawItem(Material.GOLD_INGOT, ingotAmounts[1]));&#10;        inventory.setItem(19, createWithdrawItem(Material.GOLD_INGOT, ingotAmounts[2]));&#10;        inventory.setItem(20, createWithdrawItem(Material.GOLD_INGOT, ingotAmounts[3]));&#10;&#10;        // Gold blocks (slots 21-24)&#10;        for (int i = 0; i &lt; blockAmounts.length; i++) {&#10;            inventory.setItem(21 + i, createWithdrawItem(Material.GOLD_BLOCK, blockAmounts[i]));&#10;        }&#10;    }&#10;&#10;    private ItemStack createDepositItem(Material material, double amount) {&#10;        ItemStack item = new ItemStack(material);&#10;        ItemMeta meta = item.getItemMeta();&#10;        meta.setDisplayName(ChatColor.translateAlternateColorCodes('&amp;', &quot;&amp;e&amp;l&quot; + formatMoney(amount)));&#10;        meta.setLore(Arrays.asList(ChatColor.translateAlternateColorCodes('&amp;', &quot;&amp;7Klicke um &quot; + formatMoney(amount) + &quot; einzuzahlen&quot;)));&#10;        item.setItemMeta(meta);&#10;        return item;&#10;    }&#10;&#10;    private ItemStack createWithdrawItem(Material material, double amount) {&#10;        ItemStack item = new ItemStack(material);&#10;        ItemMeta meta = item.getItemMeta();&#10;        meta.setDisplayName(ChatColor.translateAlternateColorCodes('&amp;', &quot;&amp;e&amp;l&quot; + formatMoney(amount)));&#10;        meta.setLore(Arrays.asList(ChatColor.translateAlternateColorCodes('&amp;', &quot;&amp;7Klicke um &quot; + formatMoney(amount) + &quot; auszuzahlen&quot;)));&#10;        item.setItemMeta(meta);&#10;        return item;&#10;    }&#10;&#10;    private String formatMoney(double amount) {&#10;        if (amount &gt;= 1000000) {&#10;            return String.format(&quot;%.1fM&quot;, amount / 1000000);&#10;        } else if (amount &gt;= 1000) {&#10;            return String.format(&quot;%.1fK&quot;, amount / 1000);&#10;        } else {&#10;            return String.format(&quot;%.0f&quot;, amount);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package de.nicerecord.citybuildsystem.bank;&#10;&#10;import de.nicerecord.citybuildsystem.CitybuildSystem;&#10;import de.nicerecord.citybuildsystem.utils.GUIManager;&#10;import de.nicerecord.citybuildsystem.utils.MessageManager;&#10;import net.milkbowl.vault.economy.Economy;&#10;import org.bukkit.Bukkit;&#10;import org.bukkit.ChatColor;&#10;import org.bukkit.Material;&#10;import org.bukkit.entity.Player;&#10;import org.bukkit.inventory.Inventory;&#10;import org.bukkit.inventory.ItemStack;&#10;import org.bukkit.inventory.meta.ItemMeta;&#10;import org.bukkit.inventory.meta.SkullMeta;&#10;&#10;import java.util.ArrayList;&#10;import java.util.Arrays;&#10;import java.util.List;&#10;&#10;public class BankGUI {&#10;    private final CitybuildSystem plugin;&#10;    private final BankManager bankManager;&#10;    private final MessageManager messageManager;&#10;    private final Economy economy;&#10;    private final GUIManager guiManager;&#10;&#10;    private double[] nuggetAmounts;&#10;    private double[] ingotAmounts;&#10;    private double[] blockAmounts;&#10;&#10;    public BankGUI(CitybuildSystem plugin, BankManager bankManager, MessageManager messageManager, Economy economy) {&#10;        this.plugin = plugin;&#10;        this.bankManager = bankManager;&#10;        this.messageManager = messageManager;&#10;        this.economy = economy;&#10;        this.guiManager = plugin.getGUIManager();&#10;&#10;        loadAmountsFromConfig();&#10;    }&#10;&#10;    private void loadAmountsFromConfig() {&#10;        List&lt;Integer&gt; nuggetList = guiManager.getBankNuggetAmounts();&#10;        List&lt;Integer&gt; ingotList = guiManager.getBankIngotAmounts();&#10;        List&lt;Integer&gt; blockList = guiManager.getBankBlockAmounts();&#10;&#10;        if (nuggetList.isEmpty()) {&#10;            nuggetAmounts = new double[]{10, 25, 50, 100, 250};&#10;        } else {&#10;            nuggetAmounts = nuggetList.stream().mapToDouble(Integer::doubleValue).toArray();&#10;        }&#10;&#10;        if (ingotList.isEmpty()) {&#10;            ingotAmounts = new double[]{500, 1000, 2500, 5000};&#10;        } else {&#10;            ingotAmounts = ingotList.stream().mapToDouble(Integer::doubleValue).toArray();&#10;        }&#10;&#10;        if (blockList.isEmpty()) {&#10;            blockAmounts = new double[]{10000, 25000, 50000, 100000};&#10;        } else {&#10;            blockAmounts = blockList.stream().mapToDouble(Integer::doubleValue).toArray();&#10;        }&#10;    }&#10;&#10;    public void openMainGUI(Player player) {&#10;        String title = ChatColor.translateAlternateColorCodes('&amp;', guiManager.getBankMainGUITitle());&#10;        Inventory inventory = Bukkit.createInventory(null, guiManager.getBankMainGUISize(), title);&#10;&#10;        fillBorder(inventory);&#10;&#10;        bankManager.getBalance(player.getUniqueId()).thenAccept(bankBalance -&gt; {&#10;            double vaultBalance = economy.getBalance(player);&#10;&#10;            Bukkit.getScheduler().runTask(plugin, () -&gt; {&#10;                inventory.setItem(36, createPlayerHead(player, bankBalance, vaultBalance));&#10;&#10;                inventory.setItem(20, createDepositItem());&#10;&#10;                inventory.setItem(24, createWithdrawItem());&#10;&#10;                inventory.setItem(40, createMainInfoItem());&#10;&#10;                inventory.setItem(44, createCloseItem());&#10;&#10;                player.openInventory(inventory);&#10;            });&#10;        });&#10;    }&#10;&#10;    public void openDepositGUI(Player player) {&#10;        String title = ChatColor.translateAlternateColorCodes('&amp;', guiManager.getBankDepositGUITitle());&#10;        Inventory inventory = Bukkit.createInventory(null, guiManager.getBankDepositGUISize(), title);&#10;&#10;        fillBorderSmall(inventory);&#10;&#10;        bankManager.getBalance(player.getUniqueId()).thenAccept(bankBalance -&gt; {&#10;            double vaultBalance = economy.getBalance(player);&#10;&#10;            Bukkit.getScheduler().runTask(plugin, () -&gt; {&#10;                inventory.setItem(4, createPlayerHead(player, bankBalance, vaultBalance));&#10;&#10;                addDepositItems(inventory, player);&#10;&#10;                inventory.setItem(27, createBackItem());&#10;&#10;                inventory.setItem(31, createDepositInfoItem());&#10;&#10;                inventory.setItem(35, createCloseItem());&#10;&#10;                player.openInventory(inventory);&#10;            });&#10;        });&#10;    }&#10;&#10;    public void openWithdrawGUI(Player player) {&#10;        String title = ChatColor.translateAlternateColorCodes('&amp;', guiManager.getBankWithdrawGUITitle());&#10;        Inventory inventory = Bukkit.createInventory(null, guiManager.getBankWithdrawGUISize(), title);&#10;&#10;        fillBorderSmall(inventory);&#10;&#10;        bankManager.getBalance(player.getUniqueId()).thenAccept(bankBalance -&gt; {&#10;            double vaultBalance = economy.getBalance(player);&#10;&#10;            Bukkit.getScheduler().runTask(plugin, () -&gt; {&#10;                inventory.setItem(4, createPlayerHead(player, bankBalance, vaultBalance));&#10;&#10;                addWithdrawItems(inventory, player);&#10;&#10;                inventory.setItem(27, createBackItem());&#10;&#10;                inventory.setItem(31, createWithdrawInfoItem());&#10;&#10;                inventory.setItem(35, createCloseItem());&#10;&#10;                player.openInventory(inventory);&#10;            });&#10;        });&#10;    }&#10;&#10;    private void fillBorder(Inventory inventory) {&#10;        ItemStack borderItem = createBorderItem();&#10;&#10;        for (int i = 0; i &lt; 9; i++) {&#10;            inventory.setItem(i, borderItem);&#10;            inventory.setItem(36 + i, borderItem);&#10;        }&#10;&#10;        for (int i = 9; i &lt; 36; i += 9) {&#10;            inventory.setItem(i, borderItem);&#10;            inventory.setItem(i + 8, borderItem);&#10;        }&#10;    }&#10;&#10;    private void fillBorderSmall(Inventory inventory) {&#10;        ItemStack borderItem = createBorderItem();&#10;&#10;        for (int i = 0; i &lt; 9; i++) {&#10;            inventory.setItem(i, borderItem);&#10;            inventory.setItem(27 + i, borderItem);&#10;        }&#10;&#10;        for (int i = 9; i &lt; 27; i += 9) {&#10;            inventory.setItem(i, borderItem);&#10;            inventory.setItem(i + 8, borderItem);&#10;        }&#10;    }&#10;&#10;    private ItemStack createBorderItem() {&#10;        Material borderMaterial = Material.valueOf(guiManager.getBorderMaterial());&#10;        ItemStack item = new ItemStack(borderMaterial);&#10;        ItemMeta meta = item.getItemMeta();&#10;        meta.setDisplayName(ChatColor.translateAlternateColorCodes('&amp;', guiManager.getBorderName()));&#10;&#10;        List&lt;String&gt; lore = new ArrayList&lt;&gt;();&#10;        for (String line : guiManager.getBorderLore()) {&#10;            lore.add(ChatColor.translateAlternateColorCodes('&amp;', line));&#10;        }&#10;        meta.setLore(lore);&#10;        item.setItemMeta(meta);&#10;        return item;&#10;    }&#10;&#10;    private ItemStack createPlayerHead(Player player, double bankBalance, double vaultBalance) {&#10;        Material headMaterial = Material.valueOf(guiManager.getBankPlayerHeadMaterial());&#10;        ItemStack item = new ItemStack(headMaterial);&#10;        SkullMeta meta = (SkullMeta) item.getItemMeta();&#10;        meta.setOwningPlayer(player);&#10;        meta.setDisplayName(ChatColor.translateAlternateColorCodes('&amp;', guiManager.getBankPlayerHeadName()));&#10;&#10;        List&lt;String&gt; configLore = guiManager.getBankPlayerHeadLore();&#10;        List&lt;String&gt; lore = new ArrayList&lt;&gt;();&#10;&#10;        for (String line : configLore) {&#10;            line = line.replace(&quot;%bank_balance%&quot;, formatMoney(bankBalance))&#10;                      .replace(&quot;%vault_balance%&quot;, formatMoney(vaultBalance));&#10;            lore.add(ChatColor.translateAlternateColorCodes('&amp;', line));&#10;        }&#10;&#10;        meta.setLore(lore);&#10;        item.setItemMeta(meta);&#10;        return item;&#10;    }&#10;&#10;    private ItemStack createDepositItem() {&#10;        Material depositMaterial = Material.valueOf(guiManager.getBankDepositMaterial());&#10;        ItemStack item = new ItemStack(depositMaterial);&#10;        ItemMeta meta = item.getItemMeta();&#10;        meta.setDisplayName(ChatColor.translateAlternateColorCodes('&amp;', guiManager.getBankDepositName()));&#10;&#10;        List&lt;String&gt; lore = new ArrayList&lt;&gt;();&#10;        for (String line : guiManager.getBankDepositLore()) {&#10;            lore.add(ChatColor.translateAlternateColorCodes('&amp;', line));&#10;        }&#10;        meta.setLore(lore);&#10;        item.setItemMeta(meta);&#10;        return item;&#10;    }&#10;&#10;    private ItemStack createWithdrawItem() {&#10;        Material withdrawMaterial = Material.valueOf(guiManager.getBankWithdrawMaterial());&#10;        ItemStack item = new ItemStack(withdrawMaterial);&#10;        ItemMeta meta = item.getItemMeta();&#10;        meta.setDisplayName(ChatColor.translateAlternateColorCodes('&amp;', guiManager.getBankWithdrawName()));&#10;&#10;        List&lt;String&gt; lore = new ArrayList&lt;&gt;();&#10;        for (String line : guiManager.getBankWithdrawLore()) {&#10;            lore.add(ChatColor.translateAlternateColorCodes('&amp;', line));&#10;        }&#10;        meta.setLore(lore);&#10;        item.setItemMeta(meta);&#10;        return item;&#10;    }&#10;&#10;    private ItemStack createMainInfoItem() {&#10;        Material infoMaterial = Material.valueOf(guiManager.getBankInfoMaterial());&#10;        ItemStack item = new ItemStack(infoMaterial);&#10;        ItemMeta meta = item.getItemMeta();&#10;        meta.setDisplayName(ChatColor.translateAlternateColorCodes('&amp;', guiManager.getBankInfoName()));&#10;&#10;        List&lt;String&gt; lore = new ArrayList&lt;&gt;();&#10;        for (String line : guiManager.getBankInfoLore()) {&#10;            lore.add(ChatColor.translateAlternateColorCodes('&amp;', line));&#10;        }&#10;        meta.setLore(lore);&#10;        item.setItemMeta(meta);&#10;        return item;&#10;    }&#10;&#10;    private ItemStack createDepositInfoItem() {&#10;        Material infoMaterial = Material.valueOf(guiManager.getBankInfoMaterial());&#10;        ItemStack item = new ItemStack(infoMaterial);&#10;        ItemMeta meta = item.getItemMeta();&#10;        meta.setDisplayName(ChatColor.translateAlternateColorCodes('&amp;', guiManager.getBankDepositInfoName()));&#10;&#10;        List&lt;String&gt; lore = new ArrayList&lt;&gt;();&#10;        for (String line : guiManager.getBankDepositInfoLore()) {&#10;            lore.add(ChatColor.translateAlternateColorCodes('&amp;', line));&#10;        }&#10;        meta.setLore(lore);&#10;        item.setItemMeta(meta);&#10;        return item;&#10;    }&#10;&#10;    private ItemStack createWithdrawInfoItem() {&#10;        Material infoMaterial = Material.valueOf(guiManager.getBankInfoMaterial());&#10;        ItemStack item = new ItemStack(infoMaterial);&#10;        ItemMeta meta = item.getItemMeta();&#10;        meta.setDisplayName(ChatColor.translateAlternateColorCodes('&amp;', guiManager.getBankWithdrawInfoName()));&#10;&#10;        List&lt;String&gt; lore = new ArrayList&lt;&gt;();&#10;        for (String line : guiManager.getBankWithdrawInfoLore()) {&#10;            lore.add(ChatColor.translateAlternateColorCodes('&amp;', line));&#10;        }&#10;        meta.setLore(lore);&#10;        item.setItemMeta(meta);&#10;        return item;&#10;    }&#10;&#10;    private ItemStack createCloseItem() {&#10;        Material closeMaterial = Material.valueOf(guiManager.getCloseMaterial());&#10;        ItemStack item = new ItemStack(closeMaterial);&#10;        ItemMeta meta = item.getItemMeta();&#10;        meta.setDisplayName(ChatColor.translateAlternateColorCodes('&amp;', guiManager.getCloseName()));&#10;&#10;        List&lt;String&gt; lore = new ArrayList&lt;&gt;();&#10;        for (String line : guiManager.getCloseLore()) {&#10;            lore.add(ChatColor.translateAlternateColorCodes('&amp;', line));&#10;        }&#10;        meta.setLore(lore);&#10;        item.setItemMeta(meta);&#10;        return item;&#10;    }&#10;&#10;    private ItemStack createBackItem() {&#10;        Material backMaterial = Material.valueOf(guiManager.getBankBackMaterial());&#10;        ItemStack item = new ItemStack(backMaterial);&#10;        ItemMeta meta = item.getItemMeta();&#10;        meta.setDisplayName(ChatColor.translateAlternateColorCodes('&amp;', guiManager.getBankBackName()));&#10;&#10;        List&lt;String&gt; lore = new ArrayList&lt;&gt;();&#10;        for (String line : guiManager.getBankBackLore()) {&#10;            lore.add(ChatColor.translateAlternateColorCodes('&amp;', line));&#10;        }&#10;        meta.setLore(lore);&#10;        item.setItemMeta(meta);&#10;        return item;&#10;    }&#10;&#10;    private void addDepositItems(Inventory inventory, Player player) {&#10;        for (int i = 0; i &lt; nuggetAmounts.length; i++) {&#10;            inventory.setItem(10 + i, createDepositItem(Material.GOLD_NUGGET, nuggetAmounts[i]));&#10;        }&#10;&#10;        inventory.setItem(15, createDepositItem(Material.GOLD_INGOT, ingotAmounts[0]));&#10;        inventory.setItem(16, createDepositItem(Material.GOLD_INGOT, ingotAmounts[1]));&#10;        inventory.setItem(19, createDepositItem(Material.GOLD_INGOT, ingotAmounts[2]));&#10;        inventory.setItem(20, createDepositItem(Material.GOLD_INGOT, ingotAmounts[3]));&#10;&#10;        for (int i = 0; i &lt; blockAmounts.length; i++) {&#10;            inventory.setItem(21 + i, createDepositItem(Material.GOLD_BLOCK, blockAmounts[i]));&#10;        }&#10;    }&#10;&#10;    private void addWithdrawItems(Inventory inventory, Player player) {&#10;        for (int i = 0; i &lt; nuggetAmounts.length; i++) {&#10;            inventory.setItem(10 + i, createWithdrawItem(Material.GOLD_NUGGET, nuggetAmounts[i]));&#10;        }&#10;&#10;        inventory.setItem(15, createWithdrawItem(Material.GOLD_INGOT, ingotAmounts[0]));&#10;        inventory.setItem(16, createWithdrawItem(Material.GOLD_INGOT, ingotAmounts[1]));&#10;        inventory.setItem(19, createWithdrawItem(Material.GOLD_INGOT, ingotAmounts[2]));&#10;        inventory.setItem(20, createWithdrawItem(Material.GOLD_INGOT, ingotAmounts[3]));&#10;&#10;        for (int i = 0; i &lt; blockAmounts.length; i++) {&#10;            inventory.setItem(21 + i, createWithdrawItem(Material.GOLD_BLOCK, blockAmounts[i]));&#10;        }&#10;    }&#10;&#10;    private ItemStack createDepositItem(Material material, double amount) {&#10;        ItemStack item = new ItemStack(material);&#10;        ItemMeta meta = item.getItemMeta();&#10;        meta.setDisplayName(ChatColor.translateAlternateColorCodes('&amp;', &quot;&amp;e&amp;l&quot; + formatMoney(amount)));&#10;        meta.setLore(Arrays.asList(ChatColor.translateAlternateColorCodes('&amp;', &quot;&amp;7Klicke um &quot; + formatMoney(amount) + &quot; einzuzahlen&quot;)));&#10;        item.setItemMeta(meta);&#10;        return item;&#10;    }&#10;&#10;    private ItemStack createWithdrawItem(Material material, double amount) {&#10;        ItemStack item = new ItemStack(material);&#10;        ItemMeta meta = item.getItemMeta();&#10;        meta.setDisplayName(ChatColor.translateAlternateColorCodes('&amp;', &quot;&amp;e&amp;l&quot; + formatMoney(amount)));&#10;        meta.setLore(Arrays.asList(ChatColor.translateAlternateColorCodes('&amp;', &quot;&amp;7Klicke um &quot; + formatMoney(amount) + &quot; auszuzahlen&quot;)));&#10;        item.setItemMeta(meta);&#10;        return item;&#10;    }&#10;&#10;    private String formatMoney(double amount) {&#10;        if (amount &gt;= 1000000) {&#10;            return String.format(&quot;%.1fM&quot;, amount / 1000000);&#10;        } else if (amount &gt;= 1000) {&#10;            return String.format(&quot;%.1fK&quot;, amount / 1000);&#10;        } else {&#10;            return String.format(&quot;%.0f&quot;, amount);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/de/nicerecord/citybuildsystem/bank/BankGUIListener.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/de/nicerecord/citybuildsystem/bank/BankGUIListener.java" />
              <option name="originalContent" value="package de.nicerecord.citybuildsystem.bank;&#10;&#10;import de.nicerecord.citybuildsystem.CitybuildSystem;&#10;import net.milkbowl.vault.economy.Economy;&#10;import org.bukkit.ChatColor;&#10;import org.bukkit.Material;&#10;import org.bukkit.entity.Player;&#10;import org.bukkit.event.EventHandler;&#10;import org.bukkit.event.Listener;&#10;import org.bukkit.event.inventory.InventoryClickEvent;&#10;import org.bukkit.inventory.ItemStack;&#10;import org.bukkit.inventory.meta.ItemMeta;&#10;&#10;public class BankGUIListener implements Listener {&#10;    private final CitybuildSystem plugin;&#10;    private final BankManager bankManager;&#10;    private final MessageManager messageManager;&#10;    private final Economy economy;&#10;    private final BankGUI bankGUI;&#10;    public BankGUIListener(CitybuildSystem plugin, BankManager bankManager, MessageManager messageManager, Economy economy) {&#10;        this.plugin = plugin;&#10;        this.bankManager = bankManager;&#10;        this.messageManager = messageManager;&#10;        this.economy = economy;&#10;        this.bankGUI = new BankGUI(plugin, bankManager, messageManager, economy);&#10;    }&#10;&#10;    public void onInventoryClick(InventoryClickEvent event) {&#10;        if (!(event.getWhoClicked() instanceof Player)) return;&#10;&#10;        Player player = (Player) event.getWhoClicked();&#10;        String title = event.getView().getTitle();&#10;&#10;        if (!title.contains(&quot;Bank&quot;) &amp;&amp; !title.contains(&quot;einzahlen&quot;) &amp;&amp; !title.contains(&quot;auszahlen&quot;)) {&#10;            return;&#10;        }&#10;&#10;        event.setCancelled(true);&#10;        if (!title.contains(&quot;Bank&quot;) &amp;&amp; !title.contains(&quot;einzahlen&quot;) &amp;&amp; !title.contains(&quot;auszahlen&quot;)) {&#10;        if (meta == null || meta.getDisplayName() == null) return;&#10;&#10;        String displayName = meta.getDisplayName();&#10;&#10;        if (title.contains(&quot;Deine Bank&quot;)) {&#10;            handleMainGUI(player, displayName, clickedItem);&#10;        } else if (title.contains(&quot;einzahlen&quot;)) {&#10;            handleDepositGUI(player, displayName, clickedItem);&#10;        } else if (title.contains(&quot;auszahlen&quot;)) {&#10;            handleWithdrawGUI(player, displayName, clickedItem);&#10;        }&#10;    }&#10;&#10;    private void handleMainGUI(Player player, String displayName, ItemStack item) {&#10;        if (title.contains(&quot;Deine Bank&quot;)) {&#10;            bankGUI.openDepositGUI(player);&#10;        } else if (displayName.equals(ChatColor.translateAlternateColorCodes('&amp;', &quot;&amp;e&amp;lGELD AUSZAHLEN&quot;))) {&#10;            bankGUI.openWithdrawGUI(player);&#10;        } else if (displayName.equals(ChatColor.translateAlternateColorCodes('&amp;', &quot;&amp;c&amp;lSCHLIEßEN&quot;))) {&#10;            player.closeInventory();&#10;        } else if (title.contains(&quot;einzahlen&quot;)) {&#10;    }&#10;        } else if (title.contains(&quot;auszahlen&quot;)) {&#10;    private void handleDepositGUI(Player player, String displayName, ItemStack item) {&#10;        if (displayName.equals(ChatColor.translateAlternateColorCodes('&amp;', &quot;&amp;c&amp;lZURÜCK&quot;))) {&#10;            bankGUI.openMainGUI(player);&#10;            return;&#10;        } else if (displayName.equals(ChatColor.translateAlternateColorCodes('&amp;', &quot;&amp;c&amp;lSCHLIEßEN&quot;))) {&#10;        if (displayName.equals(ChatColor.translateAlternateColorCodes('&amp;', &quot;&amp;e&amp;lGELD EINZAHLEN&quot;))) {&#10;            return;&#10;        } else if (displayName.equals(ChatColor.translateAlternateColorCodes('&amp;', &quot;&amp;e&amp;lGELD AUSZAHLEN&quot;))) {&#10;                   displayName.equals(ChatColor.translateAlternateColorCodes('&amp;', &quot;&amp;e&amp;lDEIN ACCOUNT&quot;))) {&#10;        } else if (displayName.equals(ChatColor.translateAlternateColorCodes('&amp;', &quot;&amp;c&amp;lSCHLIEßEN&quot;))) {&#10;        }&#10;&#10;        Material material = item.getType();&#10;        if (material == Material.GOLD_NUGGET || material == Material.GOLD_INGOT || material == Material.GOLD_BLOCK) {&#10;            double amount = parseAmountFromDisplayName(displayName);&#10;        if (displayName.equals(ChatColor.translateAlternateColorCodes('&amp;', &quot;&amp;c&amp;lZURÜCK&quot;))) {&#10;                performDeposit(player, amount);&#10;            }&#10;        } else if (displayName.equals(ChatColor.translateAlternateColorCodes('&amp;', &quot;&amp;c&amp;lSCHLIEßEN&quot;))) {&#10;    }&#10;&#10;        } else if (displayName.equals(ChatColor.translateAlternateColorCodes('&amp;', &quot;&amp;e&amp;lINFO&quot;)) ||&#10;                   displayName.equals(ChatColor.translateAlternateColorCodes('&amp;', &quot;&amp;e&amp;lDEIN ACCOUNT&quot;))) {&#10;            bankGUI.openMainGUI(player);&#10;            return;&#10;        } else if (displayName.equals(ChatColor.translateAlternateColorCodes('&amp;', &quot;&amp;c&amp;lSCHLIEßEN&quot;))) {&#10;            player.closeInventory();&#10;            return;&#10;        } else if (displayName.equals(ChatColor.translateAlternateColorCodes('&amp;', &quot;&amp;e&amp;lINFO&quot;)) ||&#10;                   displayName.equals(ChatColor.translateAlternateColorCodes('&amp;', &quot;&amp;e&amp;lDEIN ACCOUNT&quot;))) {&#10;            return;&#10;        }&#10;&#10;        Material material = item.getType();&#10;        if (material == Material.GOLD_NUGGET || material == Material.GOLD_INGOT || material == Material.GOLD_BLOCK) {&#10;            double amount = parseAmountFromDisplayName(displayName);&#10;        if (displayName.equals(ChatColor.translateAlternateColorCodes('&amp;', &quot;&amp;c&amp;lZURÜCK&quot;))) {&#10;                performWithdraw(player, amount);&#10;            }&#10;        } else if (displayName.equals(ChatColor.translateAlternateColorCodes('&amp;', &quot;&amp;c&amp;lSCHLIEßEN&quot;))) {&#10;    }&#10;&#10;        } else if (displayName.equals(ChatColor.translateAlternateColorCodes('&amp;', &quot;&amp;e&amp;lINFO&quot;)) ||&#10;                   displayName.equals(ChatColor.translateAlternateColorCodes('&amp;', &quot;&amp;e&amp;lDEIN ACCOUNT&quot;))) {&#10;&#10;        try {&#10;            if (stripped.endsWith(&quot;K&quot;)) {&#10;                return Double.parseDouble(stripped.replace(&quot;K&quot;, &quot;&quot;)) * 1000;&#10;            } else if (stripped.endsWith(&quot;M&quot;)) {&#10;                return Double.parseDouble(stripped.replace(&quot;M&quot;, &quot;&quot;)) * 1000000;&#10;            } else {&#10;                return Double.parseDouble(stripped);&#10;            }&#10;        } catch (NumberFormatException e) {&#10;            return 0;&#10;        }&#10;    }&#10;&#10;&#10;        if (amount &gt; 100000) {&#10;            player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                messageManager.getMessage(&quot;bank.deposit-limit&quot;)));&#10;            return;&#10;        }&#10;&#10;        if (economy.getBalance(player) &lt; amount) {&#10;            player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                messageManager.getMessage(&quot;bank.insufficient-funds&quot;)));&#10;            return;&#10;        }&#10;&#10;        bankManager.deposit(player, amount).thenAccept(success -&gt; {&#10;            if (success) {&#10;                economy.withdrawPlayer(player, amount);&#10;            player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                    messageManager.getMessage(&quot;bank.deposit-success&quot;)&#10;                        .replace(&quot;%amount%&quot;, formatMoney(amount))));&#10;&#10;                plugin.getServer().getScheduler().runTaskLater(plugin, () -&gt; {&#10;                    bankGUI.openDepositGUI(player);&#10;            player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;            } else {&#10;                player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                    messageManager.getMessage(&quot;bank.deposit-failed&quot;)));&#10;            }&#10;        });&#10;    }&#10;&#10;    private void performWithdraw(Player player, double amount) {&#10;        if (amount &gt; 1000000) {&#10;            player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;&#10;            return;&#10;        }&#10;&#10;        bankManager.getBalance(player.getUniqueId()).thenAccept(bankBalance -&gt; {&#10;                player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                    messageManager.getMessage(&quot;bank.insufficient-bank-funds&quot;)));&#10;                return;&#10;            }&#10;&#10;            bankManager.withdraw(player, amount).thenAccept(success -&gt; {&#10;                if (success) {&#10;            player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                    player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                        messageManager.getMessage(&quot;bank.withdraw-success&quot;)&#10;                            .replace(&quot;%amount%&quot;, formatMoney(amount))));&#10;&#10;                    plugin.getServer().getScheduler().runTaskLater(plugin, () -&gt; {&#10;                        bankGUI.openWithdrawGUI(player);&#10;                player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                } else {&#10;                    player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                        messageManager.getMessage(&quot;bank.withdraw-failed&quot;)));&#10;                }&#10;            });&#10;        });&#10;    }&#10;&#10;    private String formatMoney(double amount) {&#10;        if (amount &gt;= 1000000) {&#10;&#10;        } else if (amount &gt;= 1000) {&#10;            return String.format(&quot;%.1fK&quot;, amount / 1000);&#10;        } else {&#10;            return String.format(&quot;%.0f&quot;, amount);&#10;                    player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package de.nicerecord.citybuildsystem.bank;&#13;&#10;&#13;&#10;import de.nicerecord.citybuildsystem.CitybuildSystem;&#13;&#10;import de.nicerecord.citybuildsystem.utils.GUIManager;&#13;&#10;import de.nicerecord.citybuildsystem.utils.MessageManager;&#13;&#10;import net.milkbowl.vault.economy.Economy;&#13;&#10;import org.bukkit.ChatColor;&#13;&#10;import org.bukkit.Material;&#13;&#10;import org.bukkit.entity.Player;&#13;&#10;import org.bukkit.event.EventHandler;&#13;&#10;import org.bukkit.event.Listener;&#13;&#10;import org.bukkit.event.inventory.InventoryClickEvent;&#13;&#10;import org.bukkit.inventory.ItemStack;&#13;&#10;import org.bukkit.inventory.meta.ItemMeta;&#13;&#10;&#13;&#10;public class BankGUIListener implements Listener {&#13;&#10;    private final CitybuildSystem plugin;&#13;&#10;    private final BankManager bankManager;&#13;&#10;    private final MessageManager messageManager;&#13;&#10;    private final Economy economy;&#13;&#10;    private final GUIManager guiManager;&#13;&#10;    private final BankGUI bankGUI;&#13;&#10;&#13;&#10;    public BankGUIListener(CitybuildSystem plugin, BankManager bankManager, MessageManager messageManager, Economy economy) {&#13;&#10;        this.plugin = plugin;&#13;&#10;        this.bankManager = bankManager;&#13;&#10;        this.messageManager = messageManager;&#13;&#10;        this.economy = economy;&#13;&#10;        this.guiManager = plugin.getGUIManager();&#13;&#10;        this.bankGUI = new BankGUI(plugin, bankManager, messageManager, economy);&#13;&#10;    }&#13;&#10;&#13;&#10;    @EventHandler&#13;&#10;    public void onInventoryClick(InventoryClickEvent event) {&#13;&#10;        if (!(event.getWhoClicked() instanceof Player)) return;&#13;&#10;&#13;&#10;        Player player = (Player) event.getWhoClicked();&#13;&#10;        String title = event.getView().getTitle();&#13;&#10;&#13;&#10;        String mainTitle = ChatColor.translateAlternateColorCodes('&amp;', guiManager.getBankMainGUITitle());&#13;&#10;        String depositTitle = ChatColor.translateAlternateColorCodes('&amp;', guiManager.getBankDepositGUITitle());&#13;&#10;        String withdrawTitle = ChatColor.translateAlternateColorCodes('&amp;', guiManager.getBankWithdrawGUITitle());&#13;&#10;&#13;&#10;        if (!title.equals(mainTitle) &amp;&amp; !title.equals(depositTitle) &amp;&amp; !title.equals(withdrawTitle)) {&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        event.setCancelled(true);&#13;&#10;&#13;&#10;        ItemStack clickedItem = event.getCurrentItem();&#13;&#10;        if (clickedItem == null || clickedItem.getType() == Material.AIR) return;&#13;&#10;&#13;&#10;        ItemMeta meta = clickedItem.getItemMeta();&#13;&#10;        if (meta == null || meta.getDisplayName() == null) return;&#13;&#10;&#13;&#10;        String displayName = meta.getDisplayName();&#13;&#10;&#13;&#10;        if (title.equals(mainTitle)) {&#13;&#10;            handleMainGUI(player, displayName, clickedItem);&#13;&#10;        } else if (title.equals(depositTitle)) {&#13;&#10;            handleDepositGUI(player, displayName, clickedItem);&#13;&#10;        } else if (title.equals(withdrawTitle)) {&#13;&#10;            handleWithdrawGUI(player, displayName, clickedItem);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void handleMainGUI(Player player, String displayName, ItemStack item) {&#13;&#10;        if (displayName.equals(ChatColor.translateAlternateColorCodes('&amp;', guiManager.getBankDepositName()))) {&#13;&#10;            bankGUI.openDepositGUI(player);&#13;&#10;        } else if (displayName.equals(ChatColor.translateAlternateColorCodes('&amp;', guiManager.getBankWithdrawName()))) {&#13;&#10;            bankGUI.openWithdrawGUI(player);&#13;&#10;        } else if (displayName.equals(ChatColor.translateAlternateColorCodes('&amp;', guiManager.getCloseName()))) {&#13;&#10;            player.closeInventory();&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void handleDepositGUI(Player player, String displayName, ItemStack item) {&#13;&#10;        if (displayName.equals(ChatColor.translateAlternateColorCodes('&amp;', guiManager.getBankBackName()))) {&#13;&#10;            bankGUI.openMainGUI(player);&#13;&#10;            return;&#13;&#10;        } else if (displayName.equals(ChatColor.translateAlternateColorCodes('&amp;', guiManager.getCloseName()))) {&#13;&#10;            player.closeInventory();&#13;&#10;            return;&#13;&#10;        } else if (displayName.equals(ChatColor.translateAlternateColorCodes('&amp;', guiManager.getBankDepositInfoName())) ||&#13;&#10;                   displayName.equals(ChatColor.translateAlternateColorCodes('&amp;', guiManager.getBankPlayerHeadName()))) {&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        Material material = item.getType();&#13;&#10;        if (material == Material.GOLD_NUGGET || material == Material.GOLD_INGOT || material == Material.GOLD_BLOCK) {&#13;&#10;            double amount = parseAmountFromDisplayName(displayName);&#13;&#10;            if (amount &gt; 0) {&#13;&#10;                performDeposit(player, amount);&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void handleWithdrawGUI(Player player, String displayName, ItemStack item) {&#13;&#10;        if (displayName.equals(ChatColor.translateAlternateColorCodes('&amp;', guiManager.getBankBackName()))) {&#13;&#10;            bankGUI.openMainGUI(player);&#13;&#10;            return;&#13;&#10;        } else if (displayName.equals(ChatColor.translateAlternateColorCodes('&amp;', guiManager.getCloseName()))) {&#13;&#10;            player.closeInventory();&#13;&#10;            return;&#13;&#10;        } else if (displayName.equals(ChatColor.translateAlternateColorCodes('&amp;', guiManager.getBankWithdrawInfoName())) ||&#13;&#10;                   displayName.equals(ChatColor.translateAlternateColorCodes('&amp;', guiManager.getBankPlayerHeadName()))) {&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        Material material = item.getType();&#13;&#10;        if (material == Material.GOLD_NUGGET || material == Material.GOLD_INGOT || material == Material.GOLD_BLOCK) {&#13;&#10;            double amount = parseAmountFromDisplayName(displayName);&#13;&#10;            if (amount &gt; 0) {&#13;&#10;                performWithdraw(player, amount);&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private double parseAmountFromDisplayName(String displayName) {&#13;&#10;        String stripped = ChatColor.stripColor(displayName);&#13;&#10;        &#13;&#10;        try {&#13;&#10;            if (stripped.endsWith(&quot;K&quot;)) {&#13;&#10;                return Double.parseDouble(stripped.replace(&quot;K&quot;, &quot;&quot;)) * 1000;&#13;&#10;            } else if (stripped.endsWith(&quot;M&quot;)) {&#13;&#10;                return Double.parseDouble(stripped.replace(&quot;M&quot;, &quot;&quot;)) * 1000000;&#13;&#10;            } else {&#13;&#10;                return Double.parseDouble(stripped);&#13;&#10;            }&#13;&#10;        } catch (NumberFormatException e) {&#13;&#10;            return 0;&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void performDeposit(Player player, double amount) {&#13;&#10;        if (amount &gt; 100000) {&#13;&#10;            player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', &#13;&#10;                messageManager.getMessage(&quot;bank.deposit-limit&quot;)));&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        if (economy.getBalance(player) &lt; amount) {&#13;&#10;            player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', &#13;&#10;                messageManager.getMessage(&quot;bank.insufficient-funds&quot;)));&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        bankManager.deposit(player, amount).thenAccept(success -&gt; {&#13;&#10;            if (success) {&#13;&#10;                economy.withdrawPlayer(player, amount);&#13;&#10;                player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#13;&#10;                    messageManager.getMessage(&quot;bank.deposit-success&quot;)&#13;&#10;                        .replace(&quot;%amount%&quot;, formatMoney(amount))));&#13;&#10;                &#13;&#10;                plugin.getServer().getScheduler().runTaskLater(plugin, () -&gt; {&#13;&#10;                    bankGUI.openDepositGUI(player);&#13;&#10;                }, 1L);&#13;&#10;            } else {&#13;&#10;                player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', &#13;&#10;                    messageManager.getMessage(&quot;bank.deposit-failed&quot;)));&#13;&#10;            }&#13;&#10;        });&#13;&#10;    }&#13;&#10;&#13;&#10;    private void performWithdraw(Player player, double amount) {&#13;&#10;        if (amount &gt; 1000000) {&#13;&#10;            player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', &#13;&#10;                messageManager.getMessage(&quot;bank.withdraw-limit&quot;)));&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        bankManager.getBalance(player.getUniqueId()).thenAccept(bankBalance -&gt; {&#13;&#10;            if (bankBalance &lt; amount) {&#13;&#10;                player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', &#13;&#10;                    messageManager.getMessage(&quot;bank.insufficient-bank-funds&quot;)));&#13;&#10;                return;&#13;&#10;            }&#13;&#10;&#13;&#10;            bankManager.withdraw(player, amount).thenAccept(success -&gt; {&#13;&#10;                if (success) {&#13;&#10;                    economy.depositPlayer(player, amount);&#13;&#10;                    player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#13;&#10;                        messageManager.getMessage(&quot;bank.withdraw-success&quot;)&#13;&#10;                            .replace(&quot;%amount%&quot;, formatMoney(amount))));&#13;&#10;                    &#13;&#10;                    plugin.getServer().getScheduler().runTaskLater(plugin, () -&gt; {&#13;&#10;                        bankGUI.openWithdrawGUI(player);&#13;&#10;                    }, 1L);&#13;&#10;                } else {&#13;&#10;                    player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', &#13;&#10;                        messageManager.getMessage(&quot;bank.withdraw-failed&quot;)));&#13;&#10;                }&#13;&#10;            });&#13;&#10;        });&#13;&#10;    }&#13;&#10;&#13;&#10;    private String formatMoney(double amount) {&#13;&#10;        if (amount &gt;= 1000000) {&#13;&#10;            return String.format(&quot;%.1fM&quot;, amount / 1000000);&#13;&#10;        } else if (amount &gt;= 1000) {&#13;&#10;            return String.format(&quot;%.1fK&quot;, amount / 1000);&#13;&#10;        } else {&#13;&#10;            return String.format(&quot;%.0f&quot;, amount);&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/de/nicerecord/citybuildsystem/bank/BankManager.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/de/nicerecord/citybuildsystem/bank/BankManager.java" />
              <option name="originalContent" value="package de.nicerecord.citybuildsystem.bank;&#10;&#10;import de.nicerecord.citybuildsystem.CitybuildSystem;&#10;import org.bukkit.entity.Player;&#10;&#10;import java.io.File;&#10;import java.sql.*;&#10;import java.util.UUID;&#10;import java.util.concurrent.CompletableFuture;&#10;&#10;public class BankManager {&#10;    private final CitybuildSystem plugin;&#10;    private Connection connection;&#10;&#10;    public BankManager(CitybuildSystem plugin) {&#10;        this.plugin = plugin;&#10;        initDatabase();&#10;    }&#10;&#10;    private void initDatabase() {&#10;        try {&#10;            File dataFolder = plugin.getDataFolder();&#10;            if (!dataFolder.exists()) {&#10;                dataFolder.mkdirs();&#10;            }&#10;&#10;            String dbPath = new File(dataFolder, &quot;bank.db&quot;).getAbsolutePath();&#10;            connection = DriverManager.getConnection(&quot;jdbc:sqlite:&quot; + dbPath);&#10;&#10;            String createTable = &quot;CREATE TABLE IF NOT EXISTS bank_accounts (&quot; +&#10;                    &quot;id INTEGER PRIMARY KEY AUTOINCREMENT,&quot; +&#10;                    &quot;player_uuid TEXT NOT NULL UNIQUE,&quot; +&#10;                    &quot;player_name TEXT NOT NULL,&quot; +&#10;                    &quot;balance REAL NOT NULL DEFAULT 0.0,&quot; +&#10;                    &quot;created_at INTEGER NOT NULL DEFAULT (strftime('%s', 'now')),&quot; +&#10;                    &quot;updated_at INTEGER NOT NULL DEFAULT (strftime('%s', 'now'))&quot; +&#10;                    &quot;)&quot;;&#10;&#10;            try (PreparedStatement stmt = connection.prepareStatement(createTable)) {&#10;                stmt.execute();&#10;            }&#10;        } catch (SQLException e) {&#10;            plugin.getLogger().severe(&quot;Fehler beim Initialisieren der Bank-Datenbank: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    public CompletableFuture&lt;Double&gt; getBalance(UUID playerUUID) {&#10;        return CompletableFuture.supplyAsync(() -&gt; {&#10;            try {&#10;                String sql = &quot;SELECT balance FROM bank_accounts WHERE player_uuid = ?&quot;;&#10;                try (PreparedStatement stmt = connection.prepareStatement(sql)) {&#10;                    stmt.setString(1, playerUUID.toString());&#10;                    try (ResultSet rs = stmt.executeQuery()) {&#10;                        if (rs.next()) {&#10;                            return rs.getDouble(&quot;balance&quot;);&#10;                        }&#10;                    }&#10;                }&#10;            } catch (SQLException e) {&#10;                plugin.getLogger().severe(&quot;Fehler beim Abrufen des Bank-Guthabens: &quot; + e.getMessage());&#10;            }&#10;            return 0.0;&#10;        });&#10;    }&#10;&#10;    public CompletableFuture&lt;Double&gt; getBalance(String playerName) {&#10;        return CompletableFuture.supplyAsync(() -&gt; {&#10;            try {&#10;                String sql = &quot;SELECT balance FROM bank_accounts WHERE LOWER(player_name) = LOWER(?)&quot;;&#10;                try (PreparedStatement stmt = connection.prepareStatement(sql)) {&#10;                    stmt.setString(1, playerName);&#10;                    try (ResultSet rs = stmt.executeQuery()) {&#10;                        if (rs.next()) {&#10;                            return rs.getDouble(&quot;balance&quot;);&#10;                        }&#10;                    }&#10;                }&#10;            } catch (SQLException e) {&#10;                plugin.getLogger().severe(&quot;Fehler beim Abrufen des Bank-Guthabens: &quot; + e.getMessage());&#10;            }&#10;            return 0.0;&#10;        });&#10;    }&#10;&#10;    public CompletableFuture&lt;Boolean&gt; deposit(Player player, double amount) {&#10;        if (amount &lt;= 0) return CompletableFuture.completedFuture(false);&#10;&#10;        return CompletableFuture.supplyAsync(() -&gt; {&#10;            try {&#10;                // Check if account exists, if not create it&#10;                // Check if account exists, if not create it&#10;                createAccountIfNotExists(player);&#10;&#10;                String sql = &quot;UPDATE bank_accounts SET balance = balance + ?, updated_at = strftime('%s', 'now') WHERE player_uuid = ?&quot;;&#10;                try (PreparedStatement stmt = connection.prepareStatement(sql)) {&#10;                    stmt.setDouble(1, amount);&#10;                    stmt.setString(2, player.getUniqueId().toString());&#10;                    int affected = stmt.executeUpdate();&#10;                    return affected &gt; 0;&#10;                }&#10;            } catch (SQLException e) {&#10;                plugin.getLogger().severe(&quot;Fehler beim Einzahlen: &quot; + e.getMessage());&#10;                return false;&#10;            }&#10;        });&#10;    }&#10;&#10;    public CompletableFuture&lt;Boolean&gt; withdraw(Player player, double amount) {&#10;        if (amount &lt;= 0) return CompletableFuture.completedFuture(false);&#10;&#10;        return CompletableFuture.supplyAsync(() -&gt; {&#10;                // Check current balance&#10;            try {&#10;                // Check current balance&#10;                double currentBalance = getBalance(player.getUniqueId()).join();&#10;                if (currentBalance &lt; amount) {&#10;                    return false;&#10;                }&#10;&#10;                String sql = &quot;UPDATE bank_accounts SET balance = balance - ?, updated_at = strftime('%s', 'now') WHERE player_uuid = ?&quot;;&#10;                try (PreparedStatement stmt = connection.prepareStatement(sql)) {&#10;                    stmt.setDouble(1, amount);&#10;                    stmt.setString(2, player.getUniqueId().toString());&#10;                    int affected = stmt.executeUpdate();&#10;                    return affected &gt; 0;&#10;                }&#10;            } catch (SQLException e) {&#10;                plugin.getLogger().severe(&quot;Fehler beim Auszahlen: &quot; + e.getMessage());&#10;                return false;&#10;            }&#10;        });&#10;    }&#10;&#10;    private void createAccountIfNotExists(Player player) throws SQLException {&#10;        String checkSql = &quot;SELECT COUNT(*) FROM bank_accounts WHERE player_uuid = ?&quot;;&#10;        try (PreparedStatement checkStmt = connection.prepareStatement(checkSql)) {&#10;                    // Account doesn't exist, create it&#10;            checkStmt.setString(1, player.getUniqueId().toString());&#10;            try (ResultSet rs = checkStmt.executeQuery()) {&#10;                if (rs.next() &amp;&amp; rs.getInt(1) == 0) {&#10;                    // Account doesn't exist, create it&#10;                    String insertSql = &quot;INSERT INTO bank_accounts (player_uuid, player_name, balance) VALUES (?, ?, 0.0)&quot;;&#10;                    try (PreparedStatement insertStmt = connection.prepareStatement(insertSql)) {&#10;                    // Update player name in case it changed&#10;                        insertStmt.setString(1, player.getUniqueId().toString());&#10;                        insertStmt.setString(2, player.getName());&#10;                        insertStmt.executeUpdate();&#10;                    }&#10;                } else {&#10;                    // Update player name in case it changed&#10;                    String updateSql = &quot;UPDATE bank_accounts SET player_name = ? WHERE player_uuid = ?&quot;;&#10;                    try (PreparedStatement updateStmt = connection.prepareStatement(updateSql)) {&#10;                        updateStmt.setString(1, player.getName());&#10;                        updateStmt.setString(2, player.getUniqueId().toString());&#10;                        updateStmt.executeUpdate();&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    public void close() {&#10;        try {&#10;            if (connection != null &amp;&amp; !connection.isClosed()) {&#10;                connection.close();&#10;            }&#10;        } catch (SQLException e) {&#10;            plugin.getLogger().severe(&quot;Fehler beim Schließen der Bank-Datenbankverbindung: &quot; + e.getMessage());&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package de.nicerecord.citybuildsystem.bank;&#10;&#10;import de.nicerecord.citybuildsystem.CitybuildSystem;&#10;import org.bukkit.entity.Player;&#10;&#10;import java.io.File;&#10;import java.sql.*;&#10;import java.util.UUID;&#10;import java.util.concurrent.CompletableFuture;&#10;&#10;public class BankManager {&#10;    private final CitybuildSystem plugin;&#10;    private Connection connection;&#10;&#10;    public BankManager(CitybuildSystem plugin) {&#10;        this.plugin = plugin;&#10;        initDatabase();&#10;    }&#10;&#10;    private void initDatabase() {&#10;        try {&#10;            File dataFolder = plugin.getDataFolder();&#10;            if (!dataFolder.exists()) {&#10;                dataFolder.mkdirs();&#10;            }&#10;&#10;            String dbPath = new File(dataFolder, &quot;bank.db&quot;).getAbsolutePath();&#10;            connection = DriverManager.getConnection(&quot;jdbc:sqlite:&quot; + dbPath);&#10;&#10;            String createTable = &quot;CREATE TABLE IF NOT EXISTS bank_accounts (&quot; +&#10;                    &quot;id INTEGER PRIMARY KEY AUTOINCREMENT,&quot; +&#10;                    &quot;player_uuid TEXT NOT NULL UNIQUE,&quot; +&#10;                    &quot;player_name TEXT NOT NULL,&quot; +&#10;                    &quot;balance REAL NOT NULL DEFAULT 0.0,&quot; +&#10;                    &quot;created_at INTEGER NOT NULL DEFAULT (strftime('%s', 'now')),&quot; +&#10;                    &quot;updated_at INTEGER NOT NULL DEFAULT (strftime('%s', 'now'))&quot; +&#10;                    &quot;)&quot;;&#10;&#10;            try (PreparedStatement stmt = connection.prepareStatement(createTable)) {&#10;                stmt.execute();&#10;            }&#10;        } catch (SQLException e) {&#10;            plugin.getLogger().severe(&quot;Fehler beim Initialisieren der Bank-Datenbank: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    public CompletableFuture&lt;Double&gt; getBalance(UUID playerUUID) {&#10;        return CompletableFuture.supplyAsync(() -&gt; {&#10;            try {&#10;                String sql = &quot;SELECT balance FROM bank_accounts WHERE player_uuid = ?&quot;;&#10;                try (PreparedStatement stmt = connection.prepareStatement(sql)) {&#10;                    stmt.setString(1, playerUUID.toString());&#10;                    try (ResultSet rs = stmt.executeQuery()) {&#10;                        if (rs.next()) {&#10;                            return rs.getDouble(&quot;balance&quot;);&#10;                        }&#10;                    }&#10;                }&#10;            } catch (SQLException e) {&#10;                plugin.getLogger().severe(&quot;Fehler beim Abrufen des Bank-Guthabens: &quot; + e.getMessage());&#10;            }&#10;            return 0.0;&#10;        });&#10;    }&#10;&#10;    public CompletableFuture&lt;Double&gt; getBalance(String playerName) {&#10;        return CompletableFuture.supplyAsync(() -&gt; {&#10;            try {&#10;                String sql = &quot;SELECT balance FROM bank_accounts WHERE LOWER(player_name) = LOWER(?)&quot;;&#10;                try (PreparedStatement stmt = connection.prepareStatement(sql)) {&#10;                    stmt.setString(1, playerName);&#10;                    try (ResultSet rs = stmt.executeQuery()) {&#10;                        if (rs.next()) {&#10;                            return rs.getDouble(&quot;balance&quot;);&#10;                        }&#10;                    }&#10;                }&#10;            } catch (SQLException e) {&#10;                plugin.getLogger().severe(&quot;Fehler beim Abrufen des Bank-Guthabens: &quot; + e.getMessage());&#10;            }&#10;            return 0.0;&#10;        });&#10;    }&#10;&#10;    public CompletableFuture&lt;Boolean&gt; deposit(Player player, double amount) {&#10;        if (amount &lt;= 0) return CompletableFuture.completedFuture(false);&#10;&#10;        return CompletableFuture.supplyAsync(() -&gt; {&#10;            try {&#10;                createAccountIfNotExists(player);&#10;&#10;                String sql = &quot;UPDATE bank_accounts SET balance = balance + ?, updated_at = strftime('%s', 'now') WHERE player_uuid = ?&quot;;&#10;                try (PreparedStatement stmt = connection.prepareStatement(sql)) {&#10;                    stmt.setDouble(1, amount);&#10;                    stmt.setString(2, player.getUniqueId().toString());&#10;                    int affected = stmt.executeUpdate();&#10;                    return affected &gt; 0;&#10;                }&#10;            } catch (SQLException e) {&#10;                plugin.getLogger().severe(&quot;Fehler beim Einzahlen: &quot; + e.getMessage());&#10;                return false;&#10;            }&#10;        });&#10;    }&#10;&#10;    public CompletableFuture&lt;Boolean&gt; withdraw(Player player, double amount) {&#10;        if (amount &lt;= 0) return CompletableFuture.completedFuture(false);&#10;&#10;        return CompletableFuture.supplyAsync(() -&gt; {&#10;            try {&#10;                double currentBalance = getBalance(player.getUniqueId()).join();&#10;                if (currentBalance &lt; amount) {&#10;                    return false;&#10;                }&#10;&#10;                String sql = &quot;UPDATE bank_accounts SET balance = balance - ?, updated_at = strftime('%s', 'now') WHERE player_uuid = ?&quot;;&#10;                try (PreparedStatement stmt = connection.prepareStatement(sql)) {&#10;                    stmt.setDouble(1, amount);&#10;                    stmt.setString(2, player.getUniqueId().toString());&#10;                    int affected = stmt.executeUpdate();&#10;                    return affected &gt; 0;&#10;                }&#10;            } catch (SQLException e) {&#10;                plugin.getLogger().severe(&quot;Fehler beim Auszahlen: &quot; + e.getMessage());&#10;                return false;&#10;            }&#10;        });&#10;    }&#10;&#10;    private void createAccountIfNotExists(Player player) throws SQLException {&#10;        String checkSql = &quot;SELECT COUNT(*) FROM bank_accounts WHERE player_uuid = ?&quot;;&#10;        try (PreparedStatement checkStmt = connection.prepareStatement(checkSql)) {&#10;            checkStmt.setString(1, player.getUniqueId().toString());&#10;            try (ResultSet rs = checkStmt.executeQuery()) {&#10;                if (rs.next() &amp;&amp; rs.getInt(1) == 0) {&#10;                    String insertSql = &quot;INSERT INTO bank_accounts (player_uuid, player_name, balance) VALUES (?, ?, 0.0)&quot;;&#10;                    try (PreparedStatement insertStmt = connection.prepareStatement(insertSql)) {&#10;                        insertStmt.setString(1, player.getUniqueId().toString());&#10;                        insertStmt.setString(2, player.getName());&#10;                        insertStmt.executeUpdate();&#10;                    }&#10;                } else {&#10;                    String updateSql = &quot;UPDATE bank_accounts SET player_name = ? WHERE player_uuid = ?&quot;;&#10;                    try (PreparedStatement updateStmt = connection.prepareStatement(updateSql)) {&#10;                        updateStmt.setString(1, player.getName());&#10;                        updateStmt.setString(2, player.getUniqueId().toString());&#10;                        updateStmt.executeUpdate();&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    public void close() {&#10;        try {&#10;            if (connection != null &amp;&amp; !connection.isClosed()) {&#10;                connection.close();&#10;            }&#10;        } catch (SQLException e) {&#10;            plugin.getLogger().severe(&quot;Fehler beim Schließen der Bank-Datenbankverbindung: &quot; + e.getMessage());&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/de/nicerecord/citybuildsystem/home/HomeGUI.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/de/nicerecord/citybuildsystem/home/HomeGUI.java" />
              <option name="originalContent" value="package de.nicerecord.citybuildsystem.home;&#10;&#10;import de.nicerecord.citybuildsystem.CitybuildSystem;&#10;import de.nicerecord.citybuildsystem.utils.ConfigManager;&#10;import de.nicerecord.citybuildsystem.utils.GUIManager;&#10;import de.nicerecord.citybuildsystem.utils.MessageManager;&#10;import net.milkbowl.vault.economy.Economy;&#10;import org.bukkit.Bukkit;&#10;import org.bukkit.ChatColor;&#10;import org.bukkit.Material;&#10;import org.bukkit.entity.Player;&#10;import org.bukkit.inventory.Inventory;&#10;import org.bukkit.inventory.ItemStack;&#10;import org.bukkit.inventory.meta.ItemMeta;&#10;&#10;import java.util.ArrayList;&#10;import java.util.HashMap;&#10;import java.util.List;&#10;import java.util.Map;&#10;import java.util.UUID;&#10;&#10;public class HomeGUI {&#10;    private final CitybuildSystem plugin;&#10;    private final HomeManager homeManager;&#10;    private final ConfigManager configManager;&#10;    private final GUIManager guiManager;&#10;    private final MessageManager messageManager;&#10;    private final Economy economy;&#10;&#10;    // Store current page for each player&#10;    private final Map&lt;UUID, Integer&gt; playerPages = new HashMap&lt;&gt;();&#10;&#10;    // Slots available for homes per page (excluding borders, navigation, info items)&#10;    private static final int HOMES_PER_PAGE = 28;&#10;&#10;    public HomeGUI(CitybuildSystem plugin, HomeManager homeManager, ConfigManager configManager, GUIManager guiManager, MessageManager messageManager, Economy economy) {&#10;        this.plugin = plugin;&#10;        this.homeManager = homeManager;&#10;        this.configManager = configManager;&#10;        this.guiManager = guiManager;&#10;        this.messageManager = messageManager;&#10;        this.economy = economy;&#10;    }&#10;&#10;    public void openHomesGUI(Player player) {&#10;        openHomesGUI(player, 1);&#10;    }&#10;&#10;    public void openHomesGUI(Player player, int page) {&#10;        playerPages.put(player.getUniqueId(), page);&#10;        String title = ChatColor.translateAlternateColorCodes('&amp;', guiManager.getHomeGUITitle());&#10;        Inventory inventory = Bukkit.createInventory(null, guiManager.getHomeGUISize(), title);&#10;&#10;        homeManager.getPlayerHomes(player).thenAccept(homes -&gt; {&#10;            Bukkit.getScheduler().runTask(plugin, () -&gt; {&#10;                int maxHomes = homeManager.getMaxHomesForPlayer(player);&#10;                int configMaxHomes = configManager.getMaxHomes(); // Maximum aus Config&#10;&#10;                // Berechne Paginierung basierend auf dem größeren Wert (entweder verfügbare Homes oder Config-Maximum)&#10;                int homesForPagination = Math.max(maxHomes, configMaxHomes);&#10;                int totalPages = calculateTotalPages(homesForPagination);&#10;&#10;                fillBorder(inventory);&#10;                inventory.setItem(53, createCloseItem());&#10;&#10;                // Add navigation items if needed (basierend auf Config-Maximum, nicht Spieler-Maximum)&#10;                if (totalPages &gt; 1) {&#10;                    if (page &gt; 1) {&#10;                        inventory.setItem(48, createPreviousPageItem()); // Slot 48 für vorherige Seite&#10;                    }&#10;                    if (page &lt; totalPages) {&#10;                        inventory.setItem(50, createNextPageItem()); // Slot 50 für nächste Seite&#10;                    }&#10;                }&#10;&#10;                // Info-Item immer anzeigen (ohne Seiteninformation)&#10;                inventory.setItem(49, createInfoItem(player, homes.size()));&#10;&#10;                addHomeItems(inventory, player, homes, page, maxHomes, configMaxHomes);&#10;                player.openInventory(inventory);&#10;            });&#10;        });&#10;    }&#10;&#10;    private int calculateTotalPages(int maxHomes) {&#10;        return (int) Math.ceil((double) maxHomes / HOMES_PER_PAGE);&#10;    }&#10;&#10;    private void fillBorder(Inventory inventory) {&#10;        ItemStack borderItem = createBorderItem();&#10;        for (int i = 0; i &lt; 9; i++) {&#10;            inventory.setItem(i, borderItem);&#10;            inventory.setItem(45 + i, borderItem);&#10;        }&#10;        for (int i = 9; i &lt; 45; i += 9) {&#10;            inventory.setItem(i, borderItem);&#10;            inventory.setItem(i + 8, borderItem);&#10;        }&#10;    }&#10;&#10;    private ItemStack createBorderItem() {&#10;        Material material = Material.valueOf(guiManager.getBorderMaterial());&#10;        ItemStack item = new ItemStack(material);&#10;        ItemMeta meta = item.getItemMeta();&#10;        meta.setDisplayName(ChatColor.translateAlternateColorCodes('&amp;', guiManager.getBorderName()));&#10;        List&lt;String&gt; lore = new ArrayList&lt;&gt;();&#10;        for (String line : guiManager.getBorderLore()) {&#10;            lore.add(ChatColor.translateAlternateColorCodes('&amp;', line));&#10;        }&#10;        meta.setLore(lore);&#10;        item.setItemMeta(meta);&#10;        return item;&#10;    }&#10;&#10;    private ItemStack createCloseItem() {&#10;        Material material = Material.valueOf(guiManager.getCloseMaterial());&#10;        ItemStack item = new ItemStack(material);&#10;        ItemMeta meta = item.getItemMeta();&#10;        meta.setDisplayName(ChatColor.translateAlternateColorCodes('&amp;', guiManager.getCloseName()));&#10;        List&lt;String&gt; lore = new ArrayList&lt;&gt;();&#10;        for (String line : guiManager.getCloseLore()) {&#10;            lore.add(ChatColor.translateAlternateColorCodes('&amp;', line));&#10;        }&#10;        meta.setLore(lore);&#10;        item.setItemMeta(meta);&#10;        return item;&#10;    }&#10;&#10;    private ItemStack createInfoItem(Player player, int usedHomes) {&#10;        Material material = Material.valueOf(guiManager.getInfoMaterial());&#10;        ItemStack item = new ItemStack(material);&#10;        ItemMeta meta = item.getItemMeta();&#10;        meta.setDisplayName(ChatColor.translateAlternateColorCodes('&amp;', guiManager.getInfoName()));&#10;        int maxHomes = homeManager.getMaxHomesForPlayer(player);&#10;        List&lt;String&gt; lore = new ArrayList&lt;&gt;();&#10;        for (String line : guiManager.getInfoLore()) {&#10;            line = line.replace(&quot;%used%&quot;, String.valueOf(usedHomes))&#10;                      .replace(&quot;%max%&quot;, String.valueOf(maxHomes));&#10;            lore.add(ChatColor.translateAlternateColorCodes('&amp;', line));&#10;        }&#10;        meta.setLore(lore);&#10;        item.setItemMeta(meta);&#10;        return item;&#10;    }&#10;&#10;    private void addHomeItems(Inventory inventory, Player player, List&lt;Home&gt; homes, int page, int maxHomes, int configMaxHomes) {&#10;        int startIndex = (page - 1) * HOMES_PER_PAGE;&#10;        int endIndex = Math.min(startIndex + HOMES_PER_PAGE, maxHomes);&#10;&#10;        // Get valid slots for home items (excluding border)&#10;        List&lt;Integer&gt; validSlots = getValidSlots();&#10;        int slotIndex = 0;&#10;&#10;        // Zeige alle verfügbaren Home-Slots für diese Seite&#10;        for (int i = startIndex; i &lt; endIndex &amp;&amp; slotIndex &lt; validSlots.size(); i++) {&#10;            if (i &lt; homes.size()) {&#10;                // Existierendes Home&#10;                Home home = homes.get(i);&#10;                inventory.setItem(validSlots.get(slotIndex), createHomeItem(home));&#10;            } else {&#10;                // Leerer Home-Slot (kann gesetzt werden)&#10;                inventory.setItem(validSlots.get(slotIndex), createEmptyHomeItem());&#10;            }&#10;            slotIndex++;&#10;        }&#10;&#10;        // Zeige &quot;Nächsten Home kaufen&quot; Button wenn Economy aktiviert ist und das Config-Maximum nicht erreicht ist&#10;        if (configManager.isEconomyEnabled() &amp;&amp; economy != null &amp;&amp; slotIndex &lt; validSlots.size()) {&#10;            int currentMaxHomes = homeManager.getMaxHomesForPlayer(player);&#10;&#10;            // Zeige Kauf-Button für den nächsten Home-Slot wenn das Config-Maximum noch nicht erreicht ist&#10;            if (currentMaxHomes &lt; configMaxHomes) {&#10;                // Berechne welcher Home-Slot als nächstes gekauft werden kann&#10;                int nextHomeSlot = currentMaxHomes + 1;&#10;&#10;                // Prüfe ob der nächste kaufbare Slot auf dieser Seite angezeigt werden soll&#10;                int nextSlotIndex = nextHomeSlot - 1; // 0-basiert&#10;                if (nextSlotIndex &gt;= startIndex &amp;&amp; nextSlotIndex &lt; startIndex + HOMES_PER_PAGE) {&#10;                    // Berechne die richtige Slot-Position für den Kauf-Button&#10;                    int buyButtonSlotIndex = nextSlotIndex - startIndex;&#10;                    if (buyButtonSlotIndex &lt; validSlots.size()) {&#10;                        inventory.setItem(validSlots.get(buyButtonSlotIndex), createBuyNextHomeItem(nextHomeSlot));&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private List&lt;Integer&gt; getValidSlots() {&#10;        List&lt;Integer&gt; slots = new ArrayList&lt;&gt;();&#10;        for (int row = 1; row &lt; 5; row++) { // Rows 1-4 (skip borders)&#10;            for (int col = 1; col &lt; 8; col++) { // Cols 1-7 (skip borders)&#10;                slots.add(row * 9 + col);&#10;            }&#10;        }&#10;        return slots;&#10;    }&#10;&#10;    private ItemStack createHomeItem(Home home) {&#10;        Material material = Material.valueOf(guiManager.getHomeSetMaterial());&#10;        ItemStack item = new ItemStack(material);&#10;        ItemMeta meta = item.getItemMeta();&#10;        String name = guiManager.getHomeSetName().replace(&quot;%name%&quot;, home.getName());&#10;        meta.setDisplayName(ChatColor.translateAlternateColorCodes('&amp;', name));&#10;        List&lt;String&gt; lore = new ArrayList&lt;&gt;();&#10;        for (String line : guiManager.getHomeSetLore()) {&#10;            lore.add(ChatColor.translateAlternateColorCodes('&amp;', line));&#10;        }&#10;        meta.setLore(lore);&#10;        item.setItemMeta(meta);&#10;        return item;&#10;    }&#10;&#10;    private ItemStack createEmptyHomeItem() {&#10;        Material material = Material.valueOf(guiManager.getHomeEmptyMaterial());&#10;        ItemStack item = new ItemStack(material);&#10;        ItemMeta meta = item.getItemMeta();&#10;        meta.setDisplayName(ChatColor.translateAlternateColorCodes('&amp;', guiManager.getHomeEmptyName()));&#10;        List&lt;String&gt; lore = new ArrayList&lt;&gt;();&#10;        for (String line : guiManager.getHomeEmptyLore()) {&#10;            lore.add(ChatColor.translateAlternateColorCodes('&amp;', line));&#10;        }&#10;        meta.setLore(lore);&#10;        item.setItemMeta(meta);&#10;        return item;&#10;    }&#10;&#10;    private ItemStack createLockedHomeItem() {&#10;        Material material = Material.valueOf(guiManager.getHomeLockedMaterial());&#10;        ItemStack item = new ItemStack(material);&#10;        ItemMeta meta = item.getItemMeta();&#10;        meta.setDisplayName(ChatColor.translateAlternateColorCodes('&amp;', guiManager.getHomeLockedName()));&#10;        double price = configManager.getHomePrice();&#10;        List&lt;String&gt; lore = new ArrayList&lt;&gt;();&#10;        for (String line : guiManager.getHomeLockedLore()) {&#10;            line = line.replace(&quot;%price%&quot;, String.valueOf((int) price));&#10;            lore.add(ChatColor.translateAlternateColorCodes('&amp;', line));&#10;        }&#10;        meta.setLore(lore);&#10;        item.setItemMeta(meta);&#10;        return item;&#10;    }&#10;&#10;    private ItemStack createPreviousPageItem() {&#10;        Material material = Material.valueOf(guiManager.getPreviousPageMaterial());&#10;        ItemStack item = new ItemStack(material);&#10;        ItemMeta meta = item.getItemMeta();&#10;        meta.setDisplayName(ChatColor.translateAlternateColorCodes('&amp;', guiManager.getPreviousPageName()));&#10;        List&lt;String&gt; lore = new ArrayList&lt;&gt;();&#10;        for (String line : guiManager.getPreviousPageLore()) {&#10;            lore.add(ChatColor.translateAlternateColorCodes('&amp;', line));&#10;        }&#10;        meta.setLore(lore);&#10;        item.setItemMeta(meta);&#10;        return item;&#10;    }&#10;&#10;    private ItemStack createNextPageItem() {&#10;        Material material = Material.valueOf(guiManager.getNextPageMaterial());&#10;        ItemStack item = new ItemStack(material);&#10;        ItemMeta meta = item.getItemMeta();&#10;        meta.setDisplayName(ChatColor.translateAlternateColorCodes('&amp;', guiManager.getNextPageName()));&#10;        List&lt;String&gt; lore = new ArrayList&lt;&gt;();&#10;        for (String line : guiManager.getNextPageLore()) {&#10;            lore.add(ChatColor.translateAlternateColorCodes('&amp;', line));&#10;        }&#10;        meta.setLore(lore);&#10;        item.setItemMeta(meta);&#10;        return item;&#10;    }&#10;&#10;    private ItemStack createBuyNextHomeItem(int homeSlotNumber) {&#10;        Material material = Material.valueOf(guiManager.getHomeLockedMaterial());&#10;        ItemStack item = new ItemStack(material);&#10;        ItemMeta meta = item.getItemMeta();&#10;&#10;        String name = guiManager.getHomeLockedName().replace(&quot;KAUFEN&quot;, &quot;SLOT &quot; + homeSlotNumber + &quot; KAUFEN&quot;);&#10;        meta.setDisplayName(ChatColor.translateAlternateColorCodes('&amp;', name));&#10;&#10;        double price = configManager.getHomePrice();&#10;        List&lt;String&gt; lore = new ArrayList&lt;&gt;();&#10;        for (String line : guiManager.getHomeLockedLore()) {&#10;            line = line.replace(&quot;%price%&quot;, String.valueOf((int) price))&#10;                      .replace(&quot;Home&quot;, &quot;Home-Slot &quot; + homeSlotNumber);&#10;            lore.add(ChatColor.translateAlternateColorCodes('&amp;', line));&#10;        }&#10;        meta.setLore(lore);&#10;        item.setItemMeta(meta);&#10;        return item;&#10;    }&#10;&#10;    public int getCurrentPage(Player player) {&#10;        return playerPages.getOrDefault(player.getUniqueId(), 1);&#10;    }&#10;&#10;    public void removePlayerPage(Player player) {&#10;        playerPages.remove(player.getUniqueId());&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package de.nicerecord.citybuildsystem.home;&#10;&#10;import de.nicerecord.citybuildsystem.CitybuildSystem;&#10;import de.nicerecord.citybuildsystem.utils.ConfigManager;&#10;import de.nicerecord.citybuildsystem.utils.GUIManager;&#10;import de.nicerecord.citybuildsystem.utils.MessageManager;&#10;import net.milkbowl.vault.economy.Economy;&#10;import org.bukkit.Bukkit;&#10;import org.bukkit.ChatColor;&#10;import org.bukkit.Material;&#10;import org.bukkit.entity.Player;&#10;import org.bukkit.inventory.Inventory;&#10;import org.bukkit.inventory.ItemStack;&#10;import org.bukkit.inventory.meta.ItemMeta;&#10;&#10;import java.util.ArrayList;&#10;import java.util.HashMap;&#10;import java.util.List;&#10;import java.util.Map;&#10;import java.util.UUID;&#10;&#10;public class HomeGUI {&#10;    private final CitybuildSystem plugin;&#10;    private final HomeManager homeManager;&#10;    private final ConfigManager configManager;&#10;    private final GUIManager guiManager;&#10;    private final MessageManager messageManager;&#10;    private final Economy economy;&#10;&#10;    // Store current page for each player - STATIC damit es über Instanzen hinweg funktioniert&#10;    private static final Map&lt;UUID, Integer&gt; playerPages = new HashMap&lt;&gt;();&#10;&#10;    // Slots available for homes per page (excluding borders, navigation, info items)&#10;    private static final int HOMES_PER_PAGE = 28;&#10;&#10;    public HomeGUI(CitybuildSystem plugin, HomeManager homeManager, ConfigManager configManager, GUIManager guiManager, MessageManager messageManager, Economy economy) {&#10;        this.plugin = plugin;&#10;        this.homeManager = homeManager;&#10;        this.configManager = configManager;&#10;        this.guiManager = guiManager;&#10;        this.messageManager = messageManager;&#10;        this.economy = economy;&#10;    }&#10;&#10;    public void openHomesGUI(Player player) {&#10;        openHomesGUI(player, 1);&#10;    }&#10;&#10;    public void openHomesGUI(Player player, int page) {&#10;        playerPages.put(player.getUniqueId(), page);&#10;        String title = ChatColor.translateAlternateColorCodes('&amp;', guiManager.getHomeGUITitle());&#10;        Inventory inventory = Bukkit.createInventory(null, guiManager.getHomeGUISize(), title);&#10;&#10;        homeManager.getPlayerHomes(player).thenAccept(homes -&gt; {&#10;            Bukkit.getScheduler().runTask(plugin, () -&gt; {&#10;                int maxHomes = homeManager.getMaxHomesForPlayer(player);&#10;                int configMaxHomes = configManager.getMaxHomes(); // Maximum aus Config&#10;&#10;                // Berechne Paginierung basierend auf dem größeren Wert (entweder verfügbare Homes oder Config-Maximum)&#10;                int homesForPagination = Math.max(maxHomes, configMaxHomes);&#10;                int totalPages = calculateTotalPages(homesForPagination);&#10;&#10;                fillBorder(inventory);&#10;                inventory.setItem(53, createCloseItem());&#10;&#10;                // Add navigation items if needed (basierend auf Config-Maximum, nicht Spieler-Maximum)&#10;                if (totalPages &gt; 1) {&#10;                    if (page &gt; 1) {&#10;                        inventory.setItem(48, createPreviousPageItem()); // Slot 48 für vorherige Seite&#10;                    }&#10;                    if (page &lt; totalPages) {&#10;                        inventory.setItem(50, createNextPageItem()); // Slot 50 für nächste Seite&#10;                    }&#10;                }&#10;&#10;                // Info-Item immer anzeigen (ohne Seiteninformation)&#10;                inventory.setItem(49, createInfoItem(player, homes.size()));&#10;&#10;                addHomeItems(inventory, player, homes, page, maxHomes, configMaxHomes);&#10;                player.openInventory(inventory);&#10;            });&#10;        });&#10;    }&#10;&#10;    private int calculateTotalPages(int maxHomes) {&#10;        return (int) Math.ceil((double) maxHomes / HOMES_PER_PAGE);&#10;    }&#10;&#10;    private void fillBorder(Inventory inventory) {&#10;        ItemStack borderItem = createBorderItem();&#10;        for (int i = 0; i &lt; 9; i++) {&#10;            inventory.setItem(i, borderItem);&#10;            inventory.setItem(45 + i, borderItem);&#10;        }&#10;        for (int i = 9; i &lt; 45; i += 9) {&#10;            inventory.setItem(i, borderItem);&#10;            inventory.setItem(i + 8, borderItem);&#10;        }&#10;    }&#10;&#10;    private ItemStack createBorderItem() {&#10;        Material material = Material.valueOf(guiManager.getBorderMaterial());&#10;        ItemStack item = new ItemStack(material);&#10;        ItemMeta meta = item.getItemMeta();&#10;        meta.setDisplayName(ChatColor.translateAlternateColorCodes('&amp;', guiManager.getBorderName()));&#10;        List&lt;String&gt; lore = new ArrayList&lt;&gt;();&#10;        for (String line : guiManager.getBorderLore()) {&#10;            lore.add(ChatColor.translateAlternateColorCodes('&amp;', line));&#10;        }&#10;        meta.setLore(lore);&#10;        item.setItemMeta(meta);&#10;        return item;&#10;    }&#10;&#10;    private ItemStack createCloseItem() {&#10;        Material material = Material.valueOf(guiManager.getCloseMaterial());&#10;        ItemStack item = new ItemStack(material);&#10;        ItemMeta meta = item.getItemMeta();&#10;        meta.setDisplayName(ChatColor.translateAlternateColorCodes('&amp;', guiManager.getCloseName()));&#10;        List&lt;String&gt; lore = new ArrayList&lt;&gt;();&#10;        for (String line : guiManager.getCloseLore()) {&#10;            lore.add(ChatColor.translateAlternateColorCodes('&amp;', line));&#10;        }&#10;        meta.setLore(lore);&#10;        item.setItemMeta(meta);&#10;        return item;&#10;    }&#10;&#10;    private ItemStack createInfoItem(Player player, int usedHomes) {&#10;        Material material = Material.valueOf(guiManager.getInfoMaterial());&#10;        ItemStack item = new ItemStack(material);&#10;        ItemMeta meta = item.getItemMeta();&#10;        meta.setDisplayName(ChatColor.translateAlternateColorCodes('&amp;', guiManager.getInfoName()));&#10;        int maxHomes = homeManager.getMaxHomesForPlayer(player);&#10;        List&lt;String&gt; lore = new ArrayList&lt;&gt;();&#10;        for (String line : guiManager.getInfoLore()) {&#10;            line = line.replace(&quot;%used%&quot;, String.valueOf(usedHomes))&#10;                      .replace(&quot;%max%&quot;, String.valueOf(maxHomes));&#10;            lore.add(ChatColor.translateAlternateColorCodes('&amp;', line));&#10;        }&#10;        meta.setLore(lore);&#10;        item.setItemMeta(meta);&#10;        return item;&#10;    }&#10;&#10;    private void addHomeItems(Inventory inventory, Player player, List&lt;Home&gt; homes, int page, int maxHomes, int configMaxHomes) {&#10;        int startIndex = (page - 1) * HOMES_PER_PAGE;&#10;        int endIndex = Math.min(startIndex + HOMES_PER_PAGE, maxHomes);&#10;&#10;        // Get valid slots for home items (excluding border)&#10;        List&lt;Integer&gt; validSlots = getValidSlots();&#10;        int slotIndex = 0;&#10;&#10;        // Zeige alle verfügbaren Home-Slots für diese Seite&#10;        for (int i = startIndex; i &lt; endIndex &amp;&amp; slotIndex &lt; validSlots.size(); i++) {&#10;            if (i &lt; homes.size()) {&#10;                // Existierendes Home&#10;                Home home = homes.get(i);&#10;                inventory.setItem(validSlots.get(slotIndex), createHomeItem(home));&#10;            } else {&#10;                // Leerer Home-Slot (kann gesetzt werden)&#10;                inventory.setItem(validSlots.get(slotIndex), createEmptyHomeItem());&#10;            }&#10;            slotIndex++;&#10;        }&#10;&#10;        // Zeige &quot;Nächsten Home kaufen&quot; Button wenn Economy aktiviert ist und das Config-Maximum nicht erreicht ist&#10;        if (configManager.isEconomyEnabled() &amp;&amp; economy != null &amp;&amp; slotIndex &lt; validSlots.size()) {&#10;            int currentMaxHomes = homeManager.getMaxHomesForPlayer(player);&#10;&#10;            // Zeige Kauf-Button für den nächsten Home-Slot wenn das Config-Maximum noch nicht erreicht ist&#10;            if (currentMaxHomes &lt; configMaxHomes) {&#10;                // Berechne welcher Home-Slot als nächstes gekauft werden kann&#10;                int nextHomeSlot = currentMaxHomes + 1;&#10;&#10;                // Prüfe ob der nächste kaufbare Slot auf dieser Seite angezeigt werden soll&#10;                int nextSlotIndex = nextHomeSlot - 1; // 0-basiert&#10;                if (nextSlotIndex &gt;= startIndex &amp;&amp; nextSlotIndex &lt; startIndex + HOMES_PER_PAGE) {&#10;                    // Berechne die richtige Slot-Position für den Kauf-Button&#10;                    int buyButtonSlotIndex = nextSlotIndex - startIndex;&#10;                    if (buyButtonSlotIndex &lt; validSlots.size()) {&#10;                        inventory.setItem(validSlots.get(buyButtonSlotIndex), createBuyNextHomeItem(nextHomeSlot));&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private List&lt;Integer&gt; getValidSlots() {&#10;        List&lt;Integer&gt; slots = new ArrayList&lt;&gt;();&#10;        for (int row = 1; row &lt; 5; row++) { // Rows 1-4 (skip borders)&#10;            for (int col = 1; col &lt; 8; col++) { // Cols 1-7 (skip borders)&#10;                slots.add(row * 9 + col);&#10;            }&#10;        }&#10;        return slots;&#10;    }&#10;&#10;    private ItemStack createHomeItem(Home home) {&#10;        Material material = Material.valueOf(guiManager.getHomeSetMaterial());&#10;        ItemStack item = new ItemStack(material);&#10;        ItemMeta meta = item.getItemMeta();&#10;        String name = guiManager.getHomeSetName().replace(&quot;%name%&quot;, home.getName());&#10;        meta.setDisplayName(ChatColor.translateAlternateColorCodes('&amp;', name));&#10;        List&lt;String&gt; lore = new ArrayList&lt;&gt;();&#10;        for (String line : guiManager.getHomeSetLore()) {&#10;            lore.add(ChatColor.translateAlternateColorCodes('&amp;', line));&#10;        }&#10;        meta.setLore(lore);&#10;        item.setItemMeta(meta);&#10;        return item;&#10;    }&#10;&#10;    private ItemStack createEmptyHomeItem() {&#10;        Material material = Material.valueOf(guiManager.getHomeEmptyMaterial());&#10;        ItemStack item = new ItemStack(material);&#10;        ItemMeta meta = item.getItemMeta();&#10;        meta.setDisplayName(ChatColor.translateAlternateColorCodes('&amp;', guiManager.getHomeEmptyName()));&#10;        List&lt;String&gt; lore = new ArrayList&lt;&gt;();&#10;        for (String line : guiManager.getHomeEmptyLore()) {&#10;            lore.add(ChatColor.translateAlternateColorCodes('&amp;', line));&#10;        }&#10;        meta.setLore(lore);&#10;        item.setItemMeta(meta);&#10;        return item;&#10;    }&#10;&#10;    private ItemStack createLockedHomeItem() {&#10;        Material material = Material.valueOf(guiManager.getHomeLockedMaterial());&#10;        ItemStack item = new ItemStack(material);&#10;        ItemMeta meta = item.getItemMeta();&#10;        meta.setDisplayName(ChatColor.translateAlternateColorCodes('&amp;', guiManager.getHomeLockedName()));&#10;        double price = configManager.getHomePrice();&#10;        List&lt;String&gt; lore = new ArrayList&lt;&gt;();&#10;        for (String line : guiManager.getHomeLockedLore()) {&#10;            line = line.replace(&quot;%price%&quot;, String.valueOf((int) price));&#10;            lore.add(ChatColor.translateAlternateColorCodes('&amp;', line));&#10;        }&#10;        meta.setLore(lore);&#10;        item.setItemMeta(meta);&#10;        return item;&#10;    }&#10;&#10;    private ItemStack createPreviousPageItem() {&#10;        Material material = Material.valueOf(guiManager.getPreviousPageMaterial());&#10;        ItemStack item = new ItemStack(material);&#10;        ItemMeta meta = item.getItemMeta();&#10;        meta.setDisplayName(ChatColor.translateAlternateColorCodes('&amp;', guiManager.getPreviousPageName()));&#10;        List&lt;String&gt; lore = new ArrayList&lt;&gt;();&#10;        for (String line : guiManager.getPreviousPageLore()) {&#10;            lore.add(ChatColor.translateAlternateColorCodes('&amp;', line));&#10;        }&#10;        meta.setLore(lore);&#10;        item.setItemMeta(meta);&#10;        return item;&#10;    }&#10;&#10;    private ItemStack createNextPageItem() {&#10;        Material material = Material.valueOf(guiManager.getNextPageMaterial());&#10;        ItemStack item = new ItemStack(material);&#10;        ItemMeta meta = item.getItemMeta();&#10;        meta.setDisplayName(ChatColor.translateAlternateColorCodes('&amp;', guiManager.getNextPageName()));&#10;        List&lt;String&gt; lore = new ArrayList&lt;&gt;();&#10;        for (String line : guiManager.getNextPageLore()) {&#10;            lore.add(ChatColor.translateAlternateColorCodes('&amp;', line));&#10;        }&#10;        meta.setLore(lore);&#10;        item.setItemMeta(meta);&#10;        return item;&#10;    }&#10;&#10;    private ItemStack createBuyNextHomeItem(int homeSlotNumber) {&#10;        Material material = Material.valueOf(guiManager.getHomeLockedMaterial());&#10;        ItemStack item = new ItemStack(material);&#10;        ItemMeta meta = item.getItemMeta();&#10;&#10;        String name = guiManager.getHomeLockedName().replace(&quot;KAUFEN&quot;, &quot;SLOT &quot; + homeSlotNumber + &quot; KAUFEN&quot;);&#10;        meta.setDisplayName(ChatColor.translateAlternateColorCodes('&amp;', name));&#10;&#10;        double price = configManager.getHomePrice();&#10;        List&lt;String&gt; lore = new ArrayList&lt;&gt;();&#10;        for (String line : guiManager.getHomeLockedLore()) {&#10;            line = line.replace(&quot;%price%&quot;, String.valueOf((int) price))&#10;                      .replace(&quot;Home&quot;, &quot;Home-Slot &quot; + homeSlotNumber);&#10;            lore.add(ChatColor.translateAlternateColorCodes('&amp;', line));&#10;        }&#10;        meta.setLore(lore);&#10;        item.setItemMeta(meta);&#10;        return item;&#10;    }&#10;&#10;    public int getCurrentPage(Player player) {&#10;        return playerPages.getOrDefault(player.getUniqueId(), 1);&#10;    }&#10;&#10;    public void removePlayerPage(Player player) {&#10;        playerPages.remove(player.getUniqueId());&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/de/nicerecord/citybuildsystem/home/HomeGUIListener.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/de/nicerecord/citybuildsystem/home/HomeGUIListener.java" />
              <option name="originalContent" value="package de.nicerecord.citybuildsystem.home;&#10;&#10;import de.nicerecord.citybuildsystem.CitybuildSystem;&#10;import de.nicerecord.citybuildsystem.utils.ConfigManager;&#10;import de.nicerecord.citybuildsystem.utils.GUIManager;&#10;import de.nicerecord.citybuildsystem.utils.MessageManager;&#10;import net.milkbowl.vault.economy.Economy;&#10;import org.bukkit.Bukkit;&#10;import org.bukkit.ChatColor;&#10;import org.bukkit.Material;&#10;import org.bukkit.entity.Player;&#10;import org.bukkit.event.EventHandler;&#10;import org.bukkit.event.Listener;&#10;import org.bukkit.event.inventory.ClickType;&#10;import org.bukkit.event.inventory.InventoryClickEvent;&#10;import org.bukkit.event.player.AsyncPlayerChatEvent;&#10;import org.bukkit.inventory.ItemStack;&#10;import org.bukkit.inventory.meta.ItemMeta;&#10;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;import java.util.UUID;&#10;&#10;public class HomeGUIListener implements Listener {&#10;    private final CitybuildSystem plugin;&#10;    private final HomeManager homeManager;&#10;    private final ConfigManager configManager;&#10;    private final GUIManager guiManager;&#10;    private final MessageManager messageManager;&#10;    private final Economy economy;&#10;    private final SetHomeCommand setHomeCommand;&#10;    private final Map&lt;UUID, Boolean&gt; waitingForHomeName = new HashMap&lt;&gt;();&#10;&#10;    public HomeGUIListener(CitybuildSystem plugin, HomeManager homeManager, ConfigManager configManager,&#10;                          GUIManager guiManager, MessageManager messageManager, Economy economy, SetHomeCommand setHomeCommand) {&#10;        this.plugin = plugin;&#10;        this.homeManager = homeManager;&#10;        this.configManager = configManager;&#10;        this.guiManager = guiManager;&#10;        this.messageManager = messageManager;&#10;        this.economy = economy;&#10;        this.setHomeCommand = setHomeCommand;&#10;    }&#10;&#10;    @EventHandler&#10;    public void onInventoryClick(InventoryClickEvent event) {&#10;        if (!(event.getWhoClicked() instanceof Player)) return;&#10;&#10;        Player player = (Player) event.getWhoClicked();&#10;        String guiTitle = ChatColor.translateAlternateColorCodes('&amp;', guiManager.getHomeGUITitle());&#10;&#10;        if (!event.getView().getTitle().equals(guiTitle)) return;&#10;&#10;        event.setCancelled(true);&#10;&#10;        ItemStack clickedItem = event.getCurrentItem();&#10;        if (clickedItem == null || clickedItem.getType() == Material.AIR) return;&#10;&#10;        ItemMeta meta = clickedItem.getItemMeta();&#10;        if (meta == null || meta.getDisplayName() == null) return;&#10;&#10;        String displayName = meta.getDisplayName();&#10;&#10;        // Handle close button&#10;        if (displayName.equals(ChatColor.translateAlternateColorCodes('&amp;', guiManager.getCloseName()))) {&#10;            player.closeInventory();&#10;            return;&#10;        }&#10;&#10;        // Handle navigation - Previous page&#10;        if (displayName.equals(ChatColor.translateAlternateColorCodes('&amp;', guiManager.getPreviousPageName()))) {&#10;            HomeGUI homeGUI = new HomeGUI(plugin, homeManager, configManager, guiManager, messageManager, economy);&#10;            int currentPage = homeGUI.getCurrentPage(player);&#10;            if (currentPage &gt; 1) {&#10;                homeGUI.openHomesGUI(player, currentPage - 1);&#10;            }&#10;            return;&#10;        }&#10;&#10;        // Handle navigation - Next page&#10;        if (displayName.equals(ChatColor.translateAlternateColorCodes('&amp;', guiManager.getNextPageName()))) {&#10;            HomeGUI homeGUI = new HomeGUI(plugin, homeManager, configManager, guiManager, messageManager, economy);&#10;            int currentPage = homeGUI.getCurrentPage(player);&#10;            int configMaxHomes = configManager.getMaxHomes(); // Verwende Config-Maximum&#10;            int totalPages = (int) Math.ceil((double) configMaxHomes / 28); // HOMES_PER_PAGE&#10;            if (currentPage &lt; totalPages) {&#10;                homeGUI.openHomesGUI(player, currentPage + 1);&#10;            }&#10;            return;&#10;        }&#10;&#10;        // Handle info item (do nothing)&#10;        if (displayName.equals(ChatColor.translateAlternateColorCodes('&amp;', guiManager.getInfoName()))) {&#10;            return;&#10;        }&#10;&#10;        // Handle empty home slots&#10;        if (displayName.equals(ChatColor.translateAlternateColorCodes('&amp;', guiManager.getHomeEmptyName()))) {&#10;            player.closeInventory();&#10;&#10;            if (!hasPermissionToSetHome(player)) {&#10;                player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;general.no-permission&quot;)));&#10;                return;&#10;            }&#10;&#10;            waitingForHomeName.put(player.getUniqueId(), true);&#10;            player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;home.enter-name&quot;)));&#10;            player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;home.enter-name-cancel&quot;)));&#10;            return;&#10;        }&#10;&#10;        // Handle locked home slots (both old and new buy-next-home items)&#10;        if (displayName.equals(ChatColor.translateAlternateColorCodes('&amp;', guiManager.getHomeLockedName())) ||&#10;            displayName.contains(&quot;SLOT&quot;) &amp;&amp; displayName.contains(&quot;KAUFEN&quot;)) {&#10;            if (!configManager.isEconomyEnabled() || economy == null) {&#10;                player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;bank.economy-not-available&quot;)));&#10;                return;&#10;            }&#10;&#10;            int currentMaxHomes = homeManager.getMaxHomesForPlayer(player);&#10;            int configMaxHomes = configManager.getMaxHomes();&#10;&#10;            // Prüfe ob bereits das Maximum erreicht ist&#10;            if (currentMaxHomes &gt;= configMaxHomes) {&#10;                player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;home.max-homes-purchased&quot;)));&#10;                return;&#10;            }&#10;&#10;            double price = configManager.getHomePrice();&#10;&#10;            // Prüfe ob genug Geld vorhanden ist&#10;            if (economy.getBalance(player) &lt; price) {&#10;                player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                    messageManager.getMessage(&quot;home.insufficient-funds&quot;).replace(&quot;%price%&quot;, String.valueOf((int) price))));&#10;                return;&#10;            }&#10;&#10;            // Führe den Kauf durch&#10;            homeManager.purchaseHomeSlot(player, economy).thenAccept(success -&gt; {&#10;                Bukkit.getScheduler().runTask(plugin, () -&gt; {&#10;                    if (success) {&#10;                        player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                            messageManager.getMessage(&quot;home.purchase-success&quot;).replace(&quot;%price%&quot;, String.valueOf((int) price))));&#10;&#10;                        // Schließe das GUI und öffne es erneut um die Änderungen zu zeigen&#10;                        player.closeInventory();&#10;                        Bukkit.getScheduler().runTaskLater(plugin, () -&gt; {&#10;                            HomeGUI homeGUI = new HomeGUI(plugin, homeManager, configManager, guiManager, messageManager, economy);&#10;                            int currentPage = homeGUI.getCurrentPage(player);&#10;                            homeGUI.openHomesGUI(player, currentPage);&#10;                        }, 5L);&#10;                    } else {&#10;                        player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;home.purchase-failed&quot;)));&#10;                    }&#10;                });&#10;            });&#10;            return;&#10;        }&#10;&#10;        // Handle existing home items&#10;        if (displayName.startsWith(ChatColor.translateAlternateColorCodes('&amp;', guiManager.getHomeSetName().replace(&quot;%name%&quot;, &quot;&quot;)))) {&#10;            String homeName = ChatColor.stripColor(displayName).replace(&quot;HOME &quot;, &quot;&quot;);&#10;&#10;            if (event.getClick() == ClickType.LEFT) {&#10;                player.closeInventory();&#10;                plugin.getServer().dispatchCommand(player, &quot;home &quot; + homeName);&#10;            } else if (event.getClick() == ClickType.RIGHT) {&#10;                homeManager.deleteHome(player, homeName).thenAccept(success -&gt; {&#10;                    if (success) {&#10;                        player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                            messageManager.getMessage(&quot;home.delete-success&quot;).replace(&quot;%home%&quot;, homeName)));&#10;                        plugin.getServer().getScheduler().runTaskLater(plugin, () -&gt; {&#10;                            HomeGUI homeGUI = new HomeGUI(plugin, homeManager, configManager, guiManager, messageManager, economy);&#10;                            int currentPage = homeGUI.getCurrentPage(player);&#10;                            homeGUI.openHomesGUI(player, currentPage);&#10;                        }, 1L);&#10;                    } else {&#10;                        player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;general.error&quot;)));&#10;                    }&#10;                });&#10;            }&#10;        }&#10;    }&#10;&#10;    @EventHandler&#10;    public void onPlayerChat(AsyncPlayerChatEvent event) {&#10;        Player player = event.getPlayer();&#10;        UUID playerUUID = player.getUniqueId();&#10;&#10;        if (!waitingForHomeName.containsKey(playerUUID)) {&#10;            return;&#10;        }&#10;&#10;        event.setCancelled(true);&#10;        waitingForHomeName.remove(playerUUID);&#10;&#10;        String message = event.getMessage().trim();&#10;&#10;        if (message.equalsIgnoreCase(&quot;cancel&quot;)) {&#10;            player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;general.loading&quot;)));&#10;            return;&#10;        }&#10;&#10;        plugin.getServer().getScheduler().runTask(plugin, () -&gt; processSetHomeFromGUI(player, message));&#10;    }&#10;&#10;    private void processSetHomeFromGUI(Player player, String homeName) {&#10;        if (!homeManager.isValidHomeName(homeName)) {&#10;            player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;home.invalid-name&quot;)));&#10;            return;&#10;        }&#10;&#10;        if (!hasPermissionToSetHome(player)) {&#10;            player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;general.no-permission&quot;)));&#10;            return;&#10;        }&#10;&#10;        homeManager.getHome(player, homeName).thenAccept(existingHome -&gt; {&#10;            if (existingHome != null) {&#10;                player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                    messageManager.getMessage(&quot;home.already-exists&quot;).replace(&quot;%home%&quot;, homeName)));&#10;                return;&#10;            }&#10;&#10;            homeManager.getPlayerHomes(player).thenAccept(homes -&gt; {&#10;                int maxHomes = homeManager.getMaxHomesForPlayer(player);&#10;                if (homes.size() &gt;= maxHomes) {&#10;                    player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;home.max-homes-reached&quot;)));&#10;                    return;&#10;                }&#10;&#10;                homeManager.createHome(player, homeName, player.getLocation()).thenAccept(success -&gt; {&#10;                    if (success) {&#10;                        player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                            messageManager.getMessage(&quot;home.set-success&quot;).replace(&quot;%home%&quot;, homeName)));&#10;                    } else {&#10;                        player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;general.error&quot;)));&#10;                    }&#10;                });&#10;            });&#10;        });&#10;    }&#10;&#10;    private boolean hasPermissionToSetHome(Player player) {&#10;        if (player.hasPermission(&quot;cbsystem.home.set.*&quot;)) {&#10;            return true;&#10;        }&#10;&#10;        for (int i = 1; i &lt;= 28; i++) {&#10;            if (player.hasPermission(&quot;cbsystem.home.set.&quot; + i)) {&#10;                return true;&#10;            }&#10;        }&#10;&#10;        return false;&#10;    }&#10;&#10;    public boolean isWaitingForHomeName(UUID playerUUID) {&#10;        return waitingForHomeName.containsKey(playerUUID);&#10;    }&#10;&#10;    public void removeWaitingPlayer(UUID playerUUID) {&#10;        waitingForHomeName.remove(playerUUID);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package de.nicerecord.citybuildsystem.home;&#10;&#10;import de.nicerecord.citybuildsystem.CitybuildSystem;&#10;import de.nicerecord.citybuildsystem.utils.ConfigManager;&#10;import de.nicerecord.citybuildsystem.utils.GUIManager;&#10;import de.nicerecord.citybuildsystem.utils.MessageManager;&#10;import net.milkbowl.vault.economy.Economy;&#10;import org.bukkit.Bukkit;&#10;import org.bukkit.ChatColor;&#10;import org.bukkit.Material;&#10;import org.bukkit.entity.Player;&#10;import org.bukkit.event.EventHandler;&#10;import org.bukkit.event.Listener;&#10;import org.bukkit.event.inventory.ClickType;&#10;import org.bukkit.event.inventory.InventoryClickEvent;&#10;import org.bukkit.event.player.AsyncPlayerChatEvent;&#10;import org.bukkit.inventory.ItemStack;&#10;import org.bukkit.inventory.meta.ItemMeta;&#10;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;import java.util.UUID;&#10;&#10;public class HomeGUIListener implements Listener {&#10;    private final CitybuildSystem plugin;&#10;    private final HomeManager homeManager;&#10;    private final ConfigManager configManager;&#10;    private final GUIManager guiManager;&#10;    private final MessageManager messageManager;&#10;    private final Economy economy;&#10;    private final SetHomeCommand setHomeCommand;&#10;    private final Map&lt;UUID, Boolean&gt; waitingForHomeName = new HashMap&lt;&gt;();&#10;&#10;    public HomeGUIListener(CitybuildSystem plugin, HomeManager homeManager, ConfigManager configManager,&#10;                          GUIManager guiManager, MessageManager messageManager, Economy economy, SetHomeCommand setHomeCommand) {&#10;        this.plugin = plugin;&#10;        this.homeManager = homeManager;&#10;        this.configManager = configManager;&#10;        this.guiManager = guiManager;&#10;        this.messageManager = messageManager;&#10;        this.economy = economy;&#10;        this.setHomeCommand = setHomeCommand;&#10;    }&#10;&#10;    @EventHandler&#10;    public void onInventoryClick(InventoryClickEvent event) {&#10;        if (!(event.getWhoClicked() instanceof Player)) return;&#10;&#10;        Player player = (Player) event.getWhoClicked();&#10;        String guiTitle = ChatColor.translateAlternateColorCodes('&amp;', guiManager.getHomeGUITitle());&#10;&#10;        if (!event.getView().getTitle().equals(guiTitle)) return;&#10;&#10;        event.setCancelled(true);&#10;&#10;        ItemStack clickedItem = event.getCurrentItem();&#10;        if (clickedItem == null || clickedItem.getType() == Material.AIR) return;&#10;&#10;        ItemMeta meta = clickedItem.getItemMeta();&#10;        if (meta == null || meta.getDisplayName() == null) return;&#10;&#10;        String displayName = meta.getDisplayName();&#10;&#10;        // Handle close button&#10;        if (displayName.equals(ChatColor.translateAlternateColorCodes('&amp;', guiManager.getCloseName()))) {&#10;            player.closeInventory();&#10;            return;&#10;        }&#10;&#10;        // Handle navigation - Previous page&#10;        if (displayName.equals(ChatColor.translateAlternateColorCodes('&amp;', guiManager.getPreviousPageName()))) {&#10;            int currentPage = getCurrentPageFromInstance(player);&#10;            if (currentPage &gt; 1) {&#10;                HomeGUI homeGUI = new HomeGUI(plugin, homeManager, configManager, guiManager, messageManager, economy);&#10;                homeGUI.openHomesGUI(player, currentPage - 1);&#10;            }&#10;            return;&#10;        }&#10;&#10;        // Handle navigation - Next page&#10;        if (displayName.equals(ChatColor.translateAlternateColorCodes('&amp;', guiManager.getNextPageName()))) {&#10;            int currentPage = getCurrentPageFromInstance(player);&#10;            int configMaxHomes = configManager.getMaxHomes(); // Verwende Config-Maximum&#10;            int totalPages = (int) Math.ceil((double) configMaxHomes / 28); // HOMES_PER_PAGE&#10;            if (currentPage &lt; totalPages) {&#10;                HomeGUI homeGUI = new HomeGUI(plugin, homeManager, configManager, guiManager, messageManager, economy);&#10;                homeGUI.openHomesGUI(player, currentPage + 1);&#10;            }&#10;            return;&#10;        }&#10;&#10;        // Handle info item (do nothing)&#10;        if (displayName.equals(ChatColor.translateAlternateColorCodes('&amp;', guiManager.getInfoName()))) {&#10;            return;&#10;        }&#10;&#10;        // Handle empty home slots&#10;        if (displayName.equals(ChatColor.translateAlternateColorCodes('&amp;', guiManager.getHomeEmptyName()))) {&#10;            player.closeInventory();&#10;&#10;            if (!hasPermissionToSetHome(player)) {&#10;                player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;general.no-permission&quot;)));&#10;                return;&#10;            }&#10;&#10;            waitingForHomeName.put(player.getUniqueId(), true);&#10;            player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;home.enter-name&quot;)));&#10;            player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;home.enter-name-cancel&quot;)));&#10;            return;&#10;        }&#10;&#10;        // Handle locked home slots (both old and new buy-next-home items)&#10;        if (displayName.equals(ChatColor.translateAlternateColorCodes('&amp;', guiManager.getHomeLockedName())) ||&#10;            displayName.contains(&quot;SLOT&quot;) &amp;&amp; displayName.contains(&quot;KAUFEN&quot;)) {&#10;            if (!configManager.isEconomyEnabled() || economy == null) {&#10;                player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;bank.economy-not-available&quot;)));&#10;                return;&#10;            }&#10;&#10;            int currentMaxHomes = homeManager.getMaxHomesForPlayer(player);&#10;            int configMaxHomes = configManager.getMaxHomes();&#10;&#10;            // Prüfe ob bereits das Maximum erreicht ist&#10;            if (currentMaxHomes &gt;= configMaxHomes) {&#10;                player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;home.max-homes-purchased&quot;)));&#10;                return;&#10;            }&#10;&#10;            double price = configManager.getHomePrice();&#10;&#10;            // Prüfe ob genug Geld vorhanden ist&#10;            if (economy.getBalance(player) &lt; price) {&#10;                player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                    messageManager.getMessage(&quot;home.insufficient-funds&quot;).replace(&quot;%price%&quot;, String.valueOf((int) price))));&#10;                return;&#10;            }&#10;&#10;            // Führe den Kauf durch&#10;            homeManager.purchaseHomeSlot(player, economy).thenAccept(success -&gt; {&#10;                Bukkit.getScheduler().runTask(plugin, () -&gt; {&#10;                    if (success) {&#10;                        player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                            messageManager.getMessage(&quot;home.purchase-success&quot;).replace(&quot;%price%&quot;, String.valueOf((int) price))));&#10;&#10;                        // Schließe das GUI und öffne es erneut um die Änderungen zu zeigen&#10;                        player.closeInventory();&#10;                        Bukkit.getScheduler().runTaskLater(plugin, () -&gt; {&#10;                            HomeGUI homeGUI = new HomeGUI(plugin, homeManager, configManager, guiManager, messageManager, economy);&#10;                            int currentPage = homeGUI.getCurrentPage(player);&#10;                            homeGUI.openHomesGUI(player, currentPage);&#10;                        }, 5L);&#10;                    } else {&#10;                        player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;home.purchase-failed&quot;)));&#10;                    }&#10;                });&#10;            });&#10;            return;&#10;        }&#10;&#10;        // Handle existing home items&#10;        if (displayName.startsWith(ChatColor.translateAlternateColorCodes('&amp;', guiManager.getHomeSetName().replace(&quot;%name%&quot;, &quot;&quot;)))) {&#10;            String homeName = ChatColor.stripColor(displayName).replace(&quot;HOME &quot;, &quot;&quot;);&#10;&#10;            if (event.getClick() == ClickType.LEFT) {&#10;                player.closeInventory();&#10;                plugin.getServer().dispatchCommand(player, &quot;home &quot; + homeName);&#10;            } else if (event.getClick() == ClickType.RIGHT) {&#10;                homeManager.deleteHome(player, homeName).thenAccept(success -&gt; {&#10;                    if (success) {&#10;                        player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                            messageManager.getMessage(&quot;home.delete-success&quot;).replace(&quot;%home%&quot;, homeName)));&#10;                        plugin.getServer().getScheduler().runTaskLater(plugin, () -&gt; {&#10;                            HomeGUI homeGUI = new HomeGUI(plugin, homeManager, configManager, guiManager, messageManager, economy);&#10;                            int currentPage = homeGUI.getCurrentPage(player);&#10;                            homeGUI.openHomesGUI(player, currentPage);&#10;                        }, 1L);&#10;                    } else {&#10;                        player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;general.error&quot;)));&#10;                    }&#10;                });&#10;            }&#10;        }&#10;    }&#10;&#10;    @EventHandler&#10;    public void onPlayerChat(AsyncPlayerChatEvent event) {&#10;        Player player = event.getPlayer();&#10;        UUID playerUUID = player.getUniqueId();&#10;&#10;        if (!waitingForHomeName.containsKey(playerUUID)) {&#10;            return;&#10;        }&#10;&#10;        event.setCancelled(true);&#10;        waitingForHomeName.remove(playerUUID);&#10;&#10;        String message = event.getMessage().trim();&#10;&#10;        if (message.equalsIgnoreCase(&quot;cancel&quot;)) {&#10;            player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;general.loading&quot;)));&#10;            return;&#10;        }&#10;&#10;        plugin.getServer().getScheduler().runTask(plugin, () -&gt; processSetHomeFromGUI(player, message));&#10;    }&#10;&#10;    private void processSetHomeFromGUI(Player player, String homeName) {&#10;        if (!homeManager.isValidHomeName(homeName)) {&#10;            player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;home.invalid-name&quot;)));&#10;            return;&#10;        }&#10;&#10;        if (!hasPermissionToSetHome(player)) {&#10;            player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;general.no-permission&quot;)));&#10;            return;&#10;        }&#10;&#10;        homeManager.getHome(player, homeName).thenAccept(existingHome -&gt; {&#10;            if (existingHome != null) {&#10;                player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                    messageManager.getMessage(&quot;home.already-exists&quot;).replace(&quot;%home%&quot;, homeName)));&#10;                return;&#10;            }&#10;&#10;            homeManager.getPlayerHomes(player).thenAccept(homes -&gt; {&#10;                int maxHomes = homeManager.getMaxHomesForPlayer(player);&#10;                if (homes.size() &gt;= maxHomes) {&#10;                    player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;home.max-homes-reached&quot;)));&#10;                    return;&#10;                }&#10;&#10;                homeManager.createHome(player, homeName, player.getLocation()).thenAccept(success -&gt; {&#10;                    if (success) {&#10;                        player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                            messageManager.getMessage(&quot;home.set-success&quot;).replace(&quot;%home%&quot;, homeName)));&#10;                    } else {&#10;                        player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;general.error&quot;)));&#10;                    }&#10;                });&#10;            });&#10;        });&#10;    }&#10;&#10;    private boolean hasPermissionToSetHome(Player player) {&#10;        if (player.hasPermission(&quot;cbsystem.home.set.*&quot;)) {&#10;            return true;&#10;        }&#10;&#10;        for (int i = 1; i &lt;= 28; i++) {&#10;            if (player.hasPermission(&quot;cbsystem.home.set.&quot; + i)) {&#10;                return true;&#10;            }&#10;        }&#10;&#10;        return false;&#10;    }&#10;&#10;    public boolean isWaitingForHomeName(UUID playerUUID) {&#10;        return waitingForHomeName.containsKey(playerUUID);&#10;    }&#10;&#10;    public void removeWaitingPlayer(UUID playerUUID) {&#10;        waitingForHomeName.remove(playerUUID);&#10;    }&#10;&#10;    private int getCurrentPageFromInstance(Player player) {&#10;        // Verwende die statische Map aus der HomeGUI-Klasse&#10;        // Da playerPages jetzt static ist, können wir eine temporäre HomeGUI-Instanz erstellen&#10;        HomeGUI tempGUI = new HomeGUI(plugin, homeManager, configManager, guiManager, messageManager, economy);&#10;        return tempGUI.getCurrentPage(player);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/de/nicerecord/citybuildsystem/home/HomeManager.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/de/nicerecord/citybuildsystem/home/HomeManager.java" />
              <option name="originalContent" value="package de.nicerecord.citybuildsystem.home;&#10;&#10;import de.nicerecord.citybuildsystem.CitybuildSystem;&#10;import org.bukkit.Location;&#10;import org.bukkit.entity.Player;&#10;&#10;import java.io.File;&#10;import java.sql.*;&#10;import java.util.*;&#10;import java.util.concurrent.CompletableFuture;&#10;&#10;public class HomeManager {&#10;    private final CitybuildSystem plugin;&#10;    private Connection connection;&#10;&#10;    public HomeManager(CitybuildSystem plugin) {&#10;        this.plugin = plugin;&#10;        initDatabase();&#10;    }&#10;&#10;    private void initDatabase() {&#10;        try {&#10;            File dataFolder = plugin.getDataFolder();&#10;            if (!dataFolder.exists()) {&#10;                dataFolder.mkdirs();&#10;            }&#10;&#10;            String dbPath = new File(dataFolder, plugin.getConfig().getString(&quot;database.file&quot;)).getAbsolutePath();&#10;            connection = DriverManager.getConnection(&quot;jdbc:sqlite:&quot; + dbPath);&#10;&#10;            String createTable = &quot;CREATE TABLE IF NOT EXISTS homes (&quot; +&#10;                    &quot;id INTEGER PRIMARY KEY AUTOINCREMENT,&quot; +&#10;                    &quot;player_uuid TEXT NOT NULL,&quot; +&#10;                    &quot;name TEXT NOT NULL,&quot; +&#10;                    &quot;world TEXT NOT NULL,&quot; +&#10;                    &quot;x REAL NOT NULL,&quot; +&#10;                    &quot;y REAL NOT NULL,&quot; +&#10;                    &quot;z REAL NOT NULL,&quot; +&#10;                    &quot;yaw REAL NOT NULL,&quot; +&#10;                    &quot;pitch REAL NOT NULL,&quot; +&#10;                    &quot;UNIQUE(player_uuid, name)&quot; +&#10;                    &quot;)&quot;;&#10;&#10;            try (PreparedStatement stmt = connection.prepareStatement(createTable)) {&#10;                stmt.execute();&#10;            }&#10;        } catch (SQLException e) {&#10;            plugin.getLogger().severe(&quot;Fehler beim Initialisieren der Datenbank: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    public CompletableFuture&lt;Boolean&gt; createHome(Player player, String name, Location location) {&#10;        return CompletableFuture.supplyAsync(() -&gt; {&#10;            try {&#10;                String sql = &quot;INSERT INTO homes (player_uuid, name, world, x, y, z, yaw, pitch) VALUES (?, ?, ?, ?, ?, ?, ?, ?)&quot;;&#10;                try (PreparedStatement stmt = connection.prepareStatement(sql)) {&#10;                    stmt.setString(1, player.getUniqueId().toString());&#10;                    stmt.setString(2, name);&#10;                    stmt.setString(3, location.getWorld().getName());&#10;                    stmt.setDouble(4, location.getX());&#10;                    stmt.setDouble(5, location.getY());&#10;                    stmt.setDouble(6, location.getZ());&#10;                    stmt.setFloat(7, location.getYaw());&#10;                    stmt.setFloat(8, location.getPitch());&#10;                    stmt.executeUpdate();&#10;                    return true;&#10;                }&#10;            } catch (SQLException e) {&#10;                plugin.getLogger().severe(&quot;Fehler beim Erstellen des Homes: &quot; + e.getMessage());&#10;                return false;&#10;            }&#10;        });&#10;    }&#10;&#10;    public CompletableFuture&lt;Boolean&gt; deleteHome(Player player, String name) {&#10;        return CompletableFuture.supplyAsync(() -&gt; {&#10;            try {&#10;                String sql = &quot;DELETE FROM homes WHERE player_uuid = ? AND name = ?&quot;;&#10;                try (PreparedStatement stmt = connection.prepareStatement(sql)) {&#10;                    stmt.setString(1, player.getUniqueId().toString());&#10;                    stmt.setString(2, name);&#10;                    int affected = stmt.executeUpdate();&#10;                    return affected &gt; 0;&#10;                }&#10;            } catch (SQLException e) {&#10;                plugin.getLogger().severe(&quot;Fehler beim Löschen des Homes: &quot; + e.getMessage());&#10;                return false;&#10;            }&#10;        });&#10;    }&#10;&#10;    public CompletableFuture&lt;Home&gt; getHome(Player player, String name) {&#10;        return CompletableFuture.supplyAsync(() -&gt; {&#10;            try {&#10;                String sql = &quot;SELECT * FROM homes WHERE player_uuid = ? AND name = ?&quot;;&#10;                try (PreparedStatement stmt = connection.prepareStatement(sql)) {&#10;                    stmt.setString(1, player.getUniqueId().toString());&#10;                    stmt.setString(2, name);&#10;                    try (ResultSet rs = stmt.executeQuery()) {&#10;                        if (rs.next()) {&#10;                            return new Home(&#10;                                    player.getUniqueId(),&#10;                                    rs.getString(&quot;name&quot;),&#10;                                    rs.getString(&quot;world&quot;),&#10;                                    rs.getDouble(&quot;x&quot;),&#10;                                    rs.getDouble(&quot;y&quot;),&#10;                                    rs.getDouble(&quot;z&quot;),&#10;                                    rs.getFloat(&quot;yaw&quot;),&#10;                                    rs.getFloat(&quot;pitch&quot;)&#10;                            );&#10;                        }&#10;                    }&#10;                }&#10;            } catch (SQLException e) {&#10;                plugin.getLogger().severe(&quot;Fehler beim Abrufen des Homes: &quot; + e.getMessage());&#10;            }&#10;            return null;&#10;        });&#10;    }&#10;&#10;    public CompletableFuture&lt;List&lt;Home&gt;&gt; getPlayerHomes(Player player) {&#10;        return CompletableFuture.supplyAsync(() -&gt; {&#10;            List&lt;Home&gt; homes = new ArrayList&lt;&gt;();&#10;            try {&#10;                String sql = &quot;SELECT * FROM homes WHERE player_uuid = ? ORDER BY name&quot;;&#10;                try (PreparedStatement stmt = connection.prepareStatement(sql)) {&#10;                    stmt.setString(1, player.getUniqueId().toString());&#10;                    try (ResultSet rs = stmt.executeQuery()) {&#10;                        while (rs.next()) {&#10;                            homes.add(new Home(&#10;                                    player.getUniqueId(),&#10;                                    rs.getString(&quot;name&quot;),&#10;                                    rs.getString(&quot;world&quot;),&#10;                                    rs.getDouble(&quot;x&quot;),&#10;                                    rs.getDouble(&quot;y&quot;),&#10;                                    rs.getDouble(&quot;z&quot;),&#10;                                    rs.getFloat(&quot;yaw&quot;),&#10;                                    rs.getFloat(&quot;pitch&quot;)&#10;                            ));&#10;                        }&#10;                    }&#10;                }&#10;            } catch (SQLException e) {&#10;                plugin.getLogger().severe(&quot;Fehler beim Abrufen der Homes: &quot; + e.getMessage());&#10;            }&#10;            return homes;&#10;        });&#10;    }&#10;&#10;    public int getMaxHomesForPlayer(Player player) {&#10;        int maxHomes = 0;&#10;        for (int i = 1; i &lt;= plugin.getConfig().getInt(&quot;homes.max-homes&quot;); i++) {&#10;            if (player.hasPermission(&quot;cbsystem.home.set.&quot; + i) || player.hasPermission(&quot;cbsystem.home.set.*&quot;)) {&#10;                maxHomes = i;&#10;            }&#10;        }&#10;        return maxHomes;&#10;    }&#10;&#10;    public boolean isValidHomeName(String name) {&#10;        return name.matches(&quot;^[a-zA-Z0-9]+$&quot;) &amp;&amp; name.length() &lt;= 16;&#10;    }&#10;&#10;    public void close() {&#10;        try {&#10;            if (connection != null &amp;&amp; !connection.isClosed()) {&#10;                connection.close();&#10;            }&#10;        } catch (SQLException e) {&#10;            plugin.getLogger().severe(&quot;Fehler beim Schließen der Datenbankverbindung: &quot; + e.getMessage());&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package de.nicerecord.citybuildsystem.home;&#10;&#10;import de.nicerecord.citybuildsystem.CitybuildSystem;&#10;import net.milkbowl.vault.economy.Economy;&#10;import org.bukkit.Location;&#10;import org.bukkit.entity.Player;&#10;&#10;import java.io.File;&#10;import java.sql.*;&#10;import java.util.*;&#10;import java.util.concurrent.CompletableFuture;&#10;&#10;public class HomeManager {&#10;    private final CitybuildSystem plugin;&#10;    private Connection connection;&#10;&#10;    public HomeManager(CitybuildSystem plugin) {&#10;        this.plugin = plugin;&#10;        initDatabase();&#10;    }&#10;&#10;    private void initDatabase() {&#10;        try {&#10;            File dataFolder = plugin.getDataFolder();&#10;            if (!dataFolder.exists()) {&#10;                dataFolder.mkdirs();&#10;            }&#10;&#10;            String dbPath = new File(dataFolder, plugin.getConfig().getString(&quot;database.file&quot;)).getAbsolutePath();&#10;            connection = DriverManager.getConnection(&quot;jdbc:sqlite:&quot; + dbPath);&#10;&#10;            String createTable = &quot;CREATE TABLE IF NOT EXISTS homes (&quot; +&#10;                    &quot;id INTEGER PRIMARY KEY AUTOINCREMENT,&quot; +&#10;                    &quot;player_uuid TEXT NOT NULL,&quot; +&#10;                    &quot;name TEXT NOT NULL,&quot; +&#10;                    &quot;world TEXT NOT NULL,&quot; +&#10;                    &quot;x REAL NOT NULL,&quot; +&#10;                    &quot;y REAL NOT NULL,&quot; +&#10;                    &quot;z REAL NOT NULL,&quot; +&#10;                    &quot;yaw REAL NOT NULL,&quot; +&#10;                    &quot;pitch REAL NOT NULL,&quot; +&#10;                    &quot;UNIQUE(player_uuid, name)&quot; +&#10;                    &quot;)&quot;;&#10;&#10;            try (PreparedStatement stmt = connection.prepareStatement(createTable)) {&#10;                stmt.execute();&#10;            }&#10;        } catch (SQLException e) {&#10;            plugin.getLogger().severe(&quot;Fehler beim Initialisieren der Datenbank: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    public CompletableFuture&lt;Boolean&gt; createHome(Player player, String name, Location location) {&#10;        return CompletableFuture.supplyAsync(() -&gt; {&#10;            try {&#10;                String sql = &quot;INSERT INTO homes (player_uuid, name, world, x, y, z, yaw, pitch) VALUES (?, ?, ?, ?, ?, ?, ?, ?)&quot;;&#10;                try (PreparedStatement stmt = connection.prepareStatement(sql)) {&#10;                    stmt.setString(1, player.getUniqueId().toString());&#10;                    stmt.setString(2, name);&#10;                    stmt.setString(3, location.getWorld().getName());&#10;                    stmt.setDouble(4, location.getX());&#10;                    stmt.setDouble(5, location.getY());&#10;                    stmt.setDouble(6, location.getZ());&#10;                    stmt.setFloat(7, location.getYaw());&#10;                    stmt.setFloat(8, location.getPitch());&#10;                    stmt.executeUpdate();&#10;                    return true;&#10;                }&#10;            } catch (SQLException e) {&#10;                plugin.getLogger().severe(&quot;Fehler beim Erstellen des Homes: &quot; + e.getMessage());&#10;                return false;&#10;            }&#10;        });&#10;    }&#10;&#10;    public CompletableFuture&lt;Boolean&gt; deleteHome(Player player, String name) {&#10;        return CompletableFuture.supplyAsync(() -&gt; {&#10;            try {&#10;                String sql = &quot;DELETE FROM homes WHERE player_uuid = ? AND name = ?&quot;;&#10;                try (PreparedStatement stmt = connection.prepareStatement(sql)) {&#10;                    stmt.setString(1, player.getUniqueId().toString());&#10;                    stmt.setString(2, name);&#10;                    int affected = stmt.executeUpdate();&#10;                    return affected &gt; 0;&#10;                }&#10;            } catch (SQLException e) {&#10;                plugin.getLogger().severe(&quot;Fehler beim Löschen des Homes: &quot; + e.getMessage());&#10;                return false;&#10;            }&#10;        });&#10;    }&#10;&#10;    public CompletableFuture&lt;Home&gt; getHome(Player player, String name) {&#10;        return CompletableFuture.supplyAsync(() -&gt; {&#10;            try {&#10;                String sql = &quot;SELECT * FROM homes WHERE player_uuid = ? AND name = ?&quot;;&#10;                try (PreparedStatement stmt = connection.prepareStatement(sql)) {&#10;                    stmt.setString(1, player.getUniqueId().toString());&#10;                    stmt.setString(2, name);&#10;                    try (ResultSet rs = stmt.executeQuery()) {&#10;                        if (rs.next()) {&#10;                            return new Home(&#10;                                    player.getUniqueId(),&#10;                                    rs.getString(&quot;name&quot;),&#10;                                    rs.getString(&quot;world&quot;),&#10;                                    rs.getDouble(&quot;x&quot;),&#10;                                    rs.getDouble(&quot;y&quot;),&#10;                                    rs.getDouble(&quot;z&quot;),&#10;                                    rs.getFloat(&quot;yaw&quot;),&#10;                                    rs.getFloat(&quot;pitch&quot;)&#10;                            );&#10;                        }&#10;                    }&#10;                }&#10;            } catch (SQLException e) {&#10;                plugin.getLogger().severe(&quot;Fehler beim Abrufen des Homes: &quot; + e.getMessage());&#10;            }&#10;            return null;&#10;        });&#10;    }&#10;&#10;    public CompletableFuture&lt;List&lt;Home&gt;&gt; getPlayerHomes(Player player) {&#10;        return CompletableFuture.supplyAsync(() -&gt; {&#10;            List&lt;Home&gt; homes = new ArrayList&lt;&gt;();&#10;            try {&#10;                String sql = &quot;SELECT * FROM homes WHERE player_uuid = ? ORDER BY name&quot;;&#10;                try (PreparedStatement stmt = connection.prepareStatement(sql)) {&#10;                    stmt.setString(1, player.getUniqueId().toString());&#10;                    try (ResultSet rs = stmt.executeQuery()) {&#10;                        while (rs.next()) {&#10;                            homes.add(new Home(&#10;                                    player.getUniqueId(),&#10;                                    rs.getString(&quot;name&quot;),&#10;                                    rs.getString(&quot;world&quot;),&#10;                                    rs.getDouble(&quot;x&quot;),&#10;                                    rs.getDouble(&quot;y&quot;),&#10;                                    rs.getDouble(&quot;z&quot;),&#10;                                    rs.getFloat(&quot;yaw&quot;),&#10;                                    rs.getFloat(&quot;pitch&quot;)&#10;                            ));&#10;                        }&#10;                    }&#10;                }&#10;            } catch (SQLException e) {&#10;                plugin.getLogger().severe(&quot;Fehler beim Abrufen der Homes: &quot; + e.getMessage());&#10;            }&#10;            return homes;&#10;        });&#10;    }&#10;&#10;    public int getMaxHomesForPlayer(Player player) {&#10;        int maxHomes = 0;&#10;        for (int i = 1; i &lt;= plugin.getConfig().getInt(&quot;homes.max-homes&quot;); i++) {&#10;            if (player.hasPermission(&quot;cbsystem.home.set.&quot; + i) || player.hasPermission(&quot;cbsystem.home.set.*&quot;)) {&#10;                maxHomes = i;&#10;            }&#10;        }&#10;        return maxHomes;&#10;    }&#10;&#10;    public CompletableFuture&lt;Boolean&gt; purchaseHomeSlot(Player player, Economy economy) {&#10;        return CompletableFuture.supplyAsync(() -&gt; {&#10;            try {&#10;                // Aktuelle maximale Homes des Spielers&#10;                int currentMaxHomes = getMaxHomesForPlayer(player);&#10;                int configMaxHomes = plugin.getConfig().getInt(&quot;homes.max-homes&quot;);&#10;&#10;                // Prüfe ob Spieler bereits das Maximum erreicht hat&#10;                if (currentMaxHomes &gt;= configMaxHomes) {&#10;                    return false;&#10;                }&#10;&#10;                // Berechne den Preis für das nächste Home-Slot&#10;                double price = plugin.getConfig().getDouble(&quot;homes.home-price&quot;);&#10;&#10;                // Prüfe ob Spieler genug Geld hat&#10;                if (economy.getBalance(player) &lt; price) {&#10;                    return false;&#10;                }&#10;&#10;                // Ziehe das Geld ab&#10;                if (!economy.withdrawPlayer(player, price).transactionSuccess()) {&#10;                    return false;&#10;                }&#10;&#10;                // Gebe dem Spieler die Berechtigung für ein zusätzliches Home&#10;                int nextHomeSlot = currentMaxHomes + 1;&#10;&#10;                // Verwende LuckPerms oder PermissionsEx API wenn verfügbar&#10;                // Für dieses Beispiel verwenden wir den Bukkit Permission Manager (temporär)&#10;                player.addAttachment(plugin, &quot;cbsystem.home.set.&quot; + nextHomeSlot, true);&#10;&#10;                // TODO: Für permanente Berechtigungen sollte hier eine Integration&#10;                // mit LuckPerms oder einem anderen Permission-Plugin erfolgen&#10;&#10;                return true;&#10;            } catch (Exception e) {&#10;                plugin.getLogger().severe(&quot;Fehler beim Kauf eines Home-Slots: &quot; + e.getMessage());&#10;                return false;&#10;            }&#10;        });&#10;    }&#10;&#10;    public int getNextHomeSlotPrice() {&#10;        return (int) plugin.getConfig().getDouble(&quot;homes.home-price&quot;);&#10;    }&#10;&#10;    public boolean isValidHomeName(String name) {&#10;        return name.matches(&quot;^[a-zA-Z0-9]+$&quot;) &amp;&amp; name.length() &lt;= 16;&#10;    }&#10;&#10;    public void close() {&#10;        try {&#10;            if (connection != null &amp;&amp; !connection.isClosed()) {&#10;                connection.close();&#10;            }&#10;        } catch (SQLException e) {&#10;            plugin.getLogger().severe(&quot;Fehler beim Schließen der Datenbankverbindung: &quot; + e.getMessage());&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/de/nicerecord/citybuildsystem/manager/PlayerManager.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/de/nicerecord/citybuildsystem/manager/PlayerManager.java" />
              <option name="updatedContent" value="package de.nicerecord.citybuildsystem.manager;&#10;&#10;import de.nicerecord.citybuildsystem.CitybuildSystem;&#10;import de.nicerecord.citybuildsystem.data.CityPlayer;&#10;import org.bukkit.Location;&#10;import org.bukkit.configuration.file.FileConfiguration;&#10;import org.bukkit.configuration.file.YamlConfiguration;&#10;import org.bukkit.entity.Player;&#10;&#10;import java.io.File;&#10;import java.io.IOException;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;import java.util.UUID;&#10;&#10;public class PlayerManager {&#10;    &#10;    private final CitybuildSystem plugin;&#10;    private final Map&lt;UUID, CityPlayer&gt; players;&#10;    private final File playersFile;&#10;    private FileConfiguration playersConfig;&#10;    &#10;    public PlayerManager(CitybuildSystem plugin) {&#10;        this.plugin = plugin;&#10;        this.players = new HashMap&lt;&gt;();&#10;        this.playersFile = new File(plugin.getDataFolder(), &quot;players.yml&quot;);&#10;        &#10;        createPlayersFile();&#10;        loadPlayers();&#10;    }&#10;    &#10;    private void createPlayersFile() {&#10;        if (!playersFile.exists()) {&#10;            playersFile.getParentFile().mkdirs();&#10;            try {&#10;                playersFile.createNewFile();&#10;            } catch (IOException e) {&#10;                plugin.getLogger().severe(&quot;Fehler beim Erstellen der players.yml: &quot; + e.getMessage());&#10;            }&#10;        }&#10;        playersConfig = YamlConfiguration.loadConfiguration(playersFile);&#10;    }&#10;    &#10;    private void loadPlayers() {&#10;        if (!playersConfig.contains(&quot;players&quot;)) return;&#10;        &#10;        for (String playerId : playersConfig.getConfigurationSection(&quot;players&quot;).getKeys(false)) {&#10;            UUID uuid = UUID.fromString(playerId);&#10;            String path = &quot;players.&quot; + playerId;&#10;            &#10;            CityPlayer cityPlayer = new CityPlayer(uuid);&#10;            &#10;            // Homes laden&#10;            if (playersConfig.contains(path + &quot;.homes&quot;)) {&#10;                for (String homeName : playersConfig.getConfigurationSection(path + &quot;.homes&quot;).getKeys(false)) {&#10;                    String homePath = path + &quot;.homes.&quot; + homeName;&#10;                    Location home = new Location(&#10;                        plugin.getServer().getWorld(playersConfig.getString(homePath + &quot;.world&quot;)),&#10;                        playersConfig.getDouble(homePath + &quot;.x&quot;),&#10;                        playersConfig.getDouble(homePath + &quot;.y&quot;),&#10;                        playersConfig.getDouble(homePath + &quot;.z&quot;),&#10;                        (float) playersConfig.getDouble(homePath + &quot;.yaw&quot;),&#10;                        (float) playersConfig.getDouble(homePath + &quot;.pitch&quot;)&#10;                    );&#10;                    cityPlayer.setHome(homeName, home);&#10;                }&#10;            }&#10;            &#10;            players.put(uuid, cityPlayer);&#10;        }&#10;    }&#10;    &#10;    public void saveAllPlayers() {&#10;        for (CityPlayer player : players.values()) {&#10;            savePlayer(player);&#10;        }&#10;        try {&#10;            playersConfig.save(playersFile);&#10;        } catch (IOException e) {&#10;            plugin.getLogger().severe(&quot;Fehler beim Speichern der Spielerdaten: &quot; + e.getMessage());&#10;        }&#10;    }&#10;    &#10;    private void savePlayer(CityPlayer cityPlayer) {&#10;        String path = &quot;players.&quot; + cityPlayer.getUuid().toString();&#10;        &#10;        // Homes speichern&#10;        for (Map.Entry&lt;String, Location&gt; entry : cityPlayer.getHomes().entrySet()) {&#10;            String homePath = path + &quot;.homes.&quot; + entry.getKey();&#10;            Location home = entry.getValue();&#10;            &#10;            playersConfig.set(homePath + &quot;.world&quot;, home.getWorld().getName());&#10;            playersConfig.set(homePath + &quot;.x&quot;, home.getX());&#10;            playersConfig.set(homePath + &quot;.y&quot;, home.getY());&#10;            playersConfig.set(homePath + &quot;.z&quot;, home.getZ());&#10;            playersConfig.set(homePath + &quot;.yaw&quot;, home.getYaw());&#10;            playersConfig.set(homePath + &quot;.pitch&quot;, home.getPitch());&#10;        }&#10;    }&#10;    &#10;    public CityPlayer getCityPlayer(UUID uuid) {&#10;        return players.computeIfAbsent(uuid, CityPlayer::new);&#10;    }&#10;    &#10;    public CityPlayer getCityPlayer(Player player) {&#10;        return getCityPlayer(player.getUniqueId());&#10;    }&#10;    &#10;    public void setHome(Player player, String homeName, Location location) {&#10;        CityPlayer cityPlayer = getCityPlayer(player);&#10;        cityPlayer.setHome(homeName, location);&#10;        savePlayer(cityPlayer);&#10;    }&#10;    &#10;    public Location getHome(Player player, String homeName) {&#10;        CityPlayer cityPlayer = getCityPlayer(player);&#10;        return cityPlayer.getHome(homeName);&#10;    }&#10;    &#10;    public boolean hasHome(Player player, String homeName) {&#10;        CityPlayer cityPlayer = getCityPlayer(player);&#10;        return cityPlayer.hasHome(homeName);&#10;    }&#10;    &#10;    public void removeHome(Player player, String homeName) {&#10;        CityPlayer cityPlayer = getCityPlayer(player);&#10;        cityPlayer.removeHome(homeName);&#10;        savePlayer(cityPlayer);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/de/nicerecord/citybuildsystem/manager/PlotManager.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/de/nicerecord/citybuildsystem/manager/PlotManager.java" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/de/nicerecord/citybuildsystem/teleport/TpHereCommand.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/de/nicerecord/citybuildsystem/teleport/TpHereCommand.java" />
              <option name="originalContent" value="package de.nicerecord.citybuildsystem.teleport;&#10;&#10;import de.nicerecord.citybuildsystem.CitybuildSystem;&#10;import de.nicerecord.citybuildsystem.utils.MessageManager;&#10;import org.bukkit.ChatColor;&#10;import org.bukkit.command.Command;&#10;import org.bukkit.command.CommandExecutor;&#10;import org.bukkit.command.CommandSender;&#10;import org.bukkit.entity.Player;&#10;&#10;public class TpHereCommand implements CommandExecutor {&#10;    private final CitybuildSystem plugin;&#10;    private final MessageManager messageManager;&#10;&#10;    public TpHereCommand(CitybuildSystem plugin, MessageManager messageManager) {&#10;        this.plugin = plugin;&#10;        this.messageManager = messageManager;&#10;    }&#10;&#10;    @Override&#10;    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {&#10;        if (!(sender instanceof Player)) {&#10;            sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;general.only-players&quot;)));&#10;            return true;&#10;        }&#10;&#10;        Player player = (Player) sender;&#10;&#10;        if (!player.hasPermission(&quot;cbsystem.tphere&quot;)) {&#10;            player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;general.no-permission&quot;)));&#10;            return true;&#10;        }&#10;&#10;        if (args.length != 1) {&#10;            player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;commands.tphere.usage&quot;)));&#10;            return true;&#10;        }&#10;&#10;        Player target = plugin.getServer().getPlayer(args[0]);&#10;        if (target == null) {&#10;            player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#10;                messageManager.getMessage(&quot;general.player-not-found&quot;).replace(&quot;%player%&quot;, args[0])));&#10;            return true;&#10;        }&#10;&#10;&#10;        return true;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package de.nicerecord.citybuildsystem.teleport;&#13;&#10;&#13;&#10;import de.nicerecord.citybuildsystem.CitybuildSystem;&#13;&#10;import de.nicerecord.citybuildsystem.utils.MessageManager;&#13;&#10;import org.bukkit.ChatColor;&#13;&#10;import org.bukkit.command.Command;&#13;&#10;import org.bukkit.command.CommandExecutor;&#13;&#10;import org.bukkit.command.CommandSender;&#13;&#10;import org.bukkit.entity.Player;&#13;&#10;&#13;&#10;public class TpHereCommand implements CommandExecutor {&#13;&#10;    private final CitybuildSystem plugin;&#13;&#10;    private final MessageManager messageManager;&#13;&#10;&#13;&#10;    public TpHereCommand(CitybuildSystem plugin, MessageManager messageManager) {&#13;&#10;        this.plugin = plugin;&#13;&#10;        this.messageManager = messageManager;&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {&#13;&#10;        if (!(sender instanceof Player)) {&#13;&#10;            sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;general.only-players&quot;)));&#13;&#10;            return true;&#13;&#10;        }&#13;&#10;&#13;&#10;        Player player = (Player) sender;&#13;&#10;&#13;&#10;        if (!player.hasPermission(&quot;cbsystem.tphere&quot;)) {&#13;&#10;            player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;general.no-permission&quot;)));&#13;&#10;            return true;&#13;&#10;        }&#13;&#10;&#13;&#10;        if (args.length != 1) {&#13;&#10;            player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;commands.tphere.usage&quot;)));&#13;&#10;            return true;&#13;&#10;        }&#13;&#10;&#13;&#10;        Player target = plugin.getServer().getPlayer(args[0]);&#13;&#10;        if (target == null) {&#13;&#10;            player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#13;&#10;                messageManager.getMessage(&quot;general.player-not-found&quot;).replace(&quot;%player%&quot;, args[0])));&#13;&#10;            return true;&#13;&#10;        }&#13;&#10;&#13;&#10;        if (target.equals(player)) {&#13;&#10;            player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;social.message-self&quot;)));&#13;&#10;            return true;&#13;&#10;        }&#13;&#10;&#13;&#10;        target.teleport(player.getLocation());&#13;&#10;        player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#13;&#10;            messageManager.getMessage(&quot;teleport.tphere-teleported&quot;).replace(&quot;%player%&quot;, target.getName())));&#13;&#10;        target.sendMessage(ChatColor.translateAlternateColorCodes('&amp;',&#13;&#10;            messageManager.getMessage(&quot;teleport.tphere-teleported-by&quot;).replace(&quot;%player%&quot;, player.getName())));&#13;&#10;&#13;&#10;        return true;&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/de/nicerecord/citybuildsystem/teleport/TpaManager.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/de/nicerecord/citybuildsystem/teleport/TpaManager.java" />
              <option name="originalContent" value="package de.nicerecord.citybuildsystem.teleport;&#10;&#10;import de.nicerecord.citybuildsystem.CitybuildSystem;&#10;import org.bukkit.entity.Player;&#10;import org.bukkit.scheduler.BukkitRunnable;&#10;&#10;import java.util.*;&#10;import java.util.concurrent.ConcurrentHashMap;&#10;&#10;public class TpaManager {&#10;    private final CitybuildSystem plugin;&#10;    private final Map&lt;UUID, TpaRequest&gt; pendingRequests = new ConcurrentHashMap&lt;&gt;();&#10;    private final Set&lt;UUID&gt; tpaDisabledPlayers = ConcurrentHashMap.newKeySet();&#10;    private BukkitRunnable cleanupTask;&#10;&#10;    public TpaManager(CitybuildSystem plugin) {&#10;        this.plugin = plugin;&#10;        startCleanupTask();&#10;    }&#10;&#10;    public boolean sendTpaRequest(Player requester, Player target, TpaRequest.TpaType type) {&#10;        // Check if target has TPA disabled&#10;        // Check if target has TPA disabled&#10;        if (tpaDisabledPlayers.contains(target.getUniqueId())) {&#10;            return false;&#10;        }&#10;        // Remove any existing request from this requester&#10;&#10;        // Create new request&#10;        // Remove any existing request from this requester&#10;        pendingRequests.remove(requester.getUniqueId());&#10;&#10;        // Create new request&#10;        TpaRequest request = new TpaRequest(requester, target, type);&#10;        pendingRequests.put(requester.getUniqueId(), request);&#10;&#10;        return true;&#10;    }&#10;&#10;    public TpaRequest getPendingRequest(UUID playerUUID) {&#10;        return pendingRequests.get(playerUUID);&#10;    }&#10;&#10;    public TpaRequest getRequestForTarget(UUID targetUUID) {&#10;        for (TpaRequest request : pendingRequests.values()) {&#10;            if (request.getTarget().equals(targetUUID)) {&#10;                return request;&#10;            }&#10;        }&#10;        return null;&#10;    }&#10;&#10;    public void removeRequest(UUID requesterUUID) {&#10;        pendingRequests.remove(requesterUUID);&#10;    }&#10;&#10;    public void removePendingRequestsForTarget(UUID targetUUID) {&#10;        pendingRequests.entrySet().removeIf(entry -&gt; entry.getValue().getTarget().equals(targetUUID));&#10;    }&#10;&#10;    public boolean isTpaEnabled(UUID playerUUID) {&#10;        return !tpaDisabledPlayers.contains(playerUUID);&#10;    }&#10;&#10;            // Remove all pending requests for this player&#10;    public void toggleTpa(UUID playerUUID) {&#10;        if (tpaDisabledPlayers.contains(playerUUID)) {&#10;            tpaDisabledPlayers.remove(playerUUID);&#10;        } else {&#10;            tpaDisabledPlayers.add(playerUUID);&#10;            // Remove all pending requests for this player&#10;            removePendingRequestsForTarget(playerUUID);&#10;        }&#10;    }&#10;&#10;    private void startCleanupTask() {&#10;        cleanupTask = new BukkitRunnable() {&#10;        // Run every 10 seconds&#10;            @Override&#10;            public void run() {&#10;                int timeoutSeconds = plugin.getConfigManager().getTpaTimeout();&#10;                pendingRequests.entrySet().removeIf(entry -&gt;&#10;                    entry.getValue().isExpired(timeoutSeconds));&#10;            }&#10;        };&#10;        // Run every 10 seconds&#10;        cleanupTask.runTaskTimer(plugin, 200L, 200L);&#10;    }&#10;&#10;    public void shutdown() {&#10;        if (cleanupTask != null) {&#10;            cleanupTask.cancel();&#10;        }&#10;    }&#10;&#10;    public Collection&lt;TpaRequest&gt; getAllRequests() {&#10;        return pendingRequests.values();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package de.nicerecord.citybuildsystem.teleport;&#13;&#10;&#13;&#10;import de.nicerecord.citybuildsystem.CitybuildSystem;&#13;&#10;import org.bukkit.entity.Player;&#13;&#10;import org.bukkit.scheduler.BukkitRunnable;&#13;&#10;&#13;&#10;import java.util.*;&#13;&#10;import java.util.concurrent.ConcurrentHashMap;&#13;&#10;&#13;&#10;public class TpaManager {&#13;&#10;    private final CitybuildSystem plugin;&#13;&#10;    private final Map&lt;UUID, TpaRequest&gt; pendingRequests = new ConcurrentHashMap&lt;&gt;();&#13;&#10;    private final Set&lt;UUID&gt; tpaDisabledPlayers = ConcurrentHashMap.newKeySet();&#13;&#10;    private BukkitRunnable cleanupTask;&#13;&#10;&#13;&#10;    public TpaManager(CitybuildSystem plugin) {&#13;&#10;        this.plugin = plugin;&#13;&#10;        startCleanupTask();&#13;&#10;    }&#13;&#10;&#13;&#10;    public boolean sendTpaRequest(Player requester, Player target, TpaRequest.TpaType type) {&#13;&#10;        if (tpaDisabledPlayers.contains(target.getUniqueId())) {&#13;&#10;            return false;&#13;&#10;        }&#13;&#10;&#13;&#10;        pendingRequests.remove(requester.getUniqueId());&#13;&#10;&#13;&#10;        TpaRequest request = new TpaRequest(requester, target, type);&#13;&#10;        pendingRequests.put(requester.getUniqueId(), request);&#13;&#10;&#13;&#10;        return true;&#13;&#10;    }&#13;&#10;&#13;&#10;    public TpaRequest getPendingRequest(UUID playerUUID) {&#13;&#10;        return pendingRequests.get(playerUUID);&#13;&#10;    }&#13;&#10;&#13;&#10;    public TpaRequest getRequestForTarget(UUID targetUUID) {&#13;&#10;        for (TpaRequest request : pendingRequests.values()) {&#13;&#10;            if (request.getTarget().equals(targetUUID)) {&#13;&#10;                return request;&#13;&#10;            }&#13;&#10;        }&#13;&#10;        return null;&#13;&#10;    }&#13;&#10;&#13;&#10;    public void removeRequest(UUID requesterUUID) {&#13;&#10;        pendingRequests.remove(requesterUUID);&#13;&#10;    }&#13;&#10;&#13;&#10;    public void removePendingRequestsForTarget(UUID targetUUID) {&#13;&#10;        pendingRequests.entrySet().removeIf(entry -&gt; entry.getValue().getTarget().equals(targetUUID));&#13;&#10;    }&#13;&#10;&#13;&#10;    public boolean isTpaEnabled(UUID playerUUID) {&#13;&#10;        return !tpaDisabledPlayers.contains(playerUUID);&#13;&#10;    }&#13;&#10;&#13;&#10;    public void toggleTpa(UUID playerUUID) {&#13;&#10;        if (tpaDisabledPlayers.contains(playerUUID)) {&#13;&#10;            tpaDisabledPlayers.remove(playerUUID);&#13;&#10;        } else {&#13;&#10;            tpaDisabledPlayers.add(playerUUID);&#13;&#10;            removePendingRequestsForTarget(playerUUID);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void startCleanupTask() {&#13;&#10;        cleanupTask = new BukkitRunnable() {&#13;&#10;            @Override&#13;&#10;            public void run() {&#13;&#10;                int timeoutSeconds = plugin.getConfigManager().getTpaTimeout();&#13;&#10;                pendingRequests.entrySet().removeIf(entry -&gt;&#13;&#10;                    entry.getValue().isExpired(timeoutSeconds));&#13;&#10;            }&#13;&#10;        };&#13;&#10;        cleanupTask.runTaskTimer(plugin, 200L, 200L);&#13;&#10;    }&#13;&#10;&#13;&#10;    public void shutdown() {&#13;&#10;        if (cleanupTask != null) {&#13;&#10;            cleanupTask.cancel();&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    public Collection&lt;TpaRequest&gt; getAllRequests() {&#13;&#10;        return pendingRequests.values();&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/de/nicerecord/citybuildsystem/teleport/TpaRequest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/de/nicerecord/citybuildsystem/teleport/TpaRequest.java" />
              <option name="originalContent" value="package de.nicerecord.citybuildsystem.teleport;&#10;&#10;import org.bukkit.entity.Player;&#10;&#10;import java.util.UUID;&#10;&#10;public class TpaRequest {&#10;    private final UUID requester;&#10;    private final UUID target;&#10;    private final TpaType type;&#10;    private final long timestamp;&#10;&#10;    public TpaRequest(Player requester, Player target, TpaType type) {&#10;        this.requester = requester.getUniqueId();&#10;        this.target = target.getUniqueId();&#10;        this.type = type;&#10;        this.timestamp = System.currentTimeMillis();&#10;    }&#10;&#10;    public UUID getRequester() {&#10;        return requester;&#10;    }&#10;&#10;    public UUID getTarget() {&#10;        return target;&#10;    }&#10;&#10;    public TpaType getType() {&#10;        return type;&#10;    }&#10;&#10;    public long getTimestamp() {&#10;        return timestamp;&#10;    }&#10;&#10;    public boolean isExpired(int timeoutSeconds) {&#10;        return System.currentTimeMillis() - timestamp &gt; (timeoutSeconds * 1000L);&#10;    }&#10;&#10;    public enum TpaType {&#10;        TPA,        // Requester wants to teleport TO target&#10;        TPAHERE     // Requester wants target to teleport to THEM&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package de.nicerecord.citybuildsystem.teleport;&#13;&#10;&#13;&#10;import org.bukkit.entity.Player;&#13;&#10;&#13;&#10;import java.util.UUID;&#13;&#10;&#13;&#10;public class TpaRequest {&#13;&#10;    private final UUID requester;&#13;&#10;    private final UUID target;&#13;&#10;    private final TpaType type;&#13;&#10;    private final long timestamp;&#13;&#10;&#13;&#10;    public TpaRequest(Player requester, Player target, TpaType type) {&#13;&#10;        this.requester = requester.getUniqueId();&#13;&#10;        this.target = target.getUniqueId();&#13;&#10;        this.type = type;&#13;&#10;        this.timestamp = System.currentTimeMillis();&#13;&#10;    }&#13;&#10;&#13;&#10;    public UUID getRequester() {&#13;&#10;        return requester;&#13;&#10;    }&#13;&#10;&#13;&#10;    public UUID getTarget() {&#13;&#10;        return target;&#13;&#10;    }&#13;&#10;&#13;&#10;    public TpaType getType() {&#13;&#10;        return type;&#13;&#10;    }&#13;&#10;&#13;&#10;    public long getTimestamp() {&#13;&#10;        return timestamp;&#13;&#10;    }&#13;&#10;&#13;&#10;    public boolean isExpired(int timeoutSeconds) {&#13;&#10;        return System.currentTimeMillis() - timestamp &gt; (timeoutSeconds * 1000L);&#13;&#10;    }&#13;&#10;&#13;&#10;    public enum TpaType {&#13;&#10;        TPA,&#13;&#10;        TPAHERE&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/de/nicerecord/citybuildsystem/teleport/TpaToggleCommand.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/de/nicerecord/citybuildsystem/teleport/TpaToggleCommand.java" />
              <option name="originalContent" value="package de.nicerecord.citybuildsystem.teleport;&#10;&#10;import de.nicerecord.citybuildsystem.CitybuildSystem;&#10;import de.nicerecord.citybuildsystem.utils.MessageManager;&#10;import org.bukkit.ChatColor;&#10;import org.bukkit.command.Command;&#10;import org.bukkit.command.CommandExecutor;&#10;import org.bukkit.command.CommandSender;&#10;import org.bukkit.entity.Player;&#10;&#10;public class TpaToggleCommand implements CommandExecutor {&#10;    private final CitybuildSystem plugin;&#10;    private final TpaManager tpaManager;&#10;    private final MessageManager messageManager;&#10;&#10;    public TpaToggleCommand(CitybuildSystem plugin, TpaManager tpaManager, MessageManager messageManager) {&#10;        this.plugin = plugin;&#10;        this.tpaManager = tpaManager;&#10;        this.messageManager = messageManager;&#10;    }&#10;&#10;    @Override&#10;    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {&#10;        if (!(sender instanceof Player)) {&#10;            sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;general.only-players&quot;)));&#10;            return true;&#10;        }&#10;&#10;        Player player = (Player) sender;&#10;&#10;        if (!player.hasPermission(&quot;cbsystem.tpatoggle&quot;)) {&#10;            player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;general.no-permission&quot;)));&#10;            return true;&#10;        }&#10;&#10;        // Toggle TPA status&#10;        // Toggle TPA status&#10;        // Send appropriate message&#10;        boolean tpaEnabled = tpaManager.isTpaEnabled(player.getUniqueId());&#10;        String message = tpaEnabled ? &quot;teleport.tpa-enabled&quot; : &quot;teleport.tpa-disabled&quot;;&#10;        // Send appropriate message&#10;        boolean tpaEnabled = tpaManager.isTpaEnabled(player.getUniqueId());&#10;        String message = tpaEnabled ? &quot;teleport.tpa-enabled&quot; : &quot;teleport.tpa-disabled&quot;;&#10;        player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(message)));&#10;&#10;        return true;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package de.nicerecord.citybuildsystem.teleport;&#13;&#10;&#13;&#10;import de.nicerecord.citybuildsystem.CitybuildSystem;&#13;&#10;import de.nicerecord.citybuildsystem.utils.MessageManager;&#13;&#10;import org.bukkit.ChatColor;&#13;&#10;import org.bukkit.command.Command;&#13;&#10;import org.bukkit.command.CommandExecutor;&#13;&#10;import org.bukkit.command.CommandSender;&#13;&#10;import org.bukkit.entity.Player;&#13;&#10;&#13;&#10;public class TpaToggleCommand implements CommandExecutor {&#13;&#10;    private final CitybuildSystem plugin;&#13;&#10;    private final TpaManager tpaManager;&#13;&#10;    private final MessageManager messageManager;&#13;&#10;&#13;&#10;    public TpaToggleCommand(CitybuildSystem plugin, TpaManager tpaManager, MessageManager messageManager) {&#13;&#10;        this.plugin = plugin;&#13;&#10;        this.tpaManager = tpaManager;&#13;&#10;        this.messageManager = messageManager;&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {&#13;&#10;        if (!(sender instanceof Player)) {&#13;&#10;            sender.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;general.only-players&quot;)));&#13;&#10;            return true;&#13;&#10;        }&#13;&#10;&#13;&#10;        Player player = (Player) sender;&#13;&#10;&#13;&#10;        if (!player.hasPermission(&quot;cbsystem.tpatoggle&quot;)) {&#13;&#10;            player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(&quot;general.no-permission&quot;)));&#13;&#10;            return true;&#13;&#10;        }&#13;&#10;&#13;&#10;        tpaManager.toggleTpa(player.getUniqueId());&#13;&#10;        boolean enabled = tpaManager.isTpaEnabled(player.getUniqueId());&#13;&#10;&#13;&#10;        String message = enabled ? &quot;teleport.tpa-enabled&quot; : &quot;teleport.tpa-disabled&quot;;&#13;&#10;        player.sendMessage(ChatColor.translateAlternateColorCodes('&amp;', messageManager.getMessage(message)));&#13;&#10;&#13;&#10;        return true;&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/de/nicerecord/citybuildsystem/teleport/WarpManager.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/de/nicerecord/citybuildsystem/teleport/WarpManager.java" />
              <option name="originalContent" value="package de.nicerecord.citybuildsystem.teleport;&#10;&#10;import de.nicerecord.citybuildsystem.CitybuildSystem;&#10;import org.bukkit.Location;&#10;&#10;import java.io.File;&#10;import java.sql.*;&#10;import java.util.*;&#10;import java.util.*;&#10;import java.util.concurrent.CompletableFuture;&#10;&#10;public class WarpManager {&#10;    private final CitybuildSystem plugin;&#10;    private Connection connection;&#10;&#10;    public WarpManager(CitybuildSystem plugin) {&#10;        this.plugin = plugin;&#10;        initDatabase();&#10;    }&#10;&#10;    private void initDatabase() {&#10;        try {&#10;            File dataFolder = plugin.getDataFolder();&#10;            if (!dataFolder.exists()) {&#10;                dataFolder.mkdirs();&#10;            }&#10;&#10;            String dbPath = new File(dataFolder, plugin.getConfigManager().getWarpsFile()).getAbsolutePath();&#10;            connection = DriverManager.getConnection(&quot;jdbc:sqlite:&quot; + dbPath);&#10;&#10;            String createTable = &quot;CREATE TABLE IF NOT EXISTS warps (&quot; +&#10;                    &quot;id INTEGER PRIMARY KEY AUTOINCREMENT,&quot; +&#10;                    &quot;name TEXT NOT NULL UNIQUE,&quot; +&#10;                    &quot;world TEXT NOT NULL,&quot; +&#10;                    &quot;x REAL NOT NULL,&quot; +&#10;                    &quot;y REAL NOT NULL,&quot; +&#10;                    &quot;z REAL NOT NULL,&quot; +&#10;                    &quot;yaw REAL NOT NULL,&quot; +&#10;                    &quot;pitch REAL NOT NULL&quot; +&#10;                    &quot;)&quot;;&#10;&#10;            try (PreparedStatement stmt = connection.prepareStatement(createTable)) {&#10;                stmt.execute();&#10;            }&#10;        } catch (SQLException e) {&#10;            plugin.getLogger().severe(&quot;Fehler beim Initialisieren der Warp-Datenbank: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    public CompletableFuture&lt;Boolean&gt; createWarp(String name, Location location) {&#10;        return CompletableFuture.supplyAsync(() -&gt; {&#10;            try {&#10;                String sql = &quot;INSERT INTO warps (name, world, x, y, z, yaw, pitch) VALUES (?, ?, ?, ?, ?, ?, ?)&quot;;&#10;                try (PreparedStatement stmt = connection.prepareStatement(sql)) {&#10;                    stmt.setString(1, name);&#10;                    stmt.setString(2, location.getWorld().getName());&#10;                    stmt.setDouble(3, location.getX());&#10;                    stmt.setDouble(4, location.getY());&#10;                    stmt.setDouble(5, location.getZ());&#10;                    stmt.setFloat(6, location.getYaw());&#10;                    stmt.setFloat(7, location.getPitch());&#10;                    stmt.executeUpdate();&#10;                    return true;&#10;                }&#10;                if (e.getMessage().contains(&quot;UNIQUE constraint failed&quot;)) {&#10;                    return false; // Warp already exists&#10;                }&#10;            } catch (SQLException e) {&#10;                if (e.getMessage().contains(&quot;UNIQUE constraint failed&quot;)) {&#10;                    return false; // Warp already exists&#10;                }&#10;                plugin.getLogger().severe(&quot;Fehler beim Erstellen des Warps: &quot; + e.getMessage());&#10;                return false;&#10;            }&#10;        });&#10;    }&#10;&#10;    public CompletableFuture&lt;Boolean&gt; deleteWarp(String name) {&#10;        return CompletableFuture.supplyAsync(() -&gt; {&#10;            try {&#10;                String sql = &quot;DELETE FROM warps WHERE name = ?&quot;;&#10;                try (PreparedStatement stmt = connection.prepareStatement(sql)) {&#10;                    stmt.setString(1, name);&#10;                    int affected = stmt.executeUpdate();&#10;                    return affected &gt; 0;&#10;                }&#10;            } catch (SQLException e) {&#10;                plugin.getLogger().severe(&quot;Fehler beim Löschen des Warps: &quot; + e.getMessage());&#10;                return false;&#10;            }&#10;        });&#10;    }&#10;&#10;    public CompletableFuture&lt;Warp&gt; getWarp(String name) {&#10;        return CompletableFuture.supplyAsync(() -&gt; {&#10;            try {&#10;                String sql = &quot;SELECT * FROM warps WHERE name = ?&quot;;&#10;                try (PreparedStatement stmt = connection.prepareStatement(sql)) {&#10;                    stmt.setString(1, name);&#10;                    try (ResultSet rs = stmt.executeQuery()) {&#10;                        if (rs.next()) {&#10;                            return new Warp(&#10;                                    rs.getString(&quot;name&quot;),&#10;                                    rs.getString(&quot;world&quot;),&#10;                                    rs.getDouble(&quot;x&quot;),&#10;                                    rs.getDouble(&quot;y&quot;),&#10;                                    rs.getDouble(&quot;z&quot;),&#10;                                    rs.getFloat(&quot;yaw&quot;),&#10;                                    rs.getFloat(&quot;pitch&quot;)&#10;                            );&#10;                        }&#10;                    }&#10;                }&#10;        return name.matches(&quot;^[a-zA-Z0-9_]+$&quot;) &amp;&amp; name.length() &lt;= 16;&#10;                plugin.getLogger().severe(&quot;Fehler beim Abrufen des Warps: &quot; + e.getMessage());&#10;    public CompletableFuture&lt;List&lt;Warp&gt;&gt; getAllWarps() {&#10;        return CompletableFuture.supplyAsync(() -&gt; {&#10;            List&lt;Warp&gt; warps = new ArrayList&lt;&gt;();&#10;            try {&#10;                String sql = &quot;SELECT * FROM warps ORDER BY name&quot;;&#10;                try (PreparedStatement stmt = connection.prepareStatement(sql);&#10;                     ResultSet rs = stmt.executeQuery()) {&#10;                    while (rs.next()) {&#10;                        warps.add(new Warp(&#10;                                rs.getString(&quot;name&quot;),&#10;                                rs.getString(&quot;world&quot;),&#10;                                rs.getDouble(&quot;x&quot;),&#10;                                rs.getDouble(&quot;y&quot;),&#10;                                rs.getDouble(&quot;z&quot;),&#10;                                rs.getFloat(&quot;yaw&quot;),&#10;                                rs.getFloat(&quot;pitch&quot;)&#10;                        ));&#10;                    }&#10;                }&#10;            } catch (SQLException e) {&#10;                plugin.getLogger().severe(&quot;Fehler beim Abrufen der Warps: &quot; + e.getMessage());&#10;            }&#10;            return warps;&#10;        });&#10;    }&#10;&#10;            }&#10;            return null;&#10;        });&#10;    }&#10;&#10;    public CompletableFuture&lt;List&lt;Warp&gt;&gt; getAllWarps() {&#10;        return CompletableFuture.supplyAsync(() -&gt; {&#10;            List&lt;Warp&gt; warps = new ArrayList&lt;&gt;();&#10;            try {&#10;                String sql = &quot;SELECT * FROM warps ORDER BY name&quot;;&#10;                try (PreparedStatement stmt = connection.prepareStatement(sql);&#10;                     ResultSet rs = stmt.executeQuery()) {&#10;                    while (rs.next()) {&#10;                        warps.add(new Warp(&#10;                                rs.getString(&quot;name&quot;),&#10;                                rs.getString(&quot;world&quot;),&#10;                                rs.getDouble(&quot;x&quot;),&#10;                                rs.getDouble(&quot;y&quot;),&#10;                                rs.getDouble(&quot;z&quot;),&#10;                                rs.getFloat(&quot;yaw&quot;),&#10;                                rs.getFloat(&quot;pitch&quot;)&#10;                        ));&#10;                    }&#10;                }&#10;            } catch (SQLException e) {&#10;                plugin.getLogger().severe(&quot;Fehler beim Abrufen der Warps: &quot; + e.getMessage());&#10;            }&#10;            return warps;&#10;        });&#10;    }&#10;&#10;    public boolean isValidWarpName(String name) {&#10;        return name.matches(&quot;^[a-zA-Z0-9_]+$&quot;) &amp;&amp; name.length() &lt;= 16;&#10;    }&#10;&#10;    public void close() {&#10;        try {&#10;            if (connection != null &amp;&amp; !connection.isClosed()) {&#10;                connection.close();&#10;            }&#10;        } catch (SQLException e) {&#10;            plugin.getLogger().severe(&quot;Fehler beim Schließen der Warp-Datenbankverbindung: &quot; + e.getMessage());&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package de.nicerecord.citybuildsystem.teleport;&#13;&#10;&#13;&#10;import de.nicerecord.citybuildsystem.CitybuildSystem;&#13;&#10;import org.bukkit.Location;&#13;&#10;&#13;&#10;import java.io.File;&#13;&#10;import java.sql.*;&#13;&#10;import java.util.concurrent.CompletableFuture;&#13;&#10;&#13;&#10;public class WarpManager {&#13;&#10;    private final CitybuildSystem plugin;&#13;&#10;    private Connection connection;&#13;&#10;&#13;&#10;    public WarpManager(CitybuildSystem plugin) {&#13;&#10;        this.plugin = plugin;&#13;&#10;        initDatabase();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void initDatabase() {&#13;&#10;        try {&#13;&#10;            File dataFolder = plugin.getDataFolder();&#13;&#10;            if (!dataFolder.exists()) {&#13;&#10;                dataFolder.mkdirs();&#13;&#10;            }&#13;&#10;&#13;&#10;            String dbPath = new File(dataFolder, plugin.getConfigManager().getWarpsFile()).getAbsolutePath();&#13;&#10;            connection = DriverManager.getConnection(&quot;jdbc:sqlite:&quot; + dbPath);&#13;&#10;&#13;&#10;            String createTable = &quot;CREATE TABLE IF NOT EXISTS warps (&quot; +&#13;&#10;                    &quot;id INTEGER PRIMARY KEY AUTOINCREMENT,&quot; +&#13;&#10;                    &quot;name TEXT NOT NULL UNIQUE,&quot; +&#13;&#10;                    &quot;world TEXT NOT NULL,&quot; +&#13;&#10;                    &quot;x REAL NOT NULL,&quot; +&#13;&#10;                    &quot;y REAL NOT NULL,&quot; +&#13;&#10;                    &quot;z REAL NOT NULL,&quot; +&#13;&#10;                    &quot;yaw REAL NOT NULL,&quot; +&#13;&#10;                    &quot;pitch REAL NOT NULL&quot; +&#13;&#10;                    &quot;)&quot;;&#13;&#10;&#13;&#10;            try (PreparedStatement stmt = connection.prepareStatement(createTable)) {&#13;&#10;                stmt.execute();&#13;&#10;            }&#13;&#10;        } catch (SQLException e) {&#13;&#10;            plugin.getLogger().severe(&quot;Fehler beim Initialisieren der Warp-Datenbank: &quot; + e.getMessage());&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    public CompletableFuture&lt;Boolean&gt; createWarp(String name, Location location) {&#13;&#10;        return CompletableFuture.supplyAsync(() -&gt; {&#13;&#10;            try {&#13;&#10;                String sql = &quot;INSERT INTO warps (name, world, x, y, z, yaw, pitch) VALUES (?, ?, ?, ?, ?, ?, ?)&quot;;&#13;&#10;                try (PreparedStatement stmt = connection.prepareStatement(sql)) {&#13;&#10;                    stmt.setString(1, name);&#13;&#10;                    stmt.setString(2, location.getWorld().getName());&#13;&#10;                    stmt.setDouble(3, location.getX());&#13;&#10;                    stmt.setDouble(4, location.getY());&#13;&#10;                    stmt.setDouble(5, location.getZ());&#13;&#10;                    stmt.setFloat(6, location.getYaw());&#13;&#10;                    stmt.setFloat(7, location.getPitch());&#13;&#10;                    stmt.executeUpdate();&#13;&#10;                    return true;&#13;&#10;                }&#13;&#10;            } catch (SQLException e) {&#13;&#10;                plugin.getLogger().severe(&quot;Fehler beim Erstellen des Warps: &quot; + e.getMessage());&#13;&#10;                return false;&#13;&#10;            }&#13;&#10;        });&#13;&#10;    }&#13;&#10;&#13;&#10;    public CompletableFuture&lt;Boolean&gt; deleteWarp(String name) {&#13;&#10;        return CompletableFuture.supplyAsync(() -&gt; {&#13;&#10;            try {&#13;&#10;                String sql = &quot;DELETE FROM warps WHERE name = ?&quot;;&#13;&#10;                try (PreparedStatement stmt = connection.prepareStatement(sql)) {&#13;&#10;                    stmt.setString(1, name);&#13;&#10;                    int affected = stmt.executeUpdate();&#13;&#10;                    return affected &gt; 0;&#13;&#10;                }&#13;&#10;            } catch (SQLException e) {&#13;&#10;                plugin.getLogger().severe(&quot;Fehler beim Löschen des Warps: &quot; + e.getMessage());&#13;&#10;                return false;&#13;&#10;            }&#13;&#10;        });&#13;&#10;    }&#13;&#10;&#13;&#10;    public CompletableFuture&lt;Warp&gt; getWarp(String name) {&#13;&#10;        return CompletableFuture.supplyAsync(() -&gt; {&#13;&#10;            try {&#13;&#10;                String sql = &quot;SELECT * FROM warps WHERE name = ?&quot;;&#13;&#10;                try (PreparedStatement stmt = connection.prepareStatement(sql)) {&#13;&#10;                    stmt.setString(1, name);&#13;&#10;                    try (ResultSet rs = stmt.executeQuery()) {&#13;&#10;                        if (rs.next()) {&#13;&#10;                            return new Warp(&#13;&#10;                                    rs.getString(&quot;name&quot;),&#13;&#10;                                    rs.getString(&quot;world&quot;),&#13;&#10;                                    rs.getDouble(&quot;x&quot;),&#13;&#10;                                    rs.getDouble(&quot;y&quot;),&#13;&#10;                                    rs.getDouble(&quot;z&quot;),&#13;&#10;                                    rs.getFloat(&quot;yaw&quot;),&#13;&#10;                                    rs.getFloat(&quot;pitch&quot;)&#13;&#10;                            );&#13;&#10;                        }&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            } catch (SQLException e) {&#13;&#10;                plugin.getLogger().severe(&quot;Fehler beim Abrufen des Warps: &quot; + e.getMessage());&#13;&#10;            }&#13;&#10;            return null;&#13;&#10;        });&#13;&#10;    }&#13;&#10;&#13;&#10;    public boolean isValidWarpName(String name) {&#13;&#10;        return name.matches(&quot;^[a-zA-Z0-9]+$&quot;) &amp;&amp; name.length() &lt;= 16;&#13;&#10;    }&#13;&#10;&#13;&#10;    public void close() {&#13;&#10;        try {&#13;&#10;            if (connection != null &amp;&amp; !connection.isClosed()) {&#13;&#10;                connection.close();&#13;&#10;            }&#13;&#10;        } catch (SQLException e) {&#13;&#10;            plugin.getLogger().severe(&quot;Fehler beim Schließen der Warp-Datenbankverbindung: &quot; + e.getMessage());&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/de/nicerecord/citybuildsystem/utils/GUIManager.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/de/nicerecord/citybuildsystem/utils/GUIManager.java" />
              <option name="originalContent" value="package de.nicerecord.citybuildsystem.utils;&#10;&#10;import de.nicerecord.citybuildsystem.CitybuildSystem;&#10;import org.bukkit.configuration.file.FileConfiguration;&#10;import org.bukkit.configuration.file.YamlConfiguration;&#10;&#10;import java.io.File;&#10;import java.io.IOException;&#10;import java.util.List;&#10;&#10;public class GUIManager {&#10;    private final CitybuildSystem plugin;&#10;    private final ConfigManager configManager;&#10;    private FileConfiguration guiConfig;&#10;    private File guiFile;&#10;    private String currentLanguage;&#10;&#10;    public GUIManager(CitybuildSystem plugin) {&#10;        this.plugin = plugin;&#10;        this.configManager = new ConfigManager(plugin);&#10;        this.currentLanguage = configManager.getDefaultLanguage();&#10;        loadGUIConfig();&#10;    }&#10;&#10;    private void loadGUIConfig() {&#10;        guiFile = new File(plugin.getDataFolder(), &quot;lang/gui-&quot; + currentLanguage + &quot;.yml&quot;);&#10;        if (!guiFile.exists()) {&#10;            plugin.saveResource(&quot;lang/gui-&quot; + currentLanguage + &quot;.yml&quot;, false);&#10;        }&#10;        guiConfig = YamlConfiguration.loadConfiguration(guiFile);&#10;    }&#10;&#10;    public void reloadGUIConfig() {&#10;        this.currentLanguage = configManager.getDefaultLanguage();&#10;        loadGUIConfig();&#10;    }&#10;&#10;    public String getHomeGUITitle() {&#10;        return guiConfig.getString(&quot;home-gui.title&quot;, &quot;&amp;6&amp;lCBSYSTEM &amp;8» Deine Homes&quot;);&#10;    }&#10;&#10;    public int getHomeGUISize() {&#10;        return guiConfig.getInt(&quot;home-gui.size&quot;, 54);&#10;    }&#10;&#10;    public String getBorderMaterial() {&#10;        return guiConfig.getString(&quot;home-gui.items.border.material&quot;, &quot;BLACK_STAINED_GLASS_PANE&quot;);&#10;    }&#10;&#10;    public String getBorderName() {&#10;        return guiConfig.getString(&quot;home-gui.items.border.name&quot;, &quot;&amp;7&quot;);&#10;    }&#10;&#10;    public List&lt;String&gt; getBorderLore() {&#10;        return guiConfig.getStringList(&quot;home-gui.items.border.lore&quot;);&#10;    }&#10;&#10;    public String getCloseMaterial() {&#10;        return guiConfig.getString(&quot;home-gui.items.close.material&quot;, &quot;SPRUCE_DOOR&quot;);&#10;    }&#10;&#10;    public String getCloseName() {&#10;        return guiConfig.getString(&quot;home-gui.items.close.name&quot;, &quot;&amp;c&amp;lSCHLIEßEN&quot;);&#10;    }&#10;&#10;    public List&lt;String&gt; getCloseLore() {&#10;        return guiConfig.getStringList(&quot;home-gui.items.close.lore&quot;);&#10;    }&#10;&#10;    public String getInfoMaterial() {&#10;        return guiConfig.getString(&quot;home-gui.items.info.material&quot;, &quot;PAPER&quot;);&#10;    }&#10;&#10;    public String getInfoName() {&#10;        return guiConfig.getString(&quot;home-gui.items.info.name&quot;, &quot;&amp;e&amp;lINFO&quot;);&#10;    }&#10;&#10;    public List&lt;String&gt; getInfoLore() {&#10;        return guiConfig.getStringList(&quot;home-gui.items.info.lore&quot;);&#10;    }&#10;&#10;    public String getHomeSetMaterial() {&#10;        return guiConfig.getString(&quot;home-gui.items.home-set.material&quot;, &quot;WHITE_BED&quot;);&#10;    }&#10;&#10;    public String getHomeSetName() {&#10;        return guiConfig.getString(&quot;home-gui.items.home-set.name&quot;, &quot;&amp;e&amp;lHOME %name%&quot;);&#10;    }&#10;&#10;    public List&lt;String&gt; getHomeSetLore() {&#10;        return guiConfig.getStringList(&quot;home-gui.items.home-set.lore&quot;);&#10;    }&#10;&#10;    public String getHomeEmptyMaterial() {&#10;        return guiConfig.getString(&quot;home-gui.items.home-empty.material&quot;, &quot;RED_BED&quot;);&#10;    }&#10;&#10;    public String getHomeEmptyName() {&#10;        return guiConfig.getString(&quot;home-gui.items.home-empty.name&quot;, &quot;&amp;e&amp;lHOME SETZEN&quot;);&#10;    }&#10;&#10;    public List&lt;String&gt; getHomeEmptyLore() {&#10;        return guiConfig.getStringList(&quot;home-gui.items.home-empty.lore&quot;);&#10;    }&#10;&#10;    public String getHomeLockedMaterial() {&#10;        return guiConfig.getString(&quot;home-gui.items.home-locked.material&quot;, &quot;GRAY_BED&quot;);&#10;    }&#10;&#10;    public String getHomeLockedName() {&#10;        return guiConfig.getString(&quot;home-gui.items.home-locked.name&quot;, &quot;&amp;e&amp;lHOME KAUFEN&quot;);&#10;    }&#10;&#10;    public List&lt;String&gt; getHomeLockedLore() {&#10;        return guiConfig.getStringList(&quot;home-gui.items.home-locked.lore&quot;);&#10;    }&#10;&#10;    public String getBankMainGUITitle() {&#10;        return guiConfig.getString(&quot;bank-gui.main.title&quot;, &quot;&amp;6&amp;lCBSYSTEM &amp;8» Deine Bank&quot;);&#10;    }&#10;&#10;    public int getBankMainGUISize() {&#10;        return guiConfig.getInt(&quot;bank-gui.main.size&quot;, 45);&#10;    }&#10;&#10;    public String getBankPlayerHeadMaterial() {&#10;        return guiConfig.getString(&quot;bank-gui.main.items.player-head.material&quot;, &quot;PLAYER_HEAD&quot;);&#10;    }&#10;&#10;    public String getBankPlayerHeadName() {&#10;        return guiConfig.getString(&quot;bank-gui.main.items.player-head.name&quot;, &quot;&amp;e&amp;lDEIN ACCOUNT&quot;);&#10;    }&#10;&#10;    public List&lt;String&gt; getBankPlayerHeadLore() {&#10;        return guiConfig.getStringList(&quot;bank-gui.main.items.player-head.lore&quot;);&#10;    }&#10;&#10;    public String getBankDepositMaterial() {&#10;        return guiConfig.getString(&quot;bank-gui.main.items.deposit.material&quot;, &quot;LIME_DYE&quot;);&#10;    }&#10;&#10;    public String getBankDepositName() {&#10;        return guiConfig.getString(&quot;bank-gui.main.items.deposit.name&quot;, &quot;&amp;e&amp;lGELD EINZAHLEN&quot;);&#10;    }&#10;&#10;    public List&lt;String&gt; getBankDepositLore() {&#10;        return guiConfig.getStringList(&quot;bank-gui.main.items.deposit.lore&quot;);&#10;    }&#10;&#10;    public String getBankWithdrawMaterial() {&#10;        return guiConfig.getString(&quot;bank-gui.main.items.withdraw.material&quot;, &quot;RED_DYE&quot;);&#10;    }&#10;&#10;    public String getBankWithdrawName() {&#10;        return guiConfig.getString(&quot;bank-gui.main.items.withdraw.name&quot;, &quot;&amp;e&amp;lGELD AUSZAHLEN&quot;);&#10;    }&#10;&#10;    public List&lt;String&gt; getBankWithdrawLore() {&#10;        return guiConfig.getStringList(&quot;bank-gui.main.items.withdraw.lore&quot;);&#10;    }&#10;&#10;    public String getBankInfoMaterial() {&#10;        return guiConfig.getString(&quot;bank-gui.main.items.info.material&quot;, &quot;PAPER&quot;);&#10;    }&#10;&#10;    public String getBankInfoName() {&#10;        return guiConfig.getString(&quot;bank-gui.main.items.info.name&quot;, &quot;&amp;e&amp;lINFO&quot;);&#10;    }&#10;&#10;    public List&lt;String&gt; getBankInfoLore() {&#10;        return guiConfig.getStringList(&quot;bank-gui.main.items.info.lore&quot;);&#10;    }&#10;&#10;    public String getBankDepositGUITitle() {&#10;        return guiConfig.getString(&quot;bank-gui.deposit.title&quot;, &quot;&amp;6&amp;lCBSYSTEM &amp;8» Geld einzahlen&quot;);&#10;    }&#10;&#10;    public int getBankDepositGUISize() {&#10;        return guiConfig.getInt(&quot;bank-gui.deposit.size&quot;, 36);&#10;    }&#10;&#10;    public List&lt;Integer&gt; getBankNuggetAmounts() {&#10;        return guiConfig.getIntegerList(&quot;bank-gui.deposit.items.nugget.amounts&quot;);&#10;    }&#10;&#10;    public List&lt;Integer&gt; getBankIngotAmounts() {&#10;        return guiConfig.getIntegerList(&quot;bank-gui.deposit.items.ingot.amounts&quot;);&#10;    }&#10;&#10;    public List&lt;Integer&gt; getBankBlockAmounts() {&#10;        return guiConfig.getIntegerList(&quot;bank-gui.deposit.items.block.amounts&quot;);&#10;    }&#10;&#10;    public String getBankNuggetMaterial() {&#10;        return guiConfig.getString(&quot;bank-gui.deposit.items.nugget.material&quot;, &quot;GOLD_NUGGET&quot;);&#10;    }&#10;&#10;    public String getBankIngotMaterial() {&#10;        return guiConfig.getString(&quot;bank-gui.deposit.items.ingot.material&quot;, &quot;GOLD_INGOT&quot;);&#10;    }&#10;&#10;    public String getBankBlockMaterial() {&#10;        return guiConfig.getString(&quot;bank-gui.deposit.items.block.material&quot;, &quot;GOLD_BLOCK&quot;);&#10;    }&#10;&#10;    public String getBankAmountName() {&#10;        return guiConfig.getString(&quot;bank-gui.deposit.items.nugget.name&quot;, &quot;&amp;e&amp;l%amount%&quot;);&#10;    }&#10;&#10;    public List&lt;String&gt; getBankDepositAmountLore() {&#10;        return guiConfig.getStringList(&quot;bank-gui.deposit.items.nugget.lore&quot;);&#10;    }&#10;&#10;    public String getBankBackMaterial() {&#10;        return guiConfig.getString(&quot;bank-gui.deposit.items.back.material&quot;, &quot;ARROW&quot;);&#10;    }&#10;&#10;    public String getBankBackName() {&#10;        return guiConfig.getString(&quot;bank-gui.deposit.items.back.name&quot;, &quot;&amp;c&amp;lZURÜCK&quot;);&#10;    }&#10;&#10;    public List&lt;String&gt; getBankBackLore() {&#10;        return guiConfig.getStringList(&quot;bank-gui.deposit.items.back.lore&quot;);&#10;    }&#10;&#10;    public String getBankDepositInfoName() {&#10;        return guiConfig.getString(&quot;bank-gui.deposit.items.info.name&quot;, &quot;&amp;e&amp;lINFO&quot;);&#10;    }&#10;&#10;    public List&lt;String&gt; getBankDepositInfoLore() {&#10;        return guiConfig.getStringList(&quot;bank-gui.deposit.items.info.lore&quot;);&#10;    }&#10;&#10;    public String getBankWithdrawGUITitle() {&#10;        return guiConfig.getString(&quot;bank-gui.withdraw.title&quot;, &quot;&amp;6&amp;lCBSYSTEM &amp;8» Geld auszahlen&quot;);&#10;    }&#10;&#10;    public int getBankWithdrawGUISize() {&#10;        return guiConfig.getInt(&quot;bank-gui.withdraw.size&quot;, 36);&#10;    }&#10;&#10;    public List&lt;String&gt; getBankWithdrawAmountLore() {&#10;        return guiConfig.getStringList(&quot;bank-gui.withdraw.items.nugget.lore&quot;);&#10;    }&#10;&#10;    public String getBankWithdrawInfoName() {&#10;        return guiConfig.getString(&quot;bank-gui.withdraw.items.info.name&quot;, &quot;&amp;e&amp;lINFO&quot;);&#10;    }&#10;&#10;    public List&lt;String&gt; getBankWithdrawInfoLore() {&#10;        return guiConfig.getStringList(&quot;bank-gui.withdraw.items.info.lore&quot;);&#10;    }&#10;&#10;    public void saveGUIConfig() {&#10;        try {&#10;            guiConfig.save(guiFile);&#10;        } catch (IOException e) {&#10;            plugin.getLogger().severe(&quot;Fehler beim Speichern der gui-de.yml: &quot; + e.getMessage());&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package de.nicerecord.citybuildsystem.utils;&#10;&#10;import de.nicerecord.citybuildsystem.CitybuildSystem;&#10;import org.bukkit.configuration.file.FileConfiguration;&#10;import org.bukkit.configuration.file.YamlConfiguration;&#10;&#10;import java.io.File;&#10;import java.io.IOException;&#10;import java.util.List;&#10;&#10;public class GUIManager {&#10;    private final CitybuildSystem plugin;&#10;    private final ConfigManager configManager;&#10;    private FileConfiguration guiConfig;&#10;    private File guiFile;&#10;    private String currentLanguage;&#10;&#10;    public GUIManager(CitybuildSystem plugin) {&#10;        this.plugin = plugin;&#10;        this.configManager = new ConfigManager(plugin);&#10;        this.currentLanguage = configManager.getDefaultLanguage();&#10;        loadGUIConfig();&#10;    }&#10;&#10;    private void loadGUIConfig() {&#10;        guiFile = new File(plugin.getDataFolder(), &quot;lang/gui-&quot; + currentLanguage + &quot;.yml&quot;);&#10;        if (!guiFile.exists()) {&#10;            plugin.saveResource(&quot;lang/gui-&quot; + currentLanguage + &quot;.yml&quot;, false);&#10;        }&#10;        guiConfig = YamlConfiguration.loadConfiguration(guiFile);&#10;    }&#10;&#10;    public void reloadGUIConfig() {&#10;        this.currentLanguage = configManager.getDefaultLanguage();&#10;        loadGUIConfig();&#10;    }&#10;&#10;    public String getHomeGUITitle() {&#10;        return guiConfig.getString(&quot;home-gui.title&quot;, &quot;&amp;6&amp;lCBSYSTEM &amp;8» Deine Homes&quot;);&#10;    }&#10;&#10;    public int getHomeGUISize() {&#10;        return guiConfig.getInt(&quot;home-gui.size&quot;, 54);&#10;    }&#10;&#10;    public String getBorderMaterial() {&#10;        return guiConfig.getString(&quot;home-gui.items.border.material&quot;, &quot;BLACK_STAINED_GLASS_PANE&quot;);&#10;    }&#10;&#10;    public String getBorderName() {&#10;        return guiConfig.getString(&quot;home-gui.items.border.name&quot;, &quot;&amp;7&quot;);&#10;    }&#10;&#10;    public List&lt;String&gt; getBorderLore() {&#10;        return guiConfig.getStringList(&quot;home-gui.items.border.lore&quot;);&#10;    }&#10;&#10;    public String getCloseMaterial() {&#10;        return guiConfig.getString(&quot;home-gui.items.close.material&quot;, &quot;SPRUCE_DOOR&quot;);&#10;    }&#10;&#10;    public String getCloseName() {&#10;        return guiConfig.getString(&quot;home-gui.items.close.name&quot;, &quot;&amp;c&amp;lSCHLIEßEN&quot;);&#10;    }&#10;&#10;    public List&lt;String&gt; getCloseLore() {&#10;        return guiConfig.getStringList(&quot;home-gui.items.close.lore&quot;);&#10;    }&#10;&#10;    public String getInfoMaterial() {&#10;        return guiConfig.getString(&quot;home-gui.items.info.material&quot;, &quot;PAPER&quot;);&#10;    }&#10;&#10;    public String getInfoName() {&#10;        return guiConfig.getString(&quot;home-gui.items.info.name&quot;, &quot;&amp;e&amp;lINFO&quot;);&#10;    }&#10;&#10;    public List&lt;String&gt; getInfoLore() {&#10;        return guiConfig.getStringList(&quot;home-gui.items.info.lore&quot;);&#10;    }&#10;&#10;    public String getHomeSetMaterial() {&#10;        return guiConfig.getString(&quot;home-gui.items.home-set.material&quot;, &quot;WHITE_BED&quot;);&#10;    }&#10;&#10;    public String getHomeSetName() {&#10;        return guiConfig.getString(&quot;home-gui.items.home-set.name&quot;, &quot;&amp;e&amp;lHOME %name%&quot;);&#10;    }&#10;&#10;    public List&lt;String&gt; getHomeSetLore() {&#10;        return guiConfig.getStringList(&quot;home-gui.items.home-set.lore&quot;);&#10;    }&#10;&#10;    public String getHomeEmptyMaterial() {&#10;        return guiConfig.getString(&quot;home-gui.items.home-empty.material&quot;, &quot;RED_BED&quot;);&#10;    }&#10;&#10;    public String getHomeEmptyName() {&#10;        return guiConfig.getString(&quot;home-gui.items.home-empty.name&quot;, &quot;&amp;e&amp;lHOME SETZEN&quot;);&#10;    }&#10;&#10;    public List&lt;String&gt; getHomeEmptyLore() {&#10;        return guiConfig.getStringList(&quot;home-gui.items.home-empty.lore&quot;);&#10;    }&#10;&#10;    public String getHomeLockedMaterial() {&#10;        return guiConfig.getString(&quot;home-gui.items.home-locked.material&quot;, &quot;GRAY_BED&quot;);&#10;    }&#10;&#10;    public String getHomeLockedName() {&#10;        return guiConfig.getString(&quot;home-gui.items.home-locked.name&quot;, &quot;&amp;e&amp;lHOME KAUFEN&quot;);&#10;    }&#10;&#10;    public List&lt;String&gt; getHomeLockedLore() {&#10;        return guiConfig.getStringList(&quot;home-gui.items.home-locked.lore&quot;);&#10;    }&#10;&#10;    public String getPreviousPageMaterial() {&#10;        return guiConfig.getString(&quot;home-gui.items.previous-page.material&quot;, &quot;ARROW&quot;);&#10;    }&#10;&#10;    public String getPreviousPageName() {&#10;        return guiConfig.getString(&quot;home-gui.items.previous-page.name&quot;, &quot;&amp;c&amp;lVORHERIGE SEITE&quot;);&#10;    }&#10;&#10;    public List&lt;String&gt; getPreviousPageLore() {&#10;        return guiConfig.getStringList(&quot;home-gui.items.previous-page.lore&quot;);&#10;    }&#10;&#10;    public String getNextPageMaterial() {&#10;        return guiConfig.getString(&quot;home-gui.items.next-page.material&quot;, &quot;ARROW&quot;);&#10;    }&#10;&#10;    public String getNextPageName() {&#10;        return guiConfig.getString(&quot;home-gui.items.next-page.name&quot;, &quot;&amp;a&amp;lNÄCHSTE SEITE&quot;);&#10;    }&#10;&#10;    public List&lt;String&gt; getNextPageLore() {&#10;        return guiConfig.getStringList(&quot;home-gui.items.next-page.lore&quot;);&#10;    }&#10;&#10;    public String getPageInfoMaterial() {&#10;        return guiConfig.getString(&quot;home-gui.items.page-info.material&quot;, &quot;BOOK&quot;);&#10;    }&#10;&#10;    public String getPageInfoName() {&#10;        return guiConfig.getString(&quot;home-gui.items.page-info.name&quot;, &quot;&amp;e&amp;lSEITE %current%/%total%&quot;);&#10;    }&#10;&#10;    public List&lt;String&gt; getPageInfoLore() {&#10;        return guiConfig.getStringList(&quot;home-gui.items.page-info.lore&quot;);&#10;    }&#10;&#10;    public String getBankMainGUITitle() {&#10;        return guiConfig.getString(&quot;bank-gui.main.title&quot;, &quot;&amp;6&amp;lCBSYSTEM &amp;8» Deine Bank&quot;);&#10;    }&#10;&#10;    public int getBankMainGUISize() {&#10;        return guiConfig.getInt(&quot;bank-gui.main.size&quot;, 45);&#10;    }&#10;&#10;    public String getBankPlayerHeadMaterial() {&#10;        return guiConfig.getString(&quot;bank-gui.main.items.player-head.material&quot;, &quot;PLAYER_HEAD&quot;);&#10;    }&#10;&#10;    public String getBankPlayerHeadName() {&#10;        return guiConfig.getString(&quot;bank-gui.main.items.player-head.name&quot;, &quot;&amp;e&amp;lDEIN ACCOUNT&quot;);&#10;    }&#10;&#10;    public List&lt;String&gt; getBankPlayerHeadLore() {&#10;        return guiConfig.getStringList(&quot;bank-gui.main.items.player-head.lore&quot;);&#10;    }&#10;&#10;    public String getBankDepositMaterial() {&#10;        return guiConfig.getString(&quot;bank-gui.main.items.deposit.material&quot;, &quot;LIME_DYE&quot;);&#10;    }&#10;&#10;    public String getBankDepositName() {&#10;        return guiConfig.getString(&quot;bank-gui.main.items.deposit.name&quot;, &quot;&amp;e&amp;lGELD EINZAHLEN&quot;);&#10;    }&#10;&#10;    public List&lt;String&gt; getBankDepositLore() {&#10;        return guiConfig.getStringList(&quot;bank-gui.main.items.deposit.lore&quot;);&#10;    }&#10;&#10;    public String getBankWithdrawMaterial() {&#10;        return guiConfig.getString(&quot;bank-gui.main.items.withdraw.material&quot;, &quot;RED_DYE&quot;);&#10;    }&#10;&#10;    public String getBankWithdrawName() {&#10;        return guiConfig.getString(&quot;bank-gui.main.items.withdraw.name&quot;, &quot;&amp;e&amp;lGELD AUSZAHLEN&quot;);&#10;    }&#10;&#10;    public List&lt;String&gt; getBankWithdrawLore() {&#10;        return guiConfig.getStringList(&quot;bank-gui.main.items.withdraw.lore&quot;);&#10;    }&#10;&#10;    public String getBankInfoMaterial() {&#10;        return guiConfig.getString(&quot;bank-gui.main.items.info.material&quot;, &quot;PAPER&quot;);&#10;    }&#10;&#10;    public String getBankInfoName() {&#10;        return guiConfig.getString(&quot;bank-gui.main.items.info.name&quot;, &quot;&amp;e&amp;lINFO&quot;);&#10;    }&#10;&#10;    public List&lt;String&gt; getBankInfoLore() {&#10;        return guiConfig.getStringList(&quot;bank-gui.main.items.info.lore&quot;);&#10;    }&#10;&#10;    public String getBankDepositGUITitle() {&#10;        return guiConfig.getString(&quot;bank-gui.deposit.title&quot;, &quot;&amp;6&amp;lCBSYSTEM &amp;8» Geld einzahlen&quot;);&#10;    }&#10;&#10;    public int getBankDepositGUISize() {&#10;        return guiConfig.getInt(&quot;bank-gui.deposit.size&quot;, 36);&#10;    }&#10;&#10;    public List&lt;Integer&gt; getBankNuggetAmounts() {&#10;        return guiConfig.getIntegerList(&quot;bank-gui.deposit.items.nugget.amounts&quot;);&#10;    }&#10;&#10;    public List&lt;Integer&gt; getBankIngotAmounts() {&#10;        return guiConfig.getIntegerList(&quot;bank-gui.deposit.items.ingot.amounts&quot;);&#10;    }&#10;&#10;    public List&lt;Integer&gt; getBankBlockAmounts() {&#10;        return guiConfig.getIntegerList(&quot;bank-gui.deposit.items.block.amounts&quot;);&#10;    }&#10;&#10;    public String getBankNuggetMaterial() {&#10;        return guiConfig.getString(&quot;bank-gui.deposit.items.nugget.material&quot;, &quot;GOLD_NUGGET&quot;);&#10;    }&#10;&#10;    public String getBankIngotMaterial() {&#10;        return guiConfig.getString(&quot;bank-gui.deposit.items.ingot.material&quot;, &quot;GOLD_INGOT&quot;);&#10;    }&#10;&#10;    public String getBankBlockMaterial() {&#10;        return guiConfig.getString(&quot;bank-gui.deposit.items.block.material&quot;, &quot;GOLD_BLOCK&quot;);&#10;    }&#10;&#10;    public String getBankAmountName() {&#10;        return guiConfig.getString(&quot;bank-gui.deposit.items.nugget.name&quot;, &quot;&amp;e&amp;l%amount%&quot;);&#10;    }&#10;&#10;    public List&lt;String&gt; getBankDepositAmountLore() {&#10;        return guiConfig.getStringList(&quot;bank-gui.deposit.items.nugget.lore&quot;);&#10;    }&#10;&#10;    public String getBankBackMaterial() {&#10;        return guiConfig.getString(&quot;bank-gui.deposit.items.back.material&quot;, &quot;ARROW&quot;);&#10;    }&#10;&#10;    public String getBankBackName() {&#10;        return guiConfig.getString(&quot;bank-gui.deposit.items.back.name&quot;, &quot;&amp;c&amp;lZURÜCK&quot;);&#10;    }&#10;&#10;    public List&lt;String&gt; getBankBackLore() {&#10;        return guiConfig.getStringList(&quot;bank-gui.deposit.items.back.lore&quot;);&#10;    }&#10;&#10;    public String getBankDepositInfoName() {&#10;        return guiConfig.getString(&quot;bank-gui.deposit.items.info.name&quot;, &quot;&amp;e&amp;lINFO&quot;);&#10;    }&#10;&#10;    public List&lt;String&gt; getBankDepositInfoLore() {&#10;        return guiConfig.getStringList(&quot;bank-gui.deposit.items.info.lore&quot;);&#10;    }&#10;&#10;    public String getBankWithdrawGUITitle() {&#10;        return guiConfig.getString(&quot;bank-gui.withdraw.title&quot;, &quot;&amp;6&amp;lCBSYSTEM &amp;8» Geld auszahlen&quot;);&#10;    }&#10;&#10;    public int getBankWithdrawGUISize() {&#10;        return guiConfig.getInt(&quot;bank-gui.withdraw.size&quot;, 36);&#10;    }&#10;&#10;    public List&lt;String&gt; getBankWithdrawAmountLore() {&#10;        return guiConfig.getStringList(&quot;bank-gui.withdraw.items.nugget.lore&quot;);&#10;    }&#10;&#10;    public String getBankWithdrawInfoName() {&#10;        return guiConfig.getString(&quot;bank-gui.withdraw.items.info.name&quot;, &quot;&amp;e&amp;lINFO&quot;);&#10;    }&#10;&#10;    public List&lt;String&gt; getBankWithdrawInfoLore() {&#10;        return guiConfig.getStringList(&quot;bank-gui.withdraw.items.info.lore&quot;);&#10;    }&#10;&#10;    public void saveGUIConfig() {&#10;        try {&#10;            guiConfig.save(guiFile);&#10;        } catch (IOException e) {&#10;            plugin.getLogger().severe(&quot;Fehler beim Speichern der gui-de.yml: &quot; + e.getMessage());&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/gui.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/gui.yml" />
              <option name="originalContent" value="# CitybuildSystem GUI Configuration&#10;&#10;# Home GUI Settings&#10;home-gui:&#10;  title: &quot;&amp;6&amp;lCBSYSTEM &amp;8» Deine Homes&quot;&#10;  size: 54&#10;&#10;  # Item Materials and Settings&#10;  items:&#10;    # Border items (glass panes around the GUI)&#10;    border:&#10;      material: &quot;BLACK_STAINED_GLASS_PANE&quot;&#10;      name: &quot;&amp;7&quot;&#10;      lore: []&#10;&#10;    # Close button (bottom right)&#10;    close:&#10;      material: &quot;SPRUCE_DOOR&quot;&#10;      name: &quot;&amp;c&amp;lSCHLIEßEN&quot;&#10;      lore:&#10;        - &quot;&amp;7Klicke zum Schließen&quot;&#10;&#10;    # Info item (middle bottom)&#10;    info:&#10;      material: &quot;PAPER&quot;&#10;      name: &quot;&amp;e&amp;lINFO&quot;&#10;      lore:&#10;        - &quot;&amp;7&quot;&#10;        - &quot;&amp;7Sie können weitere &amp;eHomes &amp;7kaufen.&quot;&#10;        - &quot;&amp;7&quot;&#10;        - &quot;&amp;7Homes: &amp;e%used%&amp;8/&amp;e%max%&quot;&#10;        - &quot;&amp;7Maximal kaufbar: &amp;e28&quot;&#10;&#10;    # Existing home items&#10;    home-set:&#10;      material: &quot;WHITE_BED&quot;&#10;      name: &quot;&amp;e&amp;lHOME %name%&quot;&#10;      lore:&#10;        - &quot;&amp;7&quot;&#10;        - &quot;&amp;7Linksklick zum Teleportieren&quot;&#10;        - &quot;&amp;7Rechtsklick zum Löschen&quot;&#10;&#10;    # Empty home slots (can be set)&#10;    home-empty:&#10;      material: &quot;RED_BED&quot;&#10;      name: &quot;&amp;e&amp;lHOME SETZEN&quot;&#10;      lore:&#10;        - &quot;&amp;7Klicke um ein Home zu setzen&quot;&#10;&#10;    # Locked home slots (need to be purchased)&#10;    home-locked:&#10;      material: &quot;GRAY_BED&quot;&#10;      name: &quot;&amp;e&amp;lHOME KAUFEN&quot;&#10;      lore:&#10;        - &quot;&amp;7&quot;&#10;        - &quot;&amp;7Preis: &amp;e%price%$&quot;&#10;        - &quot;&amp;7Klicke zum kaufen&quot;&#10;&#10;# Future GUI configurations can be added here&#10;# For example:&#10;# shop-gui:&#10;#   title: &quot;&amp;6&amp;lSHOP&quot;&#10;#   size: 27&#10;#   items:&#10;#     ...&#10;&#10;# warp-gui:&#10;#   title: &quot;&amp;6&amp;lWARPS&quot;&#10;#   size: 54&#10;#   items:&#10;#     ...&#10;" />
              <option name="updatedContent" value="# CitybuildSystem GUI Configuration&#10;&#10;# Home GUI Settings&#10;home-gui:&#10;  title: &quot;&amp;6&amp;lCBSYSTEM &amp;8» Deine Homes&quot;&#10;  size: 54&#10;&#10;  # Item Materials and Settings&#10;  items:&#10;    # Border items (glass panes around the GUI)&#10;    border:&#10;      material: &quot;BLACK_STAINED_GLASS_PANE&quot;&#10;      name: &quot;&amp;7&quot;&#10;      lore: []&#10;&#10;    # Close button (bottom right)&#10;    close:&#10;      material: &quot;SPRUCE_DOOR&quot;&#10;      name: &quot;&amp;c&amp;lSCHLIEßEN&quot;&#10;      lore:&#10;        - &quot;&amp;7Klicke zum Schließen&quot;&#10;&#10;    # Info item (middle bottom)&#10;    info:&#10;      material: &quot;PAPER&quot;&#10;      name: &quot;&amp;e&amp;lINFO&quot;&#10;      lore:&#10;        - &quot;&amp;7&quot;&#10;        - &quot;&amp;7Sie können weitere &amp;eHomes &amp;7kaufen.&quot;&#10;        - &quot;&amp;7&quot;&#10;        - &quot;&amp;7Homes: &amp;e%used%&amp;8/&amp;e%max%&quot;&#10;        - &quot;&amp;7Maximal kaufbar: &amp;e28&quot;&#10;&#10;    # Existing home items&#10;    home-set:&#10;      material: &quot;WHITE_BED&quot;&#10;      name: &quot;&amp;e&amp;lHOME %name%&quot;&#10;      lore:&#10;        - &quot;&amp;7&quot;&#10;        - &quot;&amp;7Linksklick zum Teleportieren&quot;&#10;        - &quot;&amp;7Rechtsklick zum Löschen&quot;&#10;&#10;    # Empty home slots (can be set)&#10;    home-empty:&#10;      material: &quot;RED_BED&quot;&#10;      name: &quot;&amp;e&amp;lHOME SETZEN&quot;&#10;      lore:&#10;        - &quot;&amp;7Klicke um ein Home zu setzen&quot;&#10;&#10;    # Locked home slots (need to be purchased)&#10;    home-locked:&#10;      material: &quot;GRAY_BED&quot;&#10;      name: &quot;&amp;e&amp;lHOME KAUFEN&quot;&#10;      lore:&#10;        - &quot;&amp;7&quot;&#10;        - &quot;&amp;7Preis: &amp;e%price%$&quot;&#10;        - &quot;&amp;7Klicke zum kaufen&quot;&#10;&#10;# Future GUI configurations can be added here&#10;# For example:&#10;# shop-gui:&#10;#   title: &quot;&amp;6&amp;lSHOP&quot;&#10;#   size: 27&#10;#   items:&#10;#     ...&#10;&#10;# warp-gui:&#10;#   title: &quot;&amp;6&amp;lWARPS&quot;&#10;#   size: 54&#10;#   items:&#10;#     ...&#10;&#10;# Bank GUI Settings&#10;bank-gui:&#10;  # Main Bank GUI&#10;  main:&#10;    title: &quot;&amp;6&amp;lCBSYSTEM &amp;8» Deine Bank&quot;&#10;    size: 45&#10;    items:&#10;      # Border items (glass panes around the GUI)&#10;      border:&#10;        material: &quot;BLACK_STAINED_GLASS_PANE&quot;&#10;        name: &quot;&amp;7&quot;&#10;        lore: []&#10;      &#10;      # Player head (shows account info)&#10;      player-head:&#10;        material: &quot;PLAYER_HEAD&quot;&#10;        name: &quot;&amp;e&amp;lDEIN ACCOUNT&quot;&#10;        lore:&#10;          - &quot;&amp;7&quot;&#10;          - &quot;&amp;7Bank Guthaben: &amp;e%bank_balance%&quot;&#10;          - &quot;&amp;7Guthaben: &amp;e%vault_balance%&quot;&#10;      &#10;      # Deposit button&#10;      deposit:&#10;        material: &quot;LIME_DYE&quot;&#10;        name: &quot;&amp;e&amp;lGELD EINZAHLEN&quot;&#10;        lore:&#10;          - &quot;&amp;7Klicke um Geld einzuzahlen&quot;&#10;      &#10;      # Withdraw button&#10;      withdraw:&#10;        material: &quot;RED_DYE&quot;&#10;        name: &quot;&amp;e&amp;lGELD AUSZAHLEN&quot;&#10;        lore:&#10;          - &quot;&amp;7Klicke um Geld auszuzahlen&quot;&#10;      &#10;      # Info item&#10;      info:&#10;        material: &quot;PAPER&quot;&#10;        name: &quot;&amp;e&amp;lINFO&quot;&#10;        lore:&#10;          - &quot;&amp;7&quot;&#10;          - &quot;&amp;7Das maximum zum einzahlen ist 100K&quot;&#10;      &#10;      # Close button&#10;      close:&#10;        material: &quot;SPRUCE_DOOR&quot;&#10;        name: &quot;&amp;c&amp;lSCHLIEßEN&quot;&#10;        lore:&#10;          - &quot;&amp;7Klicke zum Schließen&quot;&#10;&#10;  # Deposit GUI&#10;  deposit:&#10;    title: &quot;&amp;6&amp;lCBSYSTEM &amp;8» Geld einzahlen&quot;&#10;    size: 36&#10;    items:&#10;      # Border items&#10;      border:&#10;        material: &quot;BLACK_STAINED_GLASS_PANE&quot;&#10;        name: &quot;&amp;7&quot;&#10;        lore: []&#10;      &#10;      # Player head&#10;      player-head:&#10;        material: &quot;PLAYER_HEAD&quot;&#10;        name: &quot;&amp;e&amp;lDEIN ACCOUNT&quot;&#10;        lore:&#10;          - &quot;&amp;7&quot;&#10;          - &quot;&amp;7Bank Guthaben: &amp;e%bank_balance%&quot;&#10;          - &quot;&amp;7Guthaben: &amp;e%vault_balance%&quot;&#10;      &#10;      # Deposit amounts - Golden Nuggets&#10;      nugget:&#10;        material: &quot;GOLD_NUGGET&quot;&#10;        amounts: [10, 25, 50, 100, 250]&#10;        name: &quot;&amp;e&amp;l%amount%&quot;&#10;        lore:&#10;          - &quot;&amp;7Klicke um %amount% einzuzahlen&quot;&#10;      &#10;      # Deposit amounts - Gold Ingots&#10;      ingot:&#10;        material: &quot;GOLD_INGOT&quot;&#10;        amounts: [500, 1000, 2500, 5000]&#10;        name: &quot;&amp;e&amp;l%amount%&quot;&#10;        lore:&#10;          - &quot;&amp;7Klicke um %amount% einzuzahlen&quot;&#10;      &#10;      # Deposit amounts - Gold Blocks&#10;      block:&#10;        material: &quot;GOLD_BLOCK&quot;&#10;        amounts: [10000, 25000, 50000, 100000]&#10;        name: &quot;&amp;e&amp;l%amount%&quot;&#10;        lore:&#10;          - &quot;&amp;7Klicke um %amount% einzuzahlen&quot;&#10;      &#10;      # Back button&#10;      back:&#10;        material: &quot;ARROW&quot;&#10;        name: &quot;&amp;c&amp;lZURÜCK&quot;&#10;        lore:&#10;          - &quot;&amp;7Klicke um zurück zu kommen&quot;&#10;      &#10;      # Info item&#10;      info:&#10;        material: &quot;PAPER&quot;&#10;        name: &quot;&amp;e&amp;lINFO&quot;&#10;        lore:&#10;          - &quot;&amp;7&quot;&#10;          - &quot;&amp;7Das maximum zum einzahlen ist 100K&quot;&#10;      &#10;      # Close button&#10;      close:&#10;        material: &quot;SPRUCE_DOOR&quot;&#10;        name: &quot;&amp;c&amp;lSCHLIEßEN&quot;&#10;        lore:&#10;          - &quot;&amp;7Klicke zum Schließen&quot;&#10;&#10;  # Withdraw GUI&#10;  withdraw:&#10;    title: &quot;&amp;6&amp;lCBSYSTEM &amp;8» Geld auszahlen&quot;&#10;    size: 36&#10;    items:&#10;      # Border items&#10;      border:&#10;        material: &quot;BLACK_STAINED_GLASS_PANE&quot;&#10;        name: &quot;&amp;7&quot;&#10;        lore: []&#10;      &#10;      # Player head&#10;      player-head:&#10;        material: &quot;PLAYER_HEAD&quot;&#10;        name: &quot;&amp;e&amp;lDEIN ACCOUNT&quot;&#10;        lore:&#10;          - &quot;&amp;7&quot;&#10;          - &quot;&amp;7Bank Guthaben: &amp;e%bank_balance%&quot;&#10;          - &quot;&amp;7Guthaben: &amp;e%vault_balance%&quot;&#10;      &#10;      # Withdraw amounts - Golden Nuggets&#10;      nugget:&#10;        material: &quot;GOLD_NUGGET&quot;&#10;        amounts: [10, 25, 50, 100, 250]&#10;        name: &quot;&amp;e&amp;l%amount%&quot;&#10;        lore:&#10;          - &quot;&amp;7Klicke um %amount% auszuzahlen&quot;&#10;      &#10;      # Withdraw amounts - Gold Ingots&#10;      ingot:&#10;        material: &quot;GOLD_INGOT&quot;&#10;        amounts: [500, 1000, 2500, 5000]&#10;        name: &quot;&amp;e&amp;l%amount%&quot;&#10;        lore:&#10;          - &quot;&amp;7Klicke um %amount% auszuzahlen&quot;&#10;      &#10;      # Withdraw amounts - Gold Blocks&#10;      block:&#10;        material: &quot;GOLD_BLOCK&quot;&#10;        amounts: [10000, 25000, 50000, 100000]&#10;        name: &quot;&amp;e&amp;l%amount%&quot;&#10;        lore:&#10;          - &quot;&amp;7Klicke um %amount% auszuzahlen&quot;&#10;      &#10;      # Back button&#10;      back:&#10;        material: &quot;ARROW&quot;&#10;        name: &quot;&amp;c&amp;lZURÜCK&quot;&#10;        lore:&#10;          - &quot;&amp;7Klicke um zurück zu kommen&quot;&#10;      &#10;      # Info item&#10;      info:&#10;        material: &quot;PAPER&quot;&#10;        name: &quot;&amp;e&amp;lINFO&quot;&#10;        lore:&#10;          - &quot;&amp;7&quot;&#10;          - &quot;&amp;7Das maximum zum auszahlen ist 1M&quot;&#10;      &#10;      # Close button&#10;      close:&#10;        material: &quot;SPRUCE_DOOR&quot;&#10;        name: &quot;&amp;c&amp;lSCHLIEßEN&quot;&#10;        lore:&#10;          - &quot;&amp;7Klicke zum Schließen&quot;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/lang/gui-de.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/lang/gui-de.yml" />
              <option name="originalContent" value="# CitybuildSystem GUI Configuration&#10;&#10;# Home GUI Settings&#10;home-gui:&#10;  title: &quot;&amp;6&amp;lCBSYSTEM &amp;8» Deine Homes&quot;&#10;  size: 54&#10;&#10;  # Item Materials and Settings&#10;  items:&#10;    # Border items (glass panes around the GUI)&#10;    border:&#10;      material: &quot;BLACK_STAINED_GLASS_PANE&quot;&#10;      name: &quot;&amp;7&quot;&#10;      lore: []&#10;&#10;    # Close button (bottom right)&#10;    close:&#10;      material: &quot;SPRUCE_DOOR&quot;&#10;      name: &quot;&amp;c&amp;lSCHLIEßEN&quot;&#10;      lore:&#10;        - &quot;&amp;7Klicke zum Schließen&quot;&#10;&#10;    # Info item (middle bottom)&#10;    info:&#10;      material: &quot;PAPER&quot;&#10;      name: &quot;&amp;e&amp;lINFO&quot;&#10;      lore:&#10;        - &quot;&amp;7&quot;&#10;        - &quot;&amp;7Sie können weitere &amp;eHomes &amp;7kaufen.&quot;&#10;        - &quot;&amp;7&quot;&#10;        - &quot;&amp;7Homes: &amp;e%used%&amp;8/&amp;e%max%&quot;&#10;        - &quot;&amp;7Maximal kaufbar: &amp;e28&quot;&#10;&#10;    # Existing home items&#10;    home-set:&#10;      material: &quot;WHITE_BED&quot;&#10;      name: &quot;&amp;e&amp;lHOME %name%&quot;&#10;      lore:&#10;        - &quot;&amp;7&quot;&#10;        - &quot;&amp;7Linksklick zum Teleportieren&quot;&#10;        - &quot;&amp;7Rechtsklick zum Löschen&quot;&#10;&#10;    # Empty home slots (can be set)&#10;    home-empty:&#10;      material: &quot;RED_BED&quot;&#10;      name: &quot;&amp;e&amp;lHOME SETZEN&quot;&#10;      lore:&#10;        - &quot;&amp;7Klicke um ein Home zu setzen&quot;&#10;&#10;    # Locked home slots (need to be purchased)&#10;    home-locked:&#10;      material: &quot;GRAY_BED&quot;&#10;      name: &quot;&amp;e&amp;lHOME KAUFEN&quot;&#10;      lore:&#10;        - &quot;&amp;7&quot;&#10;        - &quot;&amp;7Preis: &amp;e%price%$&quot;&#10;        - &quot;&amp;7Klicke zum kaufen&quot;&#10;&#10;# Bank GUI Settings&#10;bank-gui:&#10;  # Main Bank GUI&#10;  main:&#10;    title: &quot;&amp;6&amp;lCBSYSTEM &amp;8» Deine Bank&quot;&#10;    size: 45&#10;    items:&#10;      # Border items (glass panes around the GUI)&#10;      border:&#10;        material: &quot;BLACK_STAINED_GLASS_PANE&quot;&#10;        name: &quot;&amp;7&quot;&#10;        lore: []&#10;&#10;      # Player head (shows account info)&#10;      player-head:&#10;        material: &quot;PLAYER_HEAD&quot;&#10;        name: &quot;&amp;e&amp;lDEIN ACCOUNT&quot;&#10;        lore:&#10;          - &quot;&amp;7&quot;&#10;          - &quot;&amp;7Bank Guthaben: &amp;e%bank_balance%&quot;&#10;          - &quot;&amp;7Guthaben: &amp;e%vault_balance%&quot;&#10;&#10;      # Deposit button&#10;      deposit:&#10;        material: &quot;LIME_DYE&quot;&#10;        name: &quot;&amp;e&amp;lGELD EINZAHLEN&quot;&#10;        lore:&#10;          - &quot;&amp;7Klicke um Geld einzuzahlen&quot;&#10;&#10;      # Withdraw button&#10;      withdraw:&#10;        material: &quot;RED_DYE&quot;&#10;        name: &quot;&amp;e&amp;lGELD AUSZAHLEN&quot;&#10;        lore:&#10;          - &quot;&amp;7Klicke um Geld auszuzahlen&quot;&#10;&#10;      # Info item&#10;      info:&#10;        material: &quot;PAPER&quot;&#10;        name: &quot;&amp;e&amp;lINFO&quot;&#10;        lore:&#10;          - &quot;&amp;7&quot;&#10;          - &quot;&amp;7Das maximum zum einzahlen ist 100K&quot;&#10;&#10;      # Close button&#10;      close:&#10;        material: &quot;SPRUCE_DOOR&quot;&#10;        name: &quot;&amp;c&amp;lSCHLIEßEN&quot;&#10;        lore:&#10;          - &quot;&amp;7Klicke zum Schließen&quot;&#10;&#10;  # Deposit GUI&#10;  deposit:&#10;    title: &quot;&amp;6&amp;lCBSYSTEM &amp;8» Geld einzahlen&quot;&#10;    size: 36&#10;    items:&#10;      # Border items&#10;      border:&#10;        material: &quot;BLACK_STAINED_GLASS_PANE&quot;&#10;        name: &quot;&amp;7&quot;&#10;        lore: []&#10;&#10;      # Player head&#10;      player-head:&#10;        material: &quot;PLAYER_HEAD&quot;&#10;        name: &quot;&amp;e&amp;lDEIN ACCOUNT&quot;&#10;        lore:&#10;          - &quot;&amp;7&quot;&#10;          - &quot;&amp;7Bank Guthaben: &amp;e%bank_balance%&quot;&#10;          - &quot;&amp;7Guthaben: &amp;e%vault_balance%&quot;&#10;&#10;      # Deposit amounts - Golden Nuggets&#10;      nugget:&#10;        material: &quot;GOLD_NUGGET&quot;&#10;        amounts: [10, 25, 50, 100, 250]&#10;        name: &quot;&amp;e&amp;l%amount%&quot;&#10;        lore:&#10;          - &quot;&amp;7Klicke um %amount% einzuzahlen&quot;&#10;&#10;      # Deposit amounts - Gold Ingots&#10;      ingot:&#10;        material: &quot;GOLD_INGOT&quot;&#10;        amounts: [500, 1000, 2500, 5000]&#10;        name: &quot;&amp;e&amp;l%amount%&quot;&#10;        lore:&#10;          - &quot;&amp;7Klicke um %amount% einzuzahlen&quot;&#10;&#10;      # Deposit amounts - Gold Blocks&#10;      block:&#10;        material: &quot;GOLD_BLOCK&quot;&#10;        amounts: [10000, 25000, 50000, 100000]&#10;        name: &quot;&amp;e&amp;l%amount%&quot;&#10;        lore:&#10;          - &quot;&amp;7Klicke um %amount% einzuzahlen&quot;&#10;&#10;      # Back button&#10;      back:&#10;        material: &quot;ARROW&quot;&#10;        name: &quot;&amp;c&amp;lZURÜCK&quot;&#10;        lore:&#10;          - &quot;&amp;7Klicke um zurück zu kommen&quot;&#10;&#10;      # Info item&#10;      info:&#10;        material: &quot;PAPER&quot;&#10;        name: &quot;&amp;e&amp;lINFO&quot;&#10;        lore:&#10;          - &quot;&amp;7&quot;&#10;          - &quot;&amp;7Das maximum zum einzahlen ist 100K&quot;&#10;&#10;      # Close button&#10;      close:&#10;        material: &quot;SPRUCE_DOOR&quot;&#10;        name: &quot;&amp;c&amp;lSCHLIEßEN&quot;&#10;        lore:&#10;          - &quot;&amp;7Klicke zum Schließen&quot;&#10;&#10;  # Withdraw GUI&#10;  withdraw:&#10;    title: &quot;&amp;6&amp;lCBSYSTEM &amp;8» Geld auszahlen&quot;&#10;    size: 36&#10;    items:&#10;      # Border items&#10;      border:&#10;        material: &quot;BLACK_STAINED_GLASS_PANE&quot;&#10;        name: &quot;&amp;7&quot;&#10;        lore: []&#10;&#10;      # Player head&#10;      player-head:&#10;        material: &quot;PLAYER_HEAD&quot;&#10;        name: &quot;&amp;e&amp;lDEIN ACCOUNT&quot;&#10;        lore:&#10;          - &quot;&amp;7&quot;&#10;          - &quot;&amp;7Bank Guthaben: &amp;e%bank_balance%&quot;&#10;          - &quot;&amp;7Guthaben: &amp;e%vault_balance%&quot;&#10;&#10;      # Withdraw amounts - Golden Nuggets&#10;      nugget:&#10;        material: &quot;GOLD_NUGGET&quot;&#10;        amounts: [10, 25, 50, 100, 250]&#10;        name: &quot;&amp;e&amp;l%amount%&quot;&#10;        lore:&#10;          - &quot;&amp;7Klicke um %amount% auszuzahlen&quot;&#10;&#10;      # Withdraw amounts - Gold Ingots&#10;      ingot:&#10;        material: &quot;GOLD_INGOT&quot;&#10;        amounts: [500, 1000, 2500, 5000]&#10;        name: &quot;&amp;e&amp;l%amount%&quot;&#10;        lore:&#10;          - &quot;&amp;7Klicke um %amount% auszuzahlen&quot;&#10;&#10;      # Withdraw amounts - Gold Blocks&#10;      block:&#10;        material: &quot;GOLD_BLOCK&quot;&#10;        amounts: [10000, 25000, 50000, 100000]&#10;        name: &quot;&amp;e&amp;l%amount%&quot;&#10;        lore:&#10;          - &quot;&amp;7Klicke um %amount% auszuzahlen&quot;&#10;&#10;      # Back button&#10;      back:&#10;        material: &quot;ARROW&quot;&#10;        name: &quot;&amp;c&amp;lZURÜCK&quot;&#10;        lore:&#10;          - &quot;&amp;7Klicke um zurück zu kommen&quot;&#10;&#10;      # Info item&#10;      info:&#10;        material: &quot;PAPER&quot;&#10;        name: &quot;&amp;e&amp;lINFO&quot;&#10;        lore:&#10;          - &quot;&amp;7&quot;&#10;          - &quot;&amp;7Das maximum zum auszahlen ist 1M&quot;&#10;&#10;      # Close button&#10;      close:&#10;        material: &quot;SPRUCE_DOOR&quot;&#10;        name: &quot;&amp;c&amp;lSCHLIEßEN&quot;&#10;        lore:&#10;          - &quot;&amp;7Klicke zum Schließen&quot;&#10;" />
              <option name="updatedContent" value="# CitybuildSystem GUI Configuration&#10;&#10;# Home GUI Settings&#10;home-gui:&#10;  title: &quot;&amp;6&amp;lCBSYSTEM &amp;8» Deine Homes&quot;&#10;  size: 54&#10;&#10;  # Item Materials and Settings&#10;  items:&#10;    # Border items (glass panes around the GUI)&#10;    border:&#10;      material: &quot;BLACK_STAINED_GLASS_PANE&quot;&#10;      name: &quot;&amp;7&quot;&#10;      lore: []&#10;&#10;    # Close button (bottom right)&#10;    close:&#10;      material: &quot;SPRUCE_DOOR&quot;&#10;      name: &quot;&amp;c&amp;lSCHLIEßEN&quot;&#10;      lore:&#10;        - &quot;&amp;7Klicke zum Schließen&quot;&#10;&#10;    # Info item (middle bottom)&#10;    info:&#10;      material: &quot;PAPER&quot;&#10;      name: &quot;&amp;e&amp;lINFO&quot;&#10;      lore:&#10;        - &quot;&amp;7&quot;&#10;        - &quot;&amp;7Sie können weitere &amp;eHomes &amp;7kaufen.&quot;&#10;        - &quot;&amp;7&quot;&#10;        - &quot;&amp;7Homes: &amp;e%used%&amp;8/&amp;e%max%&quot;&#10;        - &quot;&amp;7Maximal kaufbar: &amp;e28&quot;&#10;&#10;    # Existing home items&#10;    home-set:&#10;      material: &quot;WHITE_BED&quot;&#10;      name: &quot;&amp;e&amp;lHOME %name%&quot;&#10;      lore:&#10;        - &quot;&amp;7&quot;&#10;        - &quot;&amp;7Linksklick zum Teleportieren&quot;&#10;        - &quot;&amp;7Rechtsklick zum Löschen&quot;&#10;&#10;    # Empty home slots (can be set)&#10;    home-empty:&#10;      material: &quot;RED_BED&quot;&#10;      name: &quot;&amp;e&amp;lHOME SETZEN&quot;&#10;      lore:&#10;        - &quot;&amp;7Klicke um ein Home zu setzen&quot;&#10;&#10;    # Locked home slots (need to be purchased)&#10;    home-locked:&#10;      material: &quot;GRAY_BED&quot;&#10;      name: &quot;&amp;e&amp;lHOME KAUFEN&quot;&#10;      lore:&#10;        - &quot;&amp;7&quot;&#10;        - &quot;&amp;7Preis: &amp;e%price%$&quot;&#10;        - &quot;&amp;7Klicke zum kaufen&quot;&#10;&#10;    # Navigation items&#10;    previous-page:&#10;      material: &quot;ARROW&quot;&#10;      name: &quot;&amp;c&amp;lVORHERIGE SEITE&quot;&#10;      lore:&#10;        - &quot;&amp;7Klicke um zur vorherigen&quot;&#10;        - &quot;&amp;7Seite zu gelangen&quot;&#10;&#10;    next-page:&#10;      material: &quot;ARROW&quot;&#10;      name: &quot;&amp;a&amp;lNÄCHSTE SEITE&quot;&#10;      lore:&#10;        - &quot;&amp;7Klicke um zur nächsten&quot;&#10;        - &quot;&amp;7Seite zu gelangen&quot;&#10;&#10;    # Page info item&#10;    page-info:&#10;      material: &quot;BOOK&quot;&#10;      name: &quot;&amp;e&amp;lSEITE %current%/%total%&quot;&#10;      lore:&#10;        - &quot;&amp;7Du befindest dich auf&quot;&#10;        - &quot;&amp;7Seite &amp;e%current% &amp;7von &amp;e%total%&quot;&#10;&#10;# Bank GUI Settings&#10;bank-gui:&#10;  # Main Bank GUI&#10;  main:&#10;    title: &quot;&amp;6&amp;lCBSYSTEM &amp;8» Deine Bank&quot;&#10;    size: 45&#10;    items:&#10;      # Border items (glass panes around the GUI)&#10;      border:&#10;        material: &quot;BLACK_STAINED_GLASS_PANE&quot;&#10;        name: &quot;&amp;7&quot;&#10;        lore: []&#10;&#10;      # Player head (shows account info)&#10;      player-head:&#10;        material: &quot;PLAYER_HEAD&quot;&#10;        name: &quot;&amp;e&amp;lDEIN ACCOUNT&quot;&#10;        lore:&#10;          - &quot;&amp;7&quot;&#10;          - &quot;&amp;7Bank Guthaben: &amp;e%bank_balance%&quot;&#10;          - &quot;&amp;7Guthaben: &amp;e%vault_balance%&quot;&#10;&#10;      # Deposit button&#10;      deposit:&#10;        material: &quot;LIME_DYE&quot;&#10;        name: &quot;&amp;e&amp;lGELD EINZAHLEN&quot;&#10;        lore:&#10;          - &quot;&amp;7Klicke um Geld einzuzahlen&quot;&#10;&#10;      # Withdraw button&#10;      withdraw:&#10;        material: &quot;RED_DYE&quot;&#10;        name: &quot;&amp;e&amp;lGELD AUSZAHLEN&quot;&#10;        lore:&#10;          - &quot;&amp;7Klicke um Geld auszuzahlen&quot;&#10;&#10;      # Info item&#10;      info:&#10;        material: &quot;PAPER&quot;&#10;        name: &quot;&amp;e&amp;lINFO&quot;&#10;        lore:&#10;          - &quot;&amp;7&quot;&#10;          - &quot;&amp;7Das maximum zum einzahlen ist 100K&quot;&#10;&#10;      # Close button&#10;      close:&#10;        material: &quot;SPRUCE_DOOR&quot;&#10;        name: &quot;&amp;c&amp;lSCHLIEßEN&quot;&#10;        lore:&#10;          - &quot;&amp;7Klicke zum Schließen&quot;&#10;&#10;  # Deposit GUI&#10;  deposit:&#10;    title: &quot;&amp;6&amp;lCBSYSTEM &amp;8» Geld einzahlen&quot;&#10;    size: 36&#10;    items:&#10;      # Border items&#10;      border:&#10;        material: &quot;BLACK_STAINED_GLASS_PANE&quot;&#10;        name: &quot;&amp;7&quot;&#10;        lore: []&#10;&#10;      # Player head&#10;      player-head:&#10;        material: &quot;PLAYER_HEAD&quot;&#10;        name: &quot;&amp;e&amp;lDEIN ACCOUNT&quot;&#10;        lore:&#10;          - &quot;&amp;7&quot;&#10;          - &quot;&amp;7Bank Guthaben: &amp;e%bank_balance%&quot;&#10;          - &quot;&amp;7Guthaben: &amp;e%vault_balance%&quot;&#10;&#10;      # Deposit amounts - Golden Nuggets&#10;      nugget:&#10;        material: &quot;GOLD_NUGGET&quot;&#10;        amounts: [10, 25, 50, 100, 250]&#10;        name: &quot;&amp;e&amp;l%amount%&quot;&#10;        lore:&#10;          - &quot;&amp;7Klicke um %amount% einzuzahlen&quot;&#10;&#10;      # Deposit amounts - Gold Ingots&#10;      ingot:&#10;        material: &quot;GOLD_INGOT&quot;&#10;        amounts: [500, 1000, 2500, 5000]&#10;        name: &quot;&amp;e&amp;l%amount%&quot;&#10;        lore:&#10;          - &quot;&amp;7Klicke um %amount% einzuzahlen&quot;&#10;&#10;      # Deposit amounts - Gold Blocks&#10;      block:&#10;        material: &quot;GOLD_BLOCK&quot;&#10;        amounts: [10000, 25000, 50000, 100000]&#10;        name: &quot;&amp;e&amp;l%amount%&quot;&#10;        lore:&#10;          - &quot;&amp;7Klicke um %amount% einzuzahlen&quot;&#10;&#10;      # Back button&#10;      back:&#10;        material: &quot;ARROW&quot;&#10;        name: &quot;&amp;c&amp;lZURÜCK&quot;&#10;        lore:&#10;          - &quot;&amp;7Klicke um zurück zu kommen&quot;&#10;&#10;      # Info item&#10;      info:&#10;        material: &quot;PAPER&quot;&#10;        name: &quot;&amp;e&amp;lINFO&quot;&#10;        lore:&#10;          - &quot;&amp;7&quot;&#10;          - &quot;&amp;7Das maximum zum einzahlen ist 100K&quot;&#10;&#10;      # Close button&#10;      close:&#10;        material: &quot;SPRUCE_DOOR&quot;&#10;        name: &quot;&amp;c&amp;lSCHLIEßEN&quot;&#10;        lore:&#10;          - &quot;&amp;7Klicke zum Schließen&quot;&#10;&#10;  # Withdraw GUI&#10;  withdraw:&#10;    title: &quot;&amp;6&amp;lCBSYSTEM &amp;8» Geld auszahlen&quot;&#10;    size: 36&#10;    items:&#10;      # Border items&#10;      border:&#10;        material: &quot;BLACK_STAINED_GLASS_PANE&quot;&#10;        name: &quot;&amp;7&quot;&#10;        lore: []&#10;&#10;      # Player head&#10;      player-head:&#10;        material: &quot;PLAYER_HEAD&quot;&#10;        name: &quot;&amp;e&amp;lDEIN ACCOUNT&quot;&#10;        lore:&#10;          - &quot;&amp;7&quot;&#10;          - &quot;&amp;7Bank Guthaben: &amp;e%bank_balance%&quot;&#10;          - &quot;&amp;7Guthaben: &amp;e%vault_balance%&quot;&#10;&#10;      # Withdraw amounts - Golden Nuggets&#10;      nugget:&#10;        material: &quot;GOLD_NUGGET&quot;&#10;        amounts: [10, 25, 50, 100, 250]&#10;        name: &quot;&amp;e&amp;l%amount%&quot;&#10;        lore:&#10;          - &quot;&amp;7Klicke um %amount% auszuzahlen&quot;&#10;&#10;      # Withdraw amounts - Gold Ingots&#10;      ingot:&#10;        material: &quot;GOLD_INGOT&quot;&#10;        amounts: [500, 1000, 2500, 5000]&#10;        name: &quot;&amp;e&amp;l%amount%&quot;&#10;        lore:&#10;          - &quot;&amp;7Klicke um %amount% auszuzahlen&quot;&#10;&#10;      # Withdraw amounts - Gold Blocks&#10;      block:&#10;        material: &quot;GOLD_BLOCK&quot;&#10;        amounts: [10000, 25000, 50000, 100000]&#10;        name: &quot;&amp;e&amp;l%amount%&quot;&#10;        lore:&#10;          - &quot;&amp;7Klicke um %amount% auszuzahlen&quot;&#10;&#10;      # Back button&#10;      back:&#10;        material: &quot;ARROW&quot;&#10;        name: &quot;&amp;c&amp;lZURÜCK&quot;&#10;        lore:&#10;          - &quot;&amp;7Klicke um zurück zu kommen&quot;&#10;&#10;      # Info item&#10;      info:&#10;        material: &quot;PAPER&quot;&#10;        name: &quot;&amp;e&amp;lINFO&quot;&#10;        lore:&#10;          - &quot;&amp;7&quot;&#10;          - &quot;&amp;7Das maximum zum auszahlen ist 1M&quot;&#10;&#10;      # Close button&#10;      close:&#10;        material: &quot;SPRUCE_DOOR&quot;&#10;        name: &quot;&amp;c&amp;lSCHLIEßEN&quot;&#10;        lore:&#10;          - &quot;&amp;7Klicke zum Schließen&quot;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/messages.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/messages.yml" />
              <option name="originalContent" value="# CitybuildSystem Messages&#10;&#10;# General Messages&#10;general:&#10;  no-permission: &quot;&amp;cDu hast keine Berechtigung für diesen Befehl!&quot;&#10;  only-players: &quot;&amp;cDieser Befehl kann nur von Spielern ausgeführt werden!&quot;&#10;  loading: &quot;&amp;7Lade...&quot;&#10;  error: &quot;&amp;cEin Fehler ist aufgetreten!&quot;&#10;  player-not-found: &quot;&amp;cSpieler &amp;e%player% &amp;cnicht gefunden!&quot;&#10;  player-offline: &quot;&amp;cSpieler &amp;e%player% &amp;cist offline!&quot;&#10;&#10;# Home Messages&#10;home:&#10;  teleporting: &quot;&amp;7Teleportiere zu Home &amp;e%home%&amp;7...&quot;&#10;  teleported: &quot;&amp;aDu wurdest zu Home &amp;e%home% &amp;ateleportiert!&quot;&#10;  teleport-cancelled: &quot;&amp;cTeleportation abgebrochen!&quot;&#10;  not-found: &quot;&amp;cDas Home &amp;e%home% &amp;cexistiert nicht!&quot;&#10;  already-exists: &quot;&amp;cDu hast bereits ein Home mit dem Namen &amp;e%home%&amp;c!&quot;&#10;  set-success: &quot;&amp;aHome &amp;e%home% &amp;aerfolgreich gesetzt!&quot;&#10;  delete-success: &quot;&amp;aHome &amp;e%home% &amp;aerfolgreich gelöscht!&quot;&#10;  max-homes-reached: &quot;&amp;cDu hast bereits die maximale Anzahl an Homes erreicht!&quot;&#10;  invalid-name: &quot;&amp;cUngültiger Home-Name! Verwende nur Buchstaben und Zahlen.&quot;&#10;  enter-name: &quot;&amp;7Gib den Namen für dein Home in den Chat ein:&quot;&#10;  enter-name-cancel: &quot;&amp;7Schreibe &amp;ccancel &amp;7zum Abbrechen.&quot;&#10;  purchase-success: &quot;&amp;aDu hast einen Home-Platz für &amp;e%price%$ &amp;agekauft!&quot;&#10;  insufficient-funds: &quot;&amp;cDu hast nicht genug Geld! Benötigt: &amp;e%price%$&quot;&#10;&#10;# Admin Messages&#10;admin:&#10;  gamemode-changed-self: &quot;&amp;aSpielmoduls zu &amp;e%gamemode% &amp;ageändert!&quot;&#10;  gamemode-changed-other: &quot;&amp;aSpielmoduls von &amp;e%player% &amp;azu &amp;e%gamemode% &amp;ageändert!&quot;&#10;  gamemode-changed-by: &quot;&amp;aDein Spielmoduls wurde zu &amp;e%gamemode% &amp;ageändert!&quot;&#10;  fly-enabled-self: &quot;&amp;aFlugmodus aktiviert!&quot;&#10;  fly-disabled-self: &quot;&amp;cFlugmodus deaktiviert!&quot;&#10;  fly-enabled-other: &quot;&amp;aFlugmodus für &amp;e%player% &amp;aaktiviert!&quot;&#10;  fly-disabled-other: &quot;&amp;cFlugmodus für &amp;e%player% &amp;cdeaktiviert!&quot;&#10;  fly-enabled-by: &quot;&amp;aDein Flugmodus wurde aktiviert!&quot;&#10;  fly-disabled-by: &quot;&amp;cDein Flugmodus wurde deaktiviert!&quot;&#10;  healed-self: &quot;&amp;aDu wurdest geheilt!&quot;&#10;  healed-other: &quot;&amp;e%player% &amp;awurde geheilt!&quot;&#10;  healed-by: &quot;&amp;aDu wurdest von &amp;e%player% &amp;ageheilt!&quot;&#10;  fed-self: &quot;&amp;aDu wurdest gesättigt!&quot;&#10;  fed-other: &quot;&amp;e%player% &amp;awurde gesättigt!&quot;&#10;  fed-by: &quot;&amp;aDu wurdest von &amp;e%player% &amp;agesättigt!&quot;&#10;  speed-changed-self: &quot;&amp;aGeschwindigkeit auf &amp;e%speed% &amp;agesetzt!&quot;&#10;  speed-changed-other: &quot;&amp;aGeschwindigkeit von &amp;e%player% &amp;aauf &amp;e%speed% &amp;agesetzt!&quot;&#10;  speed-changed-by: &quot;&amp;aDeine Geschwindigkeit wurde auf &amp;e%speed% &amp;agesetzt!&quot;&#10;  invalid-speed: &quot;&amp;cUngültige Geschwindigkeit! Verwende einen Wert zwischen %min% und %max%!&quot;&#10;  cleared-self: &quot;&amp;aInventar geleert!&quot;&#10;  cleared-other: &quot;&amp;aInventar von &amp;e%player% &amp;ageleert!&quot;&#10;  cleared-by: &quot;&amp;aDein Inventar wurde geleert!&quot;&#10;  vanish-enabled-self: &quot;&amp;aVanish aktiviert!&quot;&#10;  vanish-disabled-self: &quot;&amp;cVanish deaktiviert!&quot;&#10;  vanish-enabled-other: &quot;&amp;aVanish für &amp;e%player% &amp;aaktiviert!&quot;&#10;  vanish-disabled-other: &quot;&amp;cVanish für &amp;e%player% &amp;cdeaktiviert!&quot;&#10;  give-success: &quot;&amp;a%amount%x &amp;e%item% &amp;aan &amp;e%player% &amp;agegeben!&quot;&#10;  give-received: &quot;&amp;aDu hast %amount%x &amp;e%item% &amp;aerhalten!&quot;&#10;  invalid-item: &quot;&amp;cUngültiges Item: &amp;e%item%&quot;&#10;  invalid-amount: &quot;&amp;cUngültige Anzahl! Maximum: &amp;e%max%&quot;&#10;&#10;# Utility Messages&#10;utility:&#10;  trash-opened: &quot;&amp;aMüll-Interface geöffnet!&quot;&#10;  head-given-self: &quot;&amp;aDu hast deinen Kopf erhalten!&quot;&#10;  head-given-other: &quot;&amp;aDu hast den Kopf von &amp;e%player% &amp;aerhalten!&quot;&#10;  ec-opened-self: &quot;&amp;aEnderchest geöffnet!&quot;&#10;  ec-opened-other: &quot;&amp;aEnderchest von &amp;e%player% &amp;ageöffnet!&quot;&#10;  invsee-opened: &quot;&amp;aInventar von &amp;e%player% &amp;ageöffnet!&quot;&#10;  sign-success: &quot;&amp;aItem erfolgreich signiert!&quot;&#10;  sign-no-item: &quot;&amp;cHalte ein Item in der Hand!&quot;&#10;  meta-opened: &quot;&amp;aMeta-Editor geöffnet!&quot;&#10;  meta-no-item: &quot;&amp;cHalte ein Item in der Hand!&quot;&#10;&#10;# Teleport Messages&#10;teleport:&#10;  spawn-teleported: &quot;&amp;aDu wurdest zum Spawn teleportiert!&quot;&#10;  spawn-set: &quot;&amp;aSpawn erfolgreich gesetzt!&quot;&#10;  warp-teleported: &quot;&amp;aDu wurdest zum Warp &amp;e%warp% &amp;ateleportiert!&quot;&#10;  warp-not-found: &quot;&amp;cWarp &amp;e%warp% &amp;cexistiert nicht!&quot;&#10;  warp-created: &quot;&amp;aWarp &amp;e%warp% &amp;aerfolgreich erstellt!&quot;&#10;  warp-deleted: &quot;&amp;aWarp &amp;e%warp% &amp;aerfolgreich gelöscht!&quot;&#10;  warp-already-exists: &quot;&amp;cWarp &amp;e%warp% &amp;cexistiert bereits!&quot;&#10;  tpo-teleported: &quot;&amp;aDu wurdest zu &amp;e%player% &amp;ateleportiert!&quot;&#10;  tphere-teleported: &quot;&amp;e%player% &amp;awurde zu dir teleportiert!&quot;&#10;  tphere-teleported-by: &quot;&amp;aDu wurdest zu &amp;e%player% &amp;ateleportiert!&quot;&#10;  tpa-sent: &quot;&amp;aTeleport-Anfrage an &amp;e%player% &amp;agesendet!&quot;&#10;  tpa-received: &quot;&amp;e%player% &amp;amöchte sich zu dir teleportieren! &amp;7(/tpaccept oder /tpdeny)&quot;&#10;  tpahere-sent: &quot;&amp;aTeleport-Anfrage an &amp;e%player% &amp;agesendet!&quot;&#10;  tpahere-received: &quot;&amp;e%player% &amp;amöchte, dass du dich zu ihm teleportierst! &amp;7(/tpaccept oder /tpdeny)&quot;&#10;  tpa-accepted: &quot;&amp;aTeleport-Anfrage angenommen!&quot;&#10;  tpa-accepted-by: &quot;&amp;e%player% &amp;ahat deine Anfrage angenommen!&quot;&#10;  tpa-denied: &quot;&amp;cTeleport-Anfrage abgelehnt!&quot;&#10;  tpa-denied-by: &quot;&amp;e%player% &amp;chat deine Anfrage abgelehnt!&quot;&#10;  tpa-no-request: &quot;&amp;cKeine ausstehende Teleport-Anfrage!&quot;&#10;  tpa-timeout: &quot;&amp;cTeleport-Anfrage ist abgelaufen!&quot;&#10;  tpa-enabled: &quot;&amp;aTeleport-Anfragen aktiviert!&quot;&#10;  tpa-disabled: &quot;&amp;cTeleport-Anfragen deaktiviert!&quot;&#10;  tpa-player-disabled: &quot;&amp;cDieser Spieler hat Teleport-Anfragen deaktiviert!&quot;&#10;&#10;# Server Messages&#10;server:&#10;  broadcast: &quot;&amp;4[&amp;cBROADCAST&amp;4]&amp;r %message%&quot;&#10;  chat-cleared: &quot;&amp;aDer Chat wurde geleert!&quot;&#10;  slowchat-enabled: &quot;&amp;aSlowchat aktiviert! Verzögerung: &amp;e%delay% &amp;aSekundenen&quot;&#10;  slowchat-disabled: &quot;&amp;cSlowchat deaktiviert!&quot;&#10;  slowchat-wait: &quot;&amp;cBitte warte noch &amp;e%time% &amp;cSekunden bevor du wieder schreibst!&quot;&#10;  maintenance-enabled: &quot;&amp;cWartungsmodus aktiviert!&quot;&#10;  maintenance-disabled: &quot;&amp;aWartungsmodus deaktiviert!&quot;&#10;  maintenance-kick: &quot;&amp;cServer befindet sich im Wartungsmodus!&quot;&#10;  reload-success: &quot;&amp;aCBSystem erfolgreich neu geladen!&quot;&#10;  restart-countdown: &quot;&amp;cServer startet in &amp;e%time% &amp;cSekunden neu!&quot;&#10;  restart-cancelled: &quot;&amp;aServer-Neustart abgebrochen!&quot;&#10;&#10;# Social Messages&#10;social:&#10;  discord: &quot;&amp;9Discord: &amp;f%url%&quot;&#10;  youtube: &quot;&amp;cYouTube: &amp;f%url%&quot;&#10;  teamchat-enabled: &quot;&amp;aTeamchat aktiviert!&quot;&#10;  teamchat-disabled: &quot;&amp;cTeamchat deaktiviert!&quot;&#10;  teamchat-format: &quot;&amp;8[&amp;6TEAM&amp;8] &amp;e%player%&amp;8: &amp;f%message%&quot;&#10;  message-sent: &quot;&amp;7[&amp;aDu &amp;8-&gt; &amp;e%player%&amp;7] &amp;f%message%&quot;&#10;  message-received: &quot;&amp;7[&amp;e%player% &amp;8-&gt; &amp;aDu&amp;7] &amp;f%message%&quot;&#10;  message-self: &quot;&amp;cDu kannst dir nicht selbst schreiben!&quot;&#10;  no-reply-target: &quot;&amp;cNiemand zum Antworten gefunden!&quot;&#10;&#10;# Info Messages&#10;info:&#10;  playtime-self: &quot;&amp;aDeine Spielzeit: &amp;e%time%&quot;&#10;  playtime-other: &quot;&amp;aSpielzeit von &amp;e%player%&amp;a: &amp;e%time%&quot;&#10;&#10;# Entity Messages&#10;entity:&#10;  spawned: &quot;&amp;a%amount%x &amp;e%entity% &amp;agespawnt!&quot;&#10;  invalid-entity: &quot;&amp;cUngültiges Entity: &amp;e%entity%&quot;&#10;  spawn-failed: &quot;&amp;cFehler beim Spawnen von &amp;e%entity%&quot;&#10;&#10;# Sudo Messages&#10;sudo:&#10;  executed: &quot;&amp;aCommand &amp;e%command% &amp;aals &amp;e%player% &amp;aausgeführt!&quot;&#10;  message-sent: &quot;&amp;aNachricht '&amp;f%message%&amp;a' als &amp;e%player% &amp;agesendet!&quot;&#10;  failed: &quot;&amp;cFehler beim Ausführen des Commands!&quot;&#10;&#10;# GUI Messages&#10;gui:&#10;  border-name: &quot;&amp;7&quot;&#10;  close-name: &quot;&amp;c&amp;lSCHLIEßEN&quot;&#10;  close-lore:&#10;    - &quot;&amp;7Klicke zum Schließen&quot;&#10;  info-name: &quot;&amp;e&amp;lINFO&quot;&#10;  info-lore:&#10;    - &quot;&amp;7&quot;&#10;    - &quot;&amp;7Sie können weitere &amp;eHomes &amp;7kaufen.&quot;&#10;    - &quot;&amp;7&quot;&#10;    - &quot;&amp;7Homes: &amp;e%used%&amp;8/&amp;e%max%&quot;&#10;    - &quot;&amp;7Maximal kaufbar: &amp;e28&quot;&#10;  home-name: &quot;&amp;e&amp;lHOME %name%&quot;&#10;  home-lore:&#10;    - &quot;&amp;7&quot;&#10;    - &quot;&amp;7Linksklick zum Teleportieren&quot;&#10;    - &quot;&amp;7Rechtsklick zum Löschen&quot;&#10;  home-empty-name: &quot;&amp;e&amp;lHOME SETZEN&quot;&#10;  home-empty-lore:&#10;    - &quot;&amp;7Klicke um ein Home zu setzen&quot;&#10;  home-locked-name: &quot;&amp;e&amp;lHOME KAUFEN&quot;&#10;  home-locked-lore:&#10;    - &quot;&amp;7&quot;&#10;    - &quot;&amp;7Preis: &amp;e%price%$&quot;&#10;    - &quot;&amp;7Klicke zum kaufen&quot;&#10;  trash-title: &quot;&amp;4Müll&quot;&#10;  meta-title: &quot;&amp;6Item Meta Editor&quot;&#10;&#10;# Command Messages&#10;commands:&#10;  homes:&#10;    description: &quot;Öffnet das Home-Menü&quot;&#10;  home:&#10;    description: &quot;Teleportiert zu einem Home&quot;&#10;    usage: &quot;/home &lt;name&gt;&quot;&#10;  sethome:&#10;    description: &quot;Setzt ein Home an der aktuellen Position&quot;&#10;    usage: &quot;/sethome &lt;name&gt;&quot;&#10;  delhome:&#10;    description: &quot;Löscht ein gesetztes Home&quot;&#10;    usage: &quot;/delhome &lt;name&gt;&quot;&#10;  gamemode:&#10;    usage: &quot;/gamemode &lt;0|1|2|3&gt; [player]&quot;&#10;  fly:&#10;    usage: &quot;/fly [player]&quot;&#10;  heal:&#10;    usage: &quot;/heal [player]&quot;&#10;  feed:&#10;    usage: &quot;/feed [player]&quot;&#10;  speed:&#10;    usage: &quot;/speed &lt;value&gt; [player]&quot;&#10;  give:&#10;    usage: &quot;/give &lt;item&gt; [amount] [player]&quot;&#10;  clear:&#10;    usage: &quot;/clear [player]&quot;&#10;  vanish:&#10;    usage: &quot;/vanish [player]&quot;&#10;  head:&#10;    usage: &quot;/head [player]&quot;&#10;  ec:&#10;    usage: &quot;/ec [player]&quot;&#10;  invsee:&#10;    usage: &quot;/invsee &lt;player&gt;&quot;&#10;  sign:&#10;    usage: &quot;/sign &lt;text&gt;&quot;&#10;  spawn:&#10;    usage: &quot;/spawn&quot;&#10;  warp:&#10;    usage: &quot;/warp &lt;name&gt;&quot;&#10;  setwarp:&#10;    usage: &quot;/setwarp &lt;name&gt;&quot;&#10;  delwarp:&#10;    usage: &quot;/delwarp &lt;name&gt;&quot;&#10;  tpo:&#10;    usage: &quot;/tpo &lt;player&gt;&quot;&#10;  tphere:&#10;    usage: &quot;/tphere &lt;player&gt;&quot;&#10;  tpa:&#10;    usage: &quot;/tpa &lt;player&gt;&quot;&#10;  tpahere:&#10;    usage: &quot;/tpahere &lt;player&gt;&quot;&#10;  broadcast:&#10;    usage: &quot;/broadcast &lt;message&gt;&quot;&#10;  message:&#10;    usage: &quot;/message &lt;player&gt; &lt;message&gt;&quot;&#10;  respond:&#10;    usage: &quot;/respond &lt;message&gt;&quot;&#10;  playtime:&#10;    usage: &quot;/playtime [player]&quot;&#10;  spawnentity:&#10;    usage: &quot;/spawnentity &lt;entity&gt; [amount]&quot;&#10;  sudo:&#10;    usage: &quot;/sudo &lt;player&gt; &lt;command|message&gt;&quot;&#10;" />
              <option name="updatedContent" value="# CitybuildSystem Messages&#13;&#10;&#13;&#10;# General Messages&#13;&#10;general:&#13;&#10;  no-permission: &quot;&amp;cDu hast keine Berechtigung für diesen Befehl!&quot;&#13;&#10;  only-players: &quot;&amp;cDieser Befehl kann nur von Spielern ausgeführt werden!&quot;&#13;&#10;  loading: &quot;&amp;7Lade...&quot;&#13;&#10;  error: &quot;&amp;cEin Fehler ist aufgetreten!&quot;&#13;&#10;  player-not-found: &quot;&amp;cSpieler &amp;e%player% &amp;cnicht gefunden!&quot;&#13;&#10;  player-offline: &quot;&amp;cSpieler &amp;e%player% &amp;cist offline!&quot;&#13;&#10;&#13;&#10;# Home Messages&#13;&#10;home:&#13;&#10;  teleporting: &quot;&amp;7Teleportiere zu Home &amp;e%home%&amp;7...&quot;&#13;&#10;  teleported: &quot;&amp;aDu wurdest zu Home &amp;e%home% &amp;ateleportiert!&quot;&#13;&#10;  teleport-cancelled: &quot;&amp;cTeleportation abgebrochen!&quot;&#13;&#10;  not-found: &quot;&amp;cDas Home &amp;e%home% &amp;cexistiert nicht!&quot;&#13;&#10;  already-exists: &quot;&amp;cDu hast bereits ein Home mit dem Namen &amp;e%home%&amp;c!&quot;&#13;&#10;  set-success: &quot;&amp;aHome &amp;e%home% &amp;aerfolgreich gesetzt!&quot;&#13;&#10;  delete-success: &quot;&amp;aHome &amp;e%home% &amp;aerfolgreich gelöscht!&quot;&#13;&#10;  max-homes-reached: &quot;&amp;cDu hast bereits die maximale Anzahl an Homes erreicht!&quot;&#13;&#10;  invalid-name: &quot;&amp;cUngültiger Home-Name! Verwende nur Buchstaben und Zahlen.&quot;&#13;&#10;  enter-name: &quot;&amp;7Gib den Namen für dein Home in den Chat ein:&quot;&#13;&#10;  enter-name-cancel: &quot;&amp;7Schreibe &amp;ccancel &amp;7zum Abbrechen.&quot;&#13;&#10;  purchase-success: &quot;&amp;aDu hast einen Home-Platz für &amp;e%price%$ &amp;agekauft!&quot;&#13;&#10;  insufficient-funds: &quot;&amp;cDu hast nicht genug Geld! Benötigt: &amp;e%price%$&quot;&#13;&#10;&#13;&#10;# Admin Messages&#13;&#10;admin:&#13;&#10;  gamemode-changed-self: &quot;&amp;aSpielmoduls zu &amp;e%gamemode% &amp;ageändert!&quot;&#13;&#10;  gamemode-changed-other: &quot;&amp;aSpielmoduls von &amp;e%player% &amp;azu &amp;e%gamemode% &amp;ageändert!&quot;&#13;&#10;  gamemode-changed-by: &quot;&amp;aDein Spielmoduls wurde zu &amp;e%gamemode% &amp;ageändert!&quot;&#13;&#10;  fly-enabled-self: &quot;&amp;aFlugmodus aktiviert!&quot;&#13;&#10;  fly-disabled-self: &quot;&amp;cFlugmodus deaktiviert!&quot;&#13;&#10;  fly-enabled-other: &quot;&amp;aFlugmodus für &amp;e%player% &amp;aaktiviert!&quot;&#13;&#10;  fly-disabled-other: &quot;&amp;cFlugmodus für &amp;e%player% &amp;cdeaktiviert!&quot;&#13;&#10;  fly-enabled-by: &quot;&amp;aDein Flugmodus wurde aktiviert!&quot;&#13;&#10;  fly-disabled-by: &quot;&amp;cDein Flugmodus wurde deaktiviert!&quot;&#13;&#10;  healed-self: &quot;&amp;aDu wurdest geheilt!&quot;&#13;&#10;  healed-other: &quot;&amp;e%player% &amp;awurde geheilt!&quot;&#13;&#10;  healed-by: &quot;&amp;aDu wurdest von &amp;e%player% &amp;ageheilt!&quot;&#13;&#10;  fed-self: &quot;&amp;aDu wurdest gesättigt!&quot;&#13;&#10;  fed-other: &quot;&amp;e%player% &amp;awurde gesättigt!&quot;&#13;&#10;  fed-by: &quot;&amp;aDu wurdest von &amp;e%player% &amp;agesättigt!&quot;&#13;&#10;  speed-changed-self: &quot;&amp;aGeschwindigkeit auf &amp;e%speed% &amp;agesetzt!&quot;&#13;&#10;  speed-changed-other: &quot;&amp;aGeschwindigkeit von &amp;e%player% &amp;aauf &amp;e%speed% &amp;agesetzt!&quot;&#13;&#10;  speed-changed-by: &quot;&amp;aDeine Geschwindigkeit wurde auf &amp;e%speed% &amp;agesetzt!&quot;&#13;&#10;  invalid-speed: &quot;&amp;cUngültige Geschwindigkeit! Verwende einen Wert zwischen %min% und %max%!&quot;&#13;&#10;  cleared-self: &quot;&amp;aInventar geleert!&quot;&#13;&#10;  cleared-other: &quot;&amp;aInventar von &amp;e%player% &amp;ageleert!&quot;&#13;&#10;  cleared-by: &quot;&amp;aDein Inventar wurde geleert!&quot;&#13;&#10;  vanish-enabled-self: &quot;&amp;aVanish aktiviert!&quot;&#13;&#10;  vanish-disabled-self: &quot;&amp;cVanish deaktiviert!&quot;&#13;&#10;  vanish-enabled-other: &quot;&amp;aVanish für &amp;e%player% &amp;aaktiviert!&quot;&#13;&#10;  vanish-disabled-other: &quot;&amp;cVanish für &amp;e%player% &amp;cdeaktiviert!&quot;&#13;&#10;  give-success: &quot;&amp;a%amount%x &amp;e%item% &amp;aan &amp;e%player% &amp;agegeben!&quot;&#13;&#10;  give-received: &quot;&amp;aDu hast %amount%x &amp;e%item% &amp;aerhalten!&quot;&#13;&#10;  invalid-item: &quot;&amp;cUngültiges Item: &amp;e%item%&quot;&#13;&#10;  invalid-amount: &quot;&amp;cUngültige Anzahl! Maximum: &amp;e%max%&quot;&#13;&#10;&#13;&#10;# Utility Messages&#13;&#10;utility:&#13;&#10;  trash-opened: &quot;&amp;aMüll-Interface geöffnet!&quot;&#13;&#10;  head-given-self: &quot;&amp;aDu hast deinen Kopf erhalten!&quot;&#13;&#10;  head-given-other: &quot;&amp;aDu hast den Kopf von &amp;e%player% &amp;aerhalten!&quot;&#13;&#10;  ec-opened-self: &quot;&amp;aEnderchest geöffnet!&quot;&#13;&#10;  ec-opened-other: &quot;&amp;aEnderchest von &amp;e%player% &amp;ageöffnet!&quot;&#13;&#10;  invsee-opened: &quot;&amp;aInventar von &amp;e%player% &amp;ageöffnet!&quot;&#13;&#10;  sign-success: &quot;&amp;aItem erfolgreich signiert!&quot;&#13;&#10;  sign-no-item: &quot;&amp;cHalte ein Item in der Hand!&quot;&#13;&#10;  meta-opened: &quot;&amp;aMeta-Editor geöffnet!&quot;&#13;&#10;  meta-no-item: &quot;&amp;cHalte ein Item in der Hand!&quot;&#13;&#10;&#13;&#10;# Teleport Messages&#13;&#10;teleport:&#13;&#10;  spawn-teleported: &quot;&amp;aDu wurdest zum Spawn teleportiert!&quot;&#13;&#10;  spawn-set: &quot;&amp;aSpawn erfolgreich gesetzt!&quot;&#13;&#10;  warp-teleported: &quot;&amp;aDu wurdest zum Warp &amp;e%warp% &amp;ateleportiert!&quot;&#13;&#10;  warp-not-found: &quot;&amp;cWarp &amp;e%warp% &amp;cexistiert nicht!&quot;&#13;&#10;  warp-created: &quot;&amp;aWarp &amp;e%warp% &amp;aerfolgreich erstellt!&quot;&#13;&#10;  warp-deleted: &quot;&amp;aWarp &amp;e%warp% &amp;aerfolgreich gelöscht!&quot;&#13;&#10;  warp-already-exists: &quot;&amp;cWarp &amp;e%warp% &amp;cexistiert bereits!&quot;&#13;&#10;  tpo-teleported: &quot;&amp;aDu wurdest zu &amp;e%player% &amp;ateleportiert!&quot;&#13;&#10;  tphere-teleported: &quot;&amp;e%player% &amp;awurde zu dir teleportiert!&quot;&#13;&#10;  tphere-teleported-by: &quot;&amp;aDu wurdest zu &amp;e%player% &amp;ateleportiert!&quot;&#13;&#10;  tpa-sent: &quot;&amp;aTeleport-Anfrage an &amp;e%player% &amp;agesendet!&quot;&#13;&#10;  tpa-received: &quot;&amp;e%player% &amp;amöchte sich zu dir teleportieren! &amp;7(/tpaccept oder /tpdeny)&quot;&#13;&#10;  tpahere-sent: &quot;&amp;aTeleport-Anfrage an &amp;e%player% &amp;agesendet!&quot;&#13;&#10;  tpahere-received: &quot;&amp;e%player% &amp;amöchte, dass du dich zu ihm teleportierst! &amp;7(/tpaccept oder /tpdeny)&quot;&#13;&#10;  tpa-accepted: &quot;&amp;aTeleport-Anfrage angenommen!&quot;&#13;&#10;  tpa-accepted-by: &quot;&amp;e%player% &amp;ahat deine Anfrage angenommen!&quot;&#13;&#10;  tpa-denied: &quot;&amp;cTeleport-Anfrage abgelehnt!&quot;&#13;&#10;  tpa-denied-by: &quot;&amp;e%player% &amp;chat deine Anfrage abgelehnt!&quot;&#13;&#10;  tpa-no-request: &quot;&amp;cKeine ausstehende Teleport-Anfrage!&quot;&#13;&#10;  tpa-timeout: &quot;&amp;cTeleport-Anfrage ist abgelaufen!&quot;&#13;&#10;  tpa-enabled: &quot;&amp;aTeleport-Anfragen aktiviert!&quot;&#13;&#10;  tpa-disabled: &quot;&amp;cTeleport-Anfragen deaktiviert!&quot;&#13;&#10;  tpa-player-disabled: &quot;&amp;cDieser Spieler hat Teleport-Anfragen deaktiviert!&quot;&#13;&#10;&#13;&#10;# Server Messages&#13;&#10;server:&#13;&#10;  broadcast: &quot;&amp;4[&amp;cBROADCAST&amp;4]&amp;r %message%&quot;&#13;&#10;  chat-cleared: &quot;&amp;aDer Chat wurde geleert!&quot;&#13;&#10;  slowchat-enabled: &quot;&amp;aSlowchat aktiviert! Verzögerung: &amp;e%delay% &amp;aSekundenen&quot;&#13;&#10;  slowchat-disabled: &quot;&amp;cSlowchat deaktiviert!&quot;&#13;&#10;  slowchat-wait: &quot;&amp;cBitte warte noch &amp;e%time% &amp;cSekunden bevor du wieder schreibst!&quot;&#13;&#10;  maintenance-enabled: &quot;&amp;cWartungsmodus aktiviert!&quot;&#13;&#10;  maintenance-disabled: &quot;&amp;aWartungsmodus deaktiviert!&quot;&#13;&#10;  maintenance-kick: &quot;&amp;cServer befindet sich im Wartungsmodus!&quot;&#13;&#10;  reload-success: &quot;&amp;aCBSystem erfolgreich neu geladen!&quot;&#13;&#10;  restart-countdown: &quot;&amp;cServer startet in &amp;e%time% &amp;cSekunden neu!&quot;&#13;&#10;  restart-cancelled: &quot;&amp;aServer-Neustart abgebrochen!&quot;&#13;&#10;&#13;&#10;# Social Messages&#13;&#10;social:&#13;&#10;  discord: &quot;&amp;9Discord: &amp;f%url%&quot;&#13;&#10;  youtube: &quot;&amp;cYouTube: &amp;f%url%&quot;&#13;&#10;  teamchat-enabled: &quot;&amp;aTeamchat aktiviert!&quot;&#13;&#10;  teamchat-disabled: &quot;&amp;cTeamchat deaktiviert!&quot;&#13;&#10;  teamchat-format: &quot;&amp;8[&amp;6TEAM&amp;8] &amp;e%player%&amp;8: &amp;f%message%&quot;&#13;&#10;  message-sent: &quot;&amp;7[&amp;aDu &amp;8-&gt; &amp;e%player%&amp;7] &amp;f%message%&quot;&#13;&#10;  message-received: &quot;&amp;7[&amp;e%player% &amp;8-&gt; &amp;aDu&amp;7] &amp;f%message%&quot;&#13;&#10;  message-self: &quot;&amp;cDu kannst dir nicht selbst schreiben!&quot;&#13;&#10;  no-reply-target: &quot;&amp;cNiemand zum Antworten gefunden!&quot;&#13;&#10;&#13;&#10;# Info Messages&#13;&#10;info:&#13;&#10;  playtime-self: &quot;&amp;aDeine Spielzeit: &amp;e%time%&quot;&#13;&#10;  playtime-other: &quot;&amp;aSpielzeit von &amp;e%player%&amp;a: &amp;e%time%&quot;&#13;&#10;&#13;&#10;# Entity Messages&#13;&#10;entity:&#13;&#10;  spawned: &quot;&amp;a%amount%x &amp;e%entity% &amp;agespawnt!&quot;&#13;&#10;  invalid-entity: &quot;&amp;cUngültiges Entity: &amp;e%entity%&quot;&#13;&#10;  spawn-failed: &quot;&amp;cFehler beim Spawnen von &amp;e%entity%&quot;&#13;&#10;&#13;&#10;# Sudo Messages&#13;&#10;sudo:&#13;&#10;  executed: &quot;&amp;aCommand &amp;e%command% &amp;aals &amp;e%player% &amp;aausgeführt!&quot;&#13;&#10;  message-sent: &quot;&amp;aNachricht '&amp;f%message%&amp;a' als &amp;e%player% &amp;agesendet!&quot;&#13;&#10;  failed: &quot;&amp;cFehler beim Ausführen des Commands!&quot;&#13;&#10;&#13;&#10;# GUI Messages&#13;&#10;gui:&#13;&#10;  border-name: &quot;&amp;7&quot;&#13;&#10;  close-name: &quot;&amp;c&amp;lSCHLIEßEN&quot;&#13;&#10;  close-lore:&#13;&#10;    - &quot;&amp;7Klicke zum Schließen&quot;&#13;&#10;  info-name: &quot;&amp;e&amp;lINFO&quot;&#13;&#10;  info-lore:&#13;&#10;    - &quot;&amp;7&quot;&#13;&#10;    - &quot;&amp;7Sie können weitere &amp;eHomes &amp;7kaufen.&quot;&#13;&#10;    - &quot;&amp;7&quot;&#13;&#10;    - &quot;&amp;7Homes: &amp;e%used%&amp;8/&amp;e%max%&quot;&#13;&#10;    - &quot;&amp;7Maximal kaufbar: &amp;e28&quot;&#13;&#10;  home-name: &quot;&amp;e&amp;lHOME %name%&quot;&#13;&#10;  home-lore:&#13;&#10;    - &quot;&amp;7&quot;&#13;&#10;    - &quot;&amp;7Linksklick zum Teleportieren&quot;&#13;&#10;    - &quot;&amp;7Rechtsklick zum Löschen&quot;&#13;&#10;  home-empty-name: &quot;&amp;e&amp;lHOME SETZEN&quot;&#13;&#10;  home-empty-lore:&#13;&#10;    - &quot;&amp;7Klicke um ein Home zu setzen&quot;&#13;&#10;  home-locked-name: &quot;&amp;e&amp;lHOME KAUFEN&quot;&#13;&#10;  home-locked-lore:&#13;&#10;    - &quot;&amp;7&quot;&#13;&#10;    - &quot;&amp;7Preis: &amp;e%price%$&quot;&#13;&#10;    - &quot;&amp;7Klicke zum kaufen&quot;&#13;&#10;  trash-title: &quot;&amp;4Müll&quot;&#13;&#10;  meta-title: &quot;&amp;6Item Meta Editor&quot;&#13;&#10;&#13;&#10;# Command Messages&#13;&#10;commands:&#13;&#10;  homes:&#13;&#10;    description: &quot;Öffnet das Home-Menü&quot;&#13;&#10;  home:&#13;&#10;    description: &quot;Teleportiert zu einem Home&quot;&#13;&#10;    usage: &quot;/home &lt;name&gt;&quot;&#13;&#10;  sethome:&#13;&#10;    description: &quot;Setzt ein Home an der aktuellen Position&quot;&#13;&#10;    usage: &quot;/sethome &lt;name&gt;&quot;&#13;&#10;  delhome:&#13;&#10;    description: &quot;Löscht ein gesetztes Home&quot;&#13;&#10;    usage: &quot;/delhome &lt;name&gt;&quot;&#13;&#10;  gamemode:&#13;&#10;    usage: &quot;/gamemode &lt;0|1|2|3&gt; [player]&quot;&#13;&#10;  fly:&#13;&#10;    usage: &quot;/fly [player]&quot;&#13;&#10;  heal:&#13;&#10;    usage: &quot;/heal [player]&quot;&#13;&#10;  feed:&#13;&#10;    usage: &quot;/feed [player]&quot;&#13;&#10;  speed:&#13;&#10;    usage: &quot;/speed &lt;value&gt; [player]&quot;&#13;&#10;  give:&#13;&#10;    usage: &quot;/give &lt;item&gt; [amount] [player]&quot;&#13;&#10;  clear:&#13;&#10;    usage: &quot;/clear [player]&quot;&#13;&#10;  vanish:&#13;&#10;    usage: &quot;/vanish [player]&quot;&#13;&#10;  head:&#13;&#10;    usage: &quot;/head [player]&quot;&#13;&#10;  ec:&#13;&#10;    usage: &quot;/ec [player]&quot;&#13;&#10;  invsee:&#13;&#10;    usage: &quot;/invsee &lt;player&gt;&quot;&#13;&#10;  sign:&#13;&#10;    usage: &quot;/sign &lt;text&gt;&quot;&#13;&#10;  spawn:&#13;&#10;    usage: &quot;/spawn&quot;&#13;&#10;  warp:&#13;&#10;    usage: &quot;/warp &lt;name&gt;&quot;&#13;&#10;  setwarp:&#13;&#10;    usage: &quot;/setwarp &lt;name&gt;&quot;&#13;&#10;  delwarp:&#13;&#10;    usage: &quot;/delwarp &lt;name&gt;&quot;&#13;&#10;  tpo:&#13;&#10;    usage: &quot;/tpo &lt;player&gt;&quot;&#13;&#10;  tphere:&#13;&#10;    usage: &quot;/tphere &lt;player&gt;&quot;&#13;&#10;  tpa:&#13;&#10;    usage: &quot;/tpa &lt;player&gt;&quot;&#13;&#10;  tpahere:&#13;&#10;    usage: &quot;/tpahere &lt;player&gt;&quot;&#13;&#10;  broadcast:&#13;&#10;    usage: &quot;/broadcast &lt;message&gt;&quot;&#13;&#10;  message:&#13;&#10;    usage: &quot;/message &lt;player&gt; &lt;message&gt;&quot;&#13;&#10;  respond:&#13;&#10;    usage: &quot;/respond &lt;message&gt;&quot;&#13;&#10;  playtime:&#13;&#10;    usage: &quot;/playtime [player]&quot;&#13;&#10;  spawnentity:&#13;&#10;    usage: &quot;/spawnentity &lt;entity&gt; [amount]&quot;&#13;&#10;  sudo:&#13;&#10;    usage: &quot;/sudo &lt;player&gt; &lt;command|message&gt;&quot;&#13;&#10;  bank:&#13;&#10;    usage: &quot;/bank [balance|deposit|withdraw] [amount]&quot;&#13;&#10;    deposit-usage: &quot;/bank deposit &lt;amount&gt;&quot;&#13;&#10;    withdraw-usage: &quot;/bank withdraw &lt;amount&gt;&quot;&#13;&#10;&#13;&#10;# Bank Messages&#13;&#10;bank:&#13;&#10;  balance: &quot;&amp;aDeine Guthaben: &amp;7Bank: &amp;e%bank_balance%$ &amp;7| Geldbeutel: &amp;e%vault_balance%$&quot;&#13;&#10;  deposit-success: &quot;&amp;aDu hast &amp;e%amount%$ &amp;aerfolgreich in die Bank eingezahlt!&quot;&#13;&#10;  deposit-failed: &quot;&amp;cFehler beim Einzahlen!&quot;&#13;&#10;  deposit-limit: &quot;&amp;cDu kannst maximal 100K auf einmal einzahlen!&quot;&#13;&#10;  withdraw-success: &quot;&amp;aDu hast &amp;e%amount%$ &amp;aerfolgreich aus der Bank ausgezahlt!&quot;&#13;&#10;  withdraw-failed: &quot;&amp;cFehler beim Auszahlen!&quot;&#13;&#10;  withdraw-limit: &quot;&amp;cDu kannst maximal 1M auf einmal auszahlen!&quot;&#13;&#10;  insufficient-funds: &quot;&amp;cDu hast nicht genug Geld im Geldbeutel!&quot;&#13;&#10;  insufficient-bank-funds: &quot;&amp;cDu hast nicht genug Geld in der Bank!&quot;&#13;&#10;  invalid-amount: &quot;&amp;cUngültiger Betrag!&quot;&#13;&#10;  economy-not-available: &quot;&amp;cEconomy-System ist nicht verfügbar!&quot;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/plugin.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/plugin.yml" />
              <option name="originalContent" value="name: HexaCitybuildSystem&#10;version: '${project.version}'&#10;main: de.nicerecord.citybuildsystem.CitybuildSystem&#10;api-version: '1.21'&#10;softdepend: [PlaceholderAPI, Vault]&#10;authors: [NiceRecord]&#10;website: https://modrinth.com/user/nicerecord&#10;&#10;commands:&#10;  # Home Commands&#10;  homes:&#10;    description: Öffnet das Home-Menü&#10;    usage: /homes&#10;    permission: cbsystem.home.use&#10;  home:&#10;    description: Teleportiert zu einem Home&#10;    usage: /home &lt;name&gt;&#10;    permission: cbsystem.home.teleport&#10;  sethome:&#10;    description: Setzt ein Home an der aktuellen Position&#10;    usage: /sethome &lt;name&gt;&#10;    permission: cbsystem.home.set.1&#10;  delhome:&#10;    description: Löscht ein gesetztes Home&#10;    usage: /delhome &lt;name&gt;&#10;    permission: cbsystem.home.delete&#10;&#10;  # Admin Commands&#10;  gamemode:&#10;    description: Ändert den Spielmodus&#10;    usage: /gamemode &lt;mode&gt; [player]&#10;    aliases: [gm]&#10;    permission: cbsystem.gamemode&#10;  fly:&#10;    description: Schaltet den Flugmodus um&#10;    usage: /fly [player]&#10;    permission: cbsystem.fly&#10;  heal:&#10;    description: Heilt einen Spieler&#10;    usage: /heal [player]&#10;    permission: cbsystem.heal&#10;  feed:&#10;    description: Sättigt einen Spieler&#10;    usage: /feed [player]&#10;    permission: cbsystem.feed&#10;  speed:&#10;    description: Ändert die Geschwindigkeit&#10;    usage: /speed &lt;value&gt; [player]&#10;    permission: cbsystem.speed&#10;  give:&#10;    description: Gibt Items&#10;    usage: /give &lt;item&gt; [amount] [player]&#10;    permission: cbsystem.give&#10;  clear:&#10;    description: Leert das Inventar&#10;    usage: /clear [player]&#10;    permission: cbsystem.clear&#10;  vanish:&#10;    description: Macht unsichtbar&#10;    usage: /vanish [player]&#10;    permission: cbsystem.vanish&#10;  sudo:&#10;    description: Führt einen Command als anderer Spieler aus&#10;    usage: /sudo &lt;player&gt; &lt;command/message&gt;&#10;    permission: cbsystem.sudo&#10;&#10;  # Utility Commands&#10;  trash:&#10;    description: Öffnet das Müll-Interface&#10;    usage: /trash&#10;    permission: cbsystem.trash&#10;  head:&#10;    description: Gibt einen Spielerkopf&#10;    usage: /head [player]&#10;    permission: cbsystem.head&#10;  enderchest:&#10;    description: Öffnet die Enderchest&#10;    usage: /enderchest [player]&#10;    aliases: [ec]&#10;    permission: cbsystem.ec&#10;  invsee:&#10;    description: Zeigt das Inventar eines Spielers&#10;    usage: /invsee &lt;player&gt;&#10;    permission: cbsystem.invsee&#10;  sign:&#10;    description: Signiert ein Item&#10;    usage: /sign &lt;text&gt;&#10;    permission: cbsystem.sign&#10;&#10;  # Teleport Commands&#10;  spawn:&#10;    description: Teleportiert zum Spawn&#10;    usage: /spawn&#10;    permission: cbsystem.spawn&#10;  setspawn:&#10;    description: Setzt den Spawn-Punkt&#10;    usage: /setspawn&#10;    permission: cbsystem.setspawn&#10;  warp:&#10;    description: Teleportiert zu einem Warp&#10;    usage: /warp &lt;name&gt;&#10;    permission: cbsystem.warp&#10;  setwarp:&#10;    description: Erstellt einen Warp&#10;    usage: /setwarp &lt;name&gt;&#10;    permission: cbsystem.setwarp&#10;  delwarp:&#10;    description: Löscht einen Warp&#10;    usage: /delwarp &lt;name&gt;&#10;    permission: cbsystem.delwarp&#10;  tpo:&#10;    description: Teleportiert zu einem Spieler&#10;    usage: /tpo &lt;player&gt;&#10;    permission: cbsystem.tpo&#10;  tphere:&#10;    description: Teleportiert einen Spieler zu dir&#10;    usage: /tphere &lt;player&gt;&#10;    permission: cbsystem.tphere&#10;  tpa:&#10;    description: Sendet eine Teleport-Anfrage&#10;    usage: /tpa &lt;player&gt;&#10;    permission: cbsystem.tpa&#10;  tpahere:&#10;    description: Bittet einen Spieler zu dir zu teleportieren&#10;    usage: /tpahere &lt;player&gt;&#10;    permission: cbsystem.tpahere&#10;  tpaccept:&#10;    description: Akzeptiert eine Teleport-Anfrage&#10;    usage: /tpaccept&#10;    permission: cbsystem.tpaccept&#10;  tpdeny:&#10;    description: Lehnt eine Teleport-Anfrage ab&#10;    usage: /tpdeny&#10;    permission: cbsystem.tpdeny&#10;  tpatoggle:&#10;    description: Schaltet Teleport-Anfragen um&#10;    usage: /tpatoggle&#10;    permission: cbsystem.tpatoggle&#10;&#10;  # Server Commands&#10;  broadcast:&#10;    description: Sendet eine Server-Nachricht&#10;    usage: /broadcast &lt;message&gt;&#10;    permission: cbsystem.broadcast&#10;  clearchat:&#10;    description: Löscht den Chat für alle Spieler&#10;    usage: /clearchat&#10;    aliases: [cc]&#10;    permission: cbsystem.clearchat&#10;  slowchat:&#10;    description: Schaltet den Slow-Chat um&#10;    usage: /slowchat&#10;    permission: cbsystem.slowchat&#10;  maintenance:&#10;    description: Schaltet den Wartungsmodus um&#10;    usage: /maintenance&#10;    permission: cbsystem.maintenance&#10;  cbreload:&#10;    description: Lädt das Plugin neu&#10;    usage: /reload&#10;    permission: cbsystem.reload&#10;  restart:&#10;    description: Startet den Server neu&#10;    usage: /restart&#10;    permission: cbsystem.restart&#10;&#10;  # Social Commands&#10;  discord:&#10;    description: Zeigt den Discord-Link&#10;    usage: /discord&#10;    permission: cbsystem.discord&#10;  youtube:&#10;    description: Zeigt den YouTube-Link&#10;    usage: /youtube&#10;    permission: cbsystem.youtube&#10;  teamchat:&#10;    description: Aktiviert den Team-Chat&#10;    usage: /teamchat&#10;    permission: cbsystem.teamchat&#10;  message:&#10;    description: Sendet eine private Nachricht&#10;    usage: /message &lt;player&gt; &lt;message&gt;&#10;    aliases: [msg, tell, whisper]&#10;    permission: cbsystem.message&#10;  respond:&#10;    description: Antwortet auf die letzte private Nachricht&#10;    usage: /respond &lt;message&gt;&#10;    aliases: [r, reply]&#10;    permission: cbsystem.respond&#10;&#10;  # Info Commands&#10;  playtime:&#10;    description: Zeigt die Spielzeit&#10;    usage: /playtime [player]&#10;    permission: cbsystem.playtime&#10;&#10;  # Entity Commands&#10;  spawnentity:&#10;    description: Spawnt Entities&#10;    usage: /spawnentity &lt;entity&gt; [amount]&#10;    permission: cbsystem.spawnentity&#10;&#10;  # Bank Commands&#10;  bank:&#10;    description: Öffnet das Bank-System&#10;    usage: /bank [balance|deposit|withdraw] [amount]&#10;    permission: cbsystem.bank&#10;&#10;permissions:&#10;  # Home Permissions&#10;  cbsystem.home.use:&#10;    description: Erlaubt die Nutzung des /homes Commands&#10;    default: true&#10;  cbsystem.home.teleport:&#10;    description: Erlaubt die Nutzung des /home Commands&#10;    default: true&#10;  cbsystem.home.delete:&#10;    description: Erlaubt die Nutzung des /delhome Commands&#10;    default: true&#10;  cbsystem.home.set.*:&#10;    description: Erlaubt das Setzen von unbegrenzt vielen Homes&#10;    default: op&#10;    children:&#10;      cbsystem.home.set.1: true&#10;      cbsystem.home.set.2: true&#10;      cbsystem.home.set.3: true&#10;      cbsystem.home.set.4: true&#10;      cbsystem.home.set.5: true&#10;      cbsystem.home.set.6: true&#10;      cbsystem.home.set.7: true&#10;      cbsystem.home.set.8: true&#10;      cbsystem.home.set.9: true&#10;      cbsystem.home.set.10: true&#10;      cbsystem.home.set.11: true&#10;      cbsystem.home.set.12: true&#10;      cbsystem.home.set.13: true&#10;      cbsystem.home.set.14: true&#10;      cbsystem.home.set.15: true&#10;      cbsystem.home.set.16: true&#10;      cbsystem.home.set.17: true&#10;      cbsystem.home.set.18: true&#10;      cbsystem.home.set.19: true&#10;      cbsystem.home.set.20: true&#10;      cbsystem.home.set.21: true&#10;      cbsystem.home.set.22: true&#10;      cbsystem.home.set.23: true&#10;      cbsystem.home.set.24: true&#10;      cbsystem.home.set.25: true&#10;      cbsystem.home.set.26: true&#10;      cbsystem.home.set.27: true&#10;      cbsystem.home.set.28: true&#10;  cbsystem.home.set.1:&#10;    description: Erlaubt das Setzen von 1 Home&#10;    default: true&#10;  cbsystem.home.set.2:&#10;    description: Erlaubt das Setzen von 2 Homes&#10;    default: false&#10;  cbsystem.home.set.3:&#10;    description: Erlaubt das Setzen von 3 Homes&#10;    default: false&#10;  cbsystem.home.set.4:&#10;    description: Erlaubt das Setzen von 4 Homes&#10;    default: false&#10;  cbsystem.home.set.5:&#10;    description: Erlaubt das Setzen von 5 Homes&#10;    default: false&#10;  cbsystem.home.set.6:&#10;    description: Erlaubt das Setzen von 6 Homes&#10;    default: false&#10;  cbsystem.home.set.7:&#10;    description: Erlaubt das Setzen von 7 Homes&#10;    default: false&#10;  cbsystem.home.set.8:&#10;    description: Erlaubt das Setzen von 8 Homes&#10;    default: false&#10;  cbsystem.home.set.9:&#10;    description: Erlaubt das Setzen von 9 Homes&#10;    default: false&#10;  cbsystem.home.set.10:&#10;    description: Erlaubt das Setzen von 10 Homes&#10;    default: false&#10;  cbsystem.home.set.11:&#10;    description: Erlaubt das Setzen von 11 Homes&#10;    default: false&#10;  cbsystem.home.set.12:&#10;    description: Erlaubt das Setzen von 12 Homes&#10;    default: false&#10;  cbsystem.home.set.13:&#10;    description: Erlaubt das Setzen von 13 Homes&#10;    default: false&#10;  cbsystem.home.set.14:&#10;    description: Erlaubt das Setzen von 14 Homes&#10;    default: false&#10;  cbsystem.home.set.15:&#10;    description: Erlaubt das Setzen von 15 Homes&#10;    default: false&#10;  cbsystem.home.set.16:&#10;    description: Erlaubt das Setzen von 16 Homes&#10;    default: false&#10;  cbsystem.home.set.17:&#10;    description: Erlaubt das Setzen von 17 Homes&#10;    default: false&#10;  cbsystem.home.set.18:&#10;    description: Erlaubt das Setzen von 18 Homes&#10;    default: false&#10;  cbsystem.home.set.19:&#10;    description: Erlaubt das Setzen von 19 Homes&#10;    default: false&#10;  cbsystem.home.set.20:&#10;    description: Erlaubt das Setzen von 20 Homes&#10;    default: false&#10;  cbsystem.home.set.21:&#10;    description: Erlaubt das Setzen von 21 Homes&#10;    default: false&#10;  cbsystem.home.set.22:&#10;    description: Erlaubt das Setzen von 22 Homes&#10;    default: false&#10;  cbsystem.home.set.23:&#10;    description: Erlaubt das Setzen von 23 Homes&#10;    default: false&#10;  cbsystem.home.set.24:&#10;    description: Erlaubt das Setzen von 24 Homes&#10;    default: false&#10;  cbsystem.home.set.25:&#10;    description: Erlaubt das Setzen von 25 Homes&#10;    default: false&#10;  cbsystem.home.set.26:&#10;    description: Erlaubt das Setzen von 26 Homes&#10;    default: false&#10;  cbsystem.home.set.27:&#10;    description: Erlaubt das Setzen von 27 Homes&#10;    default: false&#10;  cbsystem.home.set.28:&#10;    description: Erlaubt das Setzen von 28 Homes&#10;    default: false&#10;&#10;  # Admin Permissions&#10;  cbsystem.gamemode:&#10;    description: Erlaubt das Ändern des eigenen Spielmodus&#10;    default: op&#10;  cbsystem.gamemode.other:&#10;    description: Erlaubt das Ändern des Spielmodus anderer Spieler&#10;    default: op&#10;  cbsystem.fly:&#10;    description: Erlaubt das eigene Fliegen&#10;    default: op&#10;  cbsystem.fly.other:&#10;    description: Erlaubt das Fliegen für andere Spieler zu aktivieren&#10;    default: op&#10;  cbsystem.heal:&#10;    description: Erlaubt das eigene Heilen&#10;    default: op&#10;  cbsystem.heal.other:&#10;    description: Erlaubt das Heilen anderer Spieler&#10;    default: op&#10;  cbsystem.feed:&#10;    description: Erlaubt das eigene Sättigen&#10;    default: op&#10;  cbsystem.feed.other:&#10;    description: Erlaubt das Sättigen anderer Spieler&#10;    default: op&#10;  cbsystem.speed:&#10;    description: Erlaubt das Ändern der eigenen Geschwindigkeit&#10;    default: op&#10;  cbsystem.speed.other:&#10;    description: Erlaubt das Ändern der Geschwindigkeit anderer Spieler&#10;    default: op&#10;  cbsystem.give:&#10;    description: Erlaubt das Geben von Items&#10;    default: op&#10;  cbsystem.clear:&#10;    description: Erlaubt das Leeren des eigenen Inventars&#10;    default: op&#10;  cbsystem.clear.other:&#10;    description: Erlaubt das Leeren des Inventars anderer Spieler&#10;    default: op&#10;  cbsystem.vanish:&#10;    description: Erlaubt das eigene Unsichtbar werden&#10;    default: op&#10;  cbsystem.vanish.other:&#10;    description: Erlaubt das Unsichtbar machen anderer Spieler&#10;    default: op&#10;  cbsystem.sudo:&#10;    description: Erlaubt das Ausführen von Commands als andere Spieler&#10;    default: op&#10;&#10;  # Utility Permissions&#10;  cbsystem.trash:&#10;    description: Erlaubt die Nutzung des Müll-Interfaces&#10;    default: true&#10;  cbsystem.head:&#10;    description: Erlaubt das Geben des eigenen Kopfes&#10;    default: true&#10;  cbsystem.head.other:&#10;    description: Erlaubt das Geben von Köpfen anderer Spieler&#10;    default: op&#10;  cbsystem.ec:&#10;    description: Erlaubt das Öffnen der eigenen Enderchest&#10;    default: true&#10;  cbsystem.ec.other:&#10;    description: Erlaubt das Öffnen der Enderchest anderer Spieler&#10;    default: op&#10;  cbsystem.invsee:&#10;    description: Erlaubt das Anzeigen von Inventaren anderer Spieler&#10;    default: op&#10;  cbsystem.sign:&#10;    description: Erlaubt das Signieren von Items&#10;    default: true&#10;  cbsystem.meta:&#10;    description: Erlaubt das Bearbeiten von Item-Metadaten&#10;    default: op&#10;&#10;  # Teleport Permissions&#10;  cbsystem.spawn:&#10;    description: Erlaubt die Teleportation zum Spawn&#10;    default: true&#10;  cbsystem.setspawn:&#10;    description: Erlaubt das Setzen des Spawn-Punktes&#10;    default: op&#10;  cbsystem.warp:&#10;    description: Erlaubt die Nutzung von Warps&#10;    default: true&#10;  cbsystem.setwarp:&#10;    description: Erlaubt das Erstellen von Warps&#10;    default: op&#10;  cbsystem.delwarp:&#10;    description: Erlaubt das Löschen von Warps&#10;    default: op&#10;  cbsystem.tpo:&#10;    description: Erlaubt die Teleportation zu anderen Spielern&#10;    default: op&#10;  cbsystem.tphere:&#10;    description: Erlaubt das Teleportieren anderer Spieler zu sich&#10;    default: op&#10;  cbsystem.tpa:&#10;    description: Erlaubt das Senden von Teleport-Anfragen&#10;    default: true&#10;  cbsystem.tpahere:&#10;    description: Erlaubt das Anfordern von Teleportationen zu sich&#10;    default: true&#10;  cbsystem.tpaccept:&#10;    description: Erlaubt das Akzeptieren von Teleport-Anfragen&#10;    default: true&#10;  cbsystem.tpdeny:&#10;    description: Erlaubt das Ablehnen von Teleport-Anfragen&#10;    default: true&#10;  cbsystem.tpatoggle:&#10;    description: Erlaubt das Umschalten von Teleport-Anfragen&#10;    default: true&#10;&#10;  # Server Permissions&#10;  cbsystem.broadcast:&#10;    description: Erlaubt das Senden von Server-Nachrichten&#10;    default: op&#10;  cbsystem.clearchat:&#10;    description: Erlaubt das Leeren des Chats&#10;    default: op&#10;  cbsystem.slowchat:&#10;    description: Erlaubt das Umschalten des Slow-Chats&#10;    default: op&#10;  cbsystem.maintenance:&#10;    description: Erlaubt das Umschalten des Wartungsmodus&#10;    default: op&#10;  cbsystem.reload:&#10;    description: Erlaubt das Neuladen des Plugins&#10;    default: op&#10;  cbsystem.restart:&#10;    description: Erlaubt das Neustarten des Servers&#10;    default: op&#10;&#10;  # Social Permissions&#10;  cbsystem.discord:&#10;    description: Erlaubt das Anzeigen des Discord-Links&#10;    default: true&#10;  cbsystem.youtube:&#10;    description: Erlaubt das Anzeigen des YouTube-Links&#10;    default: true&#10;  cbsystem.teamchat:&#10;    description: Erlaubt die Nutzung des Team-Chats&#10;    default: op&#10;  cbsystem.message:&#10;    description: Erlaubt das Senden privater Nachrichten&#10;    default: true&#10;  cbsystem.respond:&#10;    description: Erlaubt das Antworten auf private Nachrichten&#10;    default: true&#10;&#10;  # Info Permissions&#10;  cbsystem.playtime:&#10;    description: Erlaubt das Anzeigen der eigenen Spielzeit&#10;    default: true&#10;  cbsystem.playtime.other:&#10;    description: Erlaubt das Anzeigen der Spielzeit anderer Spieler&#10;    default: op&#10;&#10;  # Entity Permissions&#10;  cbsystem.spawnentity:&#10;    description: Erlaubt das Spawnen von Entities&#10;    default: op&#10;&#10;  # Bank Permissions&#10;  cbsystem.bank:&#10;    description: Erlaubt die Nutzung des Bank-Systems&#10;    default: true&#10;" />
              <option name="updatedContent" value="name: HexaCitybuildSystem&#10;version: '${project.version}'&#10;main: de.nicerecord.citybuildsystem.CitybuildSystem&#10;api-version: '1.21'&#10;softdepend: [PlaceholderAPI, Vault]&#10;authors: [NiceRecord]&#10;website: https://modrinth.com/user/nicerecord&#10;&#10;commands:&#10;  # Home Commands&#10;  homes:&#10;    description: Öffnet das Home-Menü&#10;    usage: /homes&#10;    permission: cbsystem.home.use&#10;  home:&#10;    description: Teleportiert zu einem Home&#10;    usage: /home &lt;name&gt;&#10;    permission: cbsystem.home.teleport&#10;  sethome:&#10;    description: Setzt ein Home an der aktuellen Position&#10;    usage: /sethome &lt;name&gt;&#10;    permission: cbsystem.home.set.1&#10;  delhome:&#10;    description: Löscht ein gesetztes Home&#10;    usage: /delhome &lt;name&gt;&#10;    permission: cbsystem.home.delete&#10;&#10;  # Admin Commands&#10;  gamemode:&#10;    description: Ändert den Spielmodus&#10;    usage: /gamemode &lt;mode&gt; [player]&#10;    aliases: [gm]&#10;    permission: cbsystem.gamemode&#10;  fly:&#10;    description: Schaltet den Flugmodus um&#10;    usage: /fly [player]&#10;    permission: cbsystem.fly&#10;  heal:&#10;    description: Heilt einen Spieler&#10;    usage: /heal [player]&#10;    permission: cbsystem.heal&#10;  feed:&#10;    description: Sättigt einen Spieler&#10;    usage: /feed [player]&#10;    permission: cbsystem.feed&#10;  speed:&#10;    description: Ändert die Geschwindigkeit&#10;    usage: /speed &lt;value&gt; [player]&#10;    permission: cbsystem.speed&#10;  give:&#10;    description: Gibt Items&#10;    usage: /give &lt;item&gt; [amount] [player]&#10;    permission: cbsystem.give&#10;  clear:&#10;    description: Leert das Inventar&#10;    usage: /clear [player]&#10;    permission: cbsystem.clear&#10;  vanish:&#10;    description: Macht unsichtbar&#10;    usage: /vanish [player]&#10;    permission: cbsystem.vanish&#10;  sudo:&#10;    description: Führt einen Command als anderer Spieler aus&#10;    usage: /sudo &lt;player&gt; &lt;command/message&gt;&#10;    permission: cbsystem.sudo&#10;&#10;  # Utility Commands&#10;  trash:&#10;    description: Öffnet das Müll-Interface&#10;    usage: /trash&#10;    permission: cbsystem.trash&#10;  head:&#10;    description: Gibt einen Spielerkopf&#10;    usage: /head [player]&#10;    permission: cbsystem.head&#10;  enderchest:&#10;    description: Öffnet die Enderchest&#10;    usage: /enderchest [player]&#10;    aliases: [ec]&#10;    permission: cbsystem.ec&#10;  invsee:&#10;    description: Zeigt das Inventar eines Spielers&#10;    usage: /invsee &lt;player&gt;&#10;    permission: cbsystem.invsee&#10;  sign:&#10;    description: Signiert ein Item&#10;    usage: /sign &lt;text&gt;&#10;    permission: cbsystem.sign&#10;&#10;  # Teleport Commands&#10;  spawn:&#10;    description: Teleportiert zum Spawn&#10;    usage: /spawn&#10;    permission: cbsystem.spawn&#10;  setspawn:&#10;    description: Setzt den Spawn-Punkt&#10;    usage: /setspawn&#10;    permission: cbsystem.setspawn&#10;  warp:&#10;    description: Teleportiert zu einem Warp&#10;    usage: /warp &lt;name&gt;&#10;    permission: cbsystem.warp&#10;  setwarp:&#10;    description: Erstellt einen Warp&#10;    usage: /setwarp &lt;name&gt;&#10;    permission: cbsystem.setwarp&#10;  delwarp:&#10;    description: Löscht einen Warp&#10;    usage: /delwarp &lt;name&gt;&#10;    permission: cbsystem.delwarp&#10;  tpo:&#10;    description: Teleportiert zu einem Spieler&#10;    usage: /tpo &lt;player&gt;&#10;    permission: cbsystem.tpo&#10;  tphere:&#10;    description: Teleportiert einen Spieler zu dir&#10;    usage: /tphere &lt;player&gt;&#10;    permission: cbsystem.tphere&#10;  tpa:&#10;    description: Sendet eine Teleport-Anfrage&#10;    usage: /tpa &lt;player&gt;&#10;    permission: cbsystem.tpa&#10;  tpahere:&#10;    description: Bittet einen Spieler zu dir zu teleportieren&#10;    usage: /tpahere &lt;player&gt;&#10;    permission: cbsystem.tpahere&#10;  tpaccept:&#10;    description: Akzeptiert eine Teleport-Anfrage&#10;    usage: /tpaccept&#10;    permission: cbsystem.tpaccept&#10;  tpdeny:&#10;    description: Lehnt eine Teleport-Anfrage ab&#10;    usage: /tpdeny&#10;    permission: cbsystem.tpdeny&#10;  tpatoggle:&#10;    description: Schaltet Teleport-Anfragen um&#10;    usage: /tpatoggle&#10;    permission: cbsystem.tpatoggle&#10;&#10;  # Server Commands&#10;  broadcast:&#10;    description: Sendet eine Server-Nachricht&#10;    usage: /broadcast &lt;message&gt;&#10;    permission: cbsystem.broadcast&#10;  clearchat:&#10;    description: Löscht den Chat für alle Spieler&#10;    usage: /clearchat&#10;    aliases: [cc]&#10;    permission: cbsystem.clearchat&#10;  slowchat:&#10;    description: Schaltet den Slow-Chat um&#10;    usage: /slowchat&#10;    permission: cbsystem.slowchat&#10;  maintenance:&#10;    description: Schaltet den Wartungsmodus um&#10;    usage: /maintenance&#10;    permission: cbsystem.maintenance&#10;  cbupdate:&#10;    description: Überprüft auf Plugin-Updates&#10;    usage: /cbupdate&#10;    permission: cbsystem.admin&#10;  cbreload:&#10;    description: Lädt das Plugin neu&#10;    usage: /reload&#10;    permission: cbsystem.reload&#10;  restart:&#10;    description: Startet den Server neu&#10;    usage: /restart&#10;    permission: cbsystem.restart&#10;&#10;  # Social Commands&#10;  discord:&#10;    description: Zeigt den Discord-Link&#10;    usage: /discord&#10;    permission: cbsystem.discord&#10;  youtube:&#10;    description: Zeigt den YouTube-Link&#10;    usage: /youtube&#10;    permission: cbsystem.youtube&#10;  teamchat:&#10;    description: Aktiviert den Team-Chat&#10;    usage: /teamchat&#10;    permission: cbsystem.teamchat&#10;  message:&#10;    description: Sendet eine private Nachricht&#10;    usage: /message &lt;player&gt; &lt;message&gt;&#10;    aliases: [msg, tell, whisper]&#10;    permission: cbsystem.message&#10;  respond:&#10;    description: Antwortet auf die letzte private Nachricht&#10;    usage: /respond &lt;message&gt;&#10;    aliases: [r, reply]&#10;    permission: cbsystem.respond&#10;&#10;  # Info Commands&#10;  playtime:&#10;    description: Zeigt die Spielzeit&#10;    usage: /playtime [player]&#10;    permission: cbsystem.playtime&#10;&#10;  # Entity Commands&#10;  spawnentity:&#10;    description: Spawnt Entities&#10;    usage: /spawnentity &lt;entity&gt; [amount]&#10;    permission: cbsystem.spawnentity&#10;&#10;  # Bank Commands&#10;  bank:&#10;    description: Öffnet das Bank-System&#10;    usage: /bank [balance|deposit|withdraw] [amount]&#10;    permission: cbsystem.bank&#10;&#10;permissions:&#10;  # Home Permissions&#10;  cbsystem.home.use:&#10;    description: Erlaubt die Nutzung des /homes Commands&#10;    default: true&#10;  cbsystem.home.teleport:&#10;    description: Erlaubt die Nutzung des /home Commands&#10;    default: true&#10;  cbsystem.home.delete:&#10;    description: Erlaubt die Nutzung des /delhome Commands&#10;    default: true&#10;  cbsystem.home.set.*:&#10;    description: Erlaubt das Setzen von unbegrenzt vielen Homes&#10;    default: op&#10;    children:&#10;      cbsystem.home.set.1: true&#10;      cbsystem.home.set.2: true&#10;      cbsystem.home.set.3: true&#10;      cbsystem.home.set.4: true&#10;      cbsystem.home.set.5: true&#10;      cbsystem.home.set.6: true&#10;      cbsystem.home.set.7: true&#10;      cbsystem.home.set.8: true&#10;      cbsystem.home.set.9: true&#10;      cbsystem.home.set.10: true&#10;      cbsystem.home.set.11: true&#10;      cbsystem.home.set.12: true&#10;      cbsystem.home.set.13: true&#10;      cbsystem.home.set.14: true&#10;      cbsystem.home.set.15: true&#10;      cbsystem.home.set.16: true&#10;      cbsystem.home.set.17: true&#10;      cbsystem.home.set.18: true&#10;      cbsystem.home.set.19: true&#10;      cbsystem.home.set.20: true&#10;      cbsystem.home.set.21: true&#10;      cbsystem.home.set.22: true&#10;      cbsystem.home.set.23: true&#10;      cbsystem.home.set.24: true&#10;      cbsystem.home.set.25: true&#10;      cbsystem.home.set.26: true&#10;      cbsystem.home.set.27: true&#10;      cbsystem.home.set.28: true&#10;  cbsystem.home.set.1:&#10;    description: Erlaubt das Setzen von 1 Home&#10;    default: true&#10;  cbsystem.home.set.2:&#10;    description: Erlaubt das Setzen von 2 Homes&#10;    default: false&#10;  cbsystem.home.set.3:&#10;    description: Erlaubt das Setzen von 3 Homes&#10;    default: false&#10;  cbsystem.home.set.4:&#10;    description: Erlaubt das Setzen von 4 Homes&#10;    default: false&#10;  cbsystem.home.set.5:&#10;    description: Erlaubt das Setzen von 5 Homes&#10;    default: false&#10;  cbsystem.home.set.6:&#10;    description: Erlaubt das Setzen von 6 Homes&#10;    default: false&#10;  cbsystem.home.set.7:&#10;    description: Erlaubt das Setzen von 7 Homes&#10;    default: false&#10;  cbsystem.home.set.8:&#10;    description: Erlaubt das Setzen von 8 Homes&#10;    default: false&#10;  cbsystem.home.set.9:&#10;    description: Erlaubt das Setzen von 9 Homes&#10;    default: false&#10;  cbsystem.home.set.10:&#10;    description: Erlaubt das Setzen von 10 Homes&#10;    default: false&#10;  cbsystem.home.set.11:&#10;    description: Erlaubt das Setzen von 11 Homes&#10;    default: false&#10;  cbsystem.home.set.12:&#10;    description: Erlaubt das Setzen von 12 Homes&#10;    default: false&#10;  cbsystem.home.set.13:&#10;    description: Erlaubt das Setzen von 13 Homes&#10;    default: false&#10;  cbsystem.home.set.14:&#10;    description: Erlaubt das Setzen von 14 Homes&#10;    default: false&#10;  cbsystem.home.set.15:&#10;    description: Erlaubt das Setzen von 15 Homes&#10;    default: false&#10;  cbsystem.home.set.16:&#10;    description: Erlaubt das Setzen von 16 Homes&#10;    default: false&#10;  cbsystem.home.set.17:&#10;    description: Erlaubt das Setzen von 17 Homes&#10;    default: false&#10;  cbsystem.home.set.18:&#10;    description: Erlaubt das Setzen von 18 Homes&#10;    default: false&#10;  cbsystem.home.set.19:&#10;    description: Erlaubt das Setzen von 19 Homes&#10;    default: false&#10;  cbsystem.home.set.20:&#10;    description: Erlaubt das Setzen von 20 Homes&#10;    default: false&#10;  cbsystem.home.set.21:&#10;    description: Erlaubt das Setzen von 21 Homes&#10;    default: false&#10;  cbsystem.home.set.22:&#10;    description: Erlaubt das Setzen von 22 Homes&#10;    default: false&#10;  cbsystem.home.set.23:&#10;    description: Erlaubt das Setzen von 23 Homes&#10;    default: false&#10;  cbsystem.home.set.24:&#10;    description: Erlaubt das Setzen von 24 Homes&#10;    default: false&#10;  cbsystem.home.set.25:&#10;    description: Erlaubt das Setzen von 25 Homes&#10;    default: false&#10;  cbsystem.home.set.26:&#10;    description: Erlaubt das Setzen von 26 Homes&#10;    default: false&#10;  cbsystem.home.set.27:&#10;    description: Erlaubt das Setzen von 27 Homes&#10;    default: false&#10;  cbsystem.home.set.28:&#10;    description: Erlaubt das Setzen von 28 Homes&#10;    default: false&#10;&#10;  # Admin Permissions&#10;  cbsystem.gamemode:&#10;    description: Erlaubt das Ändern des eigenen Spielmodus&#10;    default: op&#10;  cbsystem.gamemode.other:&#10;    description: Erlaubt das Ändern des Spielmodus anderer Spieler&#10;    default: op&#10;  cbsystem.fly:&#10;    description: Erlaubt das eigene Fliegen&#10;    default: op&#10;  cbsystem.fly.other:&#10;    description: Erlaubt das Fliegen für andere Spieler zu aktivieren&#10;    default: op&#10;  cbsystem.heal:&#10;    description: Erlaubt das eigene Heilen&#10;    default: op&#10;  cbsystem.heal.other:&#10;    description: Erlaubt das Heilen anderer Spieler&#10;    default: op&#10;  cbsystem.feed:&#10;    description: Erlaubt das eigene Sättigen&#10;    default: op&#10;  cbsystem.feed.other:&#10;    description: Erlaubt das Sättigen anderer Spieler&#10;    default: op&#10;  cbsystem.speed:&#10;    description: Erlaubt das Ändern der eigenen Geschwindigkeit&#10;    default: op&#10;  cbsystem.speed.other:&#10;    description: Erlaubt das Ändern der Geschwindigkeit anderer Spieler&#10;    default: op&#10;  cbsystem.give:&#10;    description: Erlaubt das Geben von Items&#10;    default: op&#10;  cbsystem.clear:&#10;    description: Erlaubt das Leeren des eigenen Inventars&#10;    default: op&#10;  cbsystem.clear.other:&#10;    description: Erlaubt das Leeren des Inventars anderer Spieler&#10;    default: op&#10;  cbsystem.vanish:&#10;    description: Erlaubt das eigene Unsichtbar werden&#10;    default: op&#10;  cbsystem.vanish.other:&#10;    description: Erlaubt das Unsichtbar machen anderer Spieler&#10;    default: op&#10;  cbsystem.sudo:&#10;    description: Erlaubt das Ausführen von Commands als andere Spieler&#10;    default: op&#10;&#10;  # Utility Permissions&#10;  cbsystem.trash:&#10;    description: Erlaubt die Nutzung des Müll-Interfaces&#10;    default: true&#10;  cbsystem.head:&#10;    description: Erlaubt das Geben des eigenen Kopfes&#10;    default: true&#10;  cbsystem.head.other:&#10;    description: Erlaubt das Geben von Köpfen anderer Spieler&#10;    default: op&#10;  cbsystem.ec:&#10;    description: Erlaubt das Öffnen der eigenen Enderchest&#10;    default: true&#10;  cbsystem.ec.other:&#10;    description: Erlaubt das Öffnen der Enderchest anderer Spieler&#10;    default: op&#10;  cbsystem.invsee:&#10;    description: Erlaubt das Anzeigen von Inventaren anderer Spieler&#10;    default: op&#10;  cbsystem.sign:&#10;    description: Erlaubt das Signieren von Items&#10;    default: true&#10;  cbsystem.meta:&#10;    description: Erlaubt das Bearbeiten von Item-Metadaten&#10;    default: op&#10;&#10;  # Teleport Permissions&#10;  cbsystem.spawn:&#10;    description: Erlaubt die Teleportation zum Spawn&#10;    default: true&#10;  cbsystem.setspawn:&#10;    description: Erlaubt das Setzen des Spawn-Punktes&#10;    default: op&#10;  cbsystem.warp:&#10;    description: Erlaubt die Nutzung von Warps&#10;    default: true&#10;  cbsystem.setwarp:&#10;    description: Erlaubt das Erstellen von Warps&#10;    default: op&#10;  cbsystem.delwarp:&#10;    description: Erlaubt das Löschen von Warps&#10;    default: op&#10;  cbsystem.tpo:&#10;    description: Erlaubt die Teleportation zu anderen Spielern&#10;    default: op&#10;  cbsystem.tphere:&#10;    description: Erlaubt das Teleportieren anderer Spieler zu sich&#10;    default: op&#10;  cbsystem.tpa:&#10;    description: Erlaubt das Senden von Teleport-Anfragen&#10;    default: true&#10;  cbsystem.tpahere:&#10;    description: Erlaubt das Anfordern von Teleportationen zu sich&#10;    default: true&#10;  cbsystem.tpaccept:&#10;    description: Erlaubt das Akzeptieren von Teleport-Anfragen&#10;    default: true&#10;  cbsystem.tpdeny:&#10;    description: Erlaubt das Ablehnen von Teleport-Anfragen&#10;    default: true&#10;  cbsystem.tpatoggle:&#10;    description: Erlaubt das Umschalten von Teleport-Anfragen&#10;    default: true&#10;&#10;  # Server Permissions&#10;  cbsystem.broadcast:&#10;    description: Erlaubt das Senden von Server-Nachrichten&#10;    default: op&#10;  cbsystem.clearchat:&#10;    description: Erlaubt das Leeren des Chats&#10;    default: op&#10;  cbsystem.slowchat:&#10;    description: Erlaubt das Umschalten des Slow-Chats&#10;    default: op&#10;  cbsystem.maintenance:&#10;    description: Erlaubt das Umschalten des Wartungsmodus&#10;    default: op&#10;  cbsystem.reload:&#10;    description: Erlaubt das Neuladen des Plugins&#10;    default: op&#10;  cbsystem.restart:&#10;    description: Erlaubt das Neustarten des Servers&#10;    default: op&#10;&#10;  # Social Permissions&#10;  cbsystem.discord:&#10;    description: Erlaubt das Anzeigen des Discord-Links&#10;    default: true&#10;  cbsystem.youtube:&#10;    description: Erlaubt das Anzeigen des YouTube-Links&#10;    default: true&#10;  cbsystem.teamchat:&#10;    description: Erlaubt die Nutzung des Team-Chats&#10;    default: op&#10;  cbsystem.message:&#10;    description: Erlaubt das Senden privater Nachrichten&#10;    default: true&#10;  cbsystem.respond:&#10;    description: Erlaubt das Antworten auf private Nachrichten&#10;    default: true&#10;&#10;  # Info Permissions&#10;  cbsystem.playtime:&#10;    description: Erlaubt das Anzeigen der eigenen Spielzeit&#10;    default: true&#10;  cbsystem.playtime.other:&#10;    description: Erlaubt das Anzeigen der Spielzeit anderer Spieler&#10;    default: op&#10;&#10;  # Entity Permissions&#10;  cbsystem.spawnentity:&#10;    description: Erlaubt das Spawnen von Entities&#10;    default: op&#10;&#10;  # Bank Permissions&#10;  cbsystem.bank:&#10;    description: Erlaubt die Nutzung des Bank-Systems&#10;    default: true" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>